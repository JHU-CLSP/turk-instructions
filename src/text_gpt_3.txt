Error importing pyautogui 'DISPLAY'
Solver: gpt4-text-vision
Starting display for the server
 = = = = = = = = = = = = starting new task: `ROT Details [m=50] rocstories - 0 - 99` = = = = = = = = = = = = 
First instance id: 10370
instance_id: 10379 <-> row_number: 9
 --> inputs: ['rot-agree', 'rot-categorization', 'rot-moral-foundations', 'char-involved-general', 'rot-rewrite', 'rot-judgment', 'agency-fwd', 'action-fwd-good', 'fwd-agree', 'fwd-legal', 'fwd-pressure', 'char-involved-fwd', 'fwd-hypothetical', 'n-characters']
 --> Looking up gold labels from row index 9 of `input.csv` (unique inputs). 
 --> input labels: {'rot-agree': [3, 4, 3, 3, 3, 3, 3, 4, 4, 3, 3, 3, 4, 4, 2, 4, 3, 3, 4, 3, 3, 4, 3, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 4, 4, 2, 4, 3, 4], 'rot-categorization': ['morality-ethics|social-norms', 'advice', 'advice', 'social-norms', 'social-norms|description', 'advice|description', 'social-norms', 'advice', 'social-norms', 'social-norms', 'advice', 'advice', 'social-norms|advice', 'morality-ethics|social-norms', 'advice', 'social-norms|advice', 'morality-ethics|social-norms', 'social-norms', 'social-norms|advice', 'social-norms', 'advice', 'social-norms', 'social-norms', 'social-norms', 'advice', 'social-norms', 'social-norms|advice', 'social-norms|advice', 'social-norms', 'advice', 'social-norms|advice', 'advice', 'advice', 'social-norms|advice', 'social-norms|advice', 'advice', 'advice', 'description', 'advice|description', 'social-norms', 'morality-ethics|advice', 'social-norms|advice', 'social-norms|advice', 'social-norms', 'social-norms', 'advice', 'description', 'social-norms', 'advice', 'social-norms'], 'rot-moral-foundations': ['care-harm', '', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating|loyalty-betrayal', 'authority-subversion', 'care-harm', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating|loyalty-betrayal', 'fairness-cheating', 'fairness-cheating|authority-subversion|sanctity-degradation', 'care-harm', 'fairness-cheating', 'fairness-cheating', 'care-harm|authority-subversion', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating|authority-subversion', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'care-harm|fairness-cheating|loyalty-betrayal', 'fairness-cheating', 'fairness-cheating|authority-subversion', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', '', 'fairness-cheating', 'care-harm|fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'care-harm', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', '', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating'], 'char-involved-general': ['char-1', 'char-1', 'char-2', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1'], 'rot-rewrite': ['letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'having to let other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'not letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beating you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition', 'not letting other people beat you in a competition.', 'letting other people beat you in a competition', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition'], 'rot-judgment': ["You don't have to", "don't have to", "don't have to", "isn't required", "don't have to", "you don't have to", "don't have to", "it's isn't required", "don't have to", 'expected', "Don't have to", "You don't have to", "You don't have to", "you don't have to", "don't have to", "You don't have to", "don't have to", "You don't have to", "You don't have to", "You don't have to", "it's not expected", "don't have to", "You don't have to", "You don't have to", "don't have to", "don't have to", "You don't have to", "don't have to", "don't have to", "You shouldn't", "don't have to", "don't", "you don't have to", "don't have to", "You don't have to", "you don't have to", "You don't have to", "don't have to", "You don't have to", "it's not expected", "You shouldn't", "You don't have to", "don't have to", "don't have to", "don't have to", 'okay', "don't have to", "You don't have to", "don't have to", "You don't have to"], 'agency-fwd': ['agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency'], 'action-fwd-good': [-1.0, -1.0, -1.0, 0.0, 0.0, -1.0, -1.0, 0.0, -1.0, 0.0, -1.0, -1.0, -1.0, -1.0, 0.0, -1.0, -1.0, -1.0, -1.0, 0.0, 0.0, -1.0, 0.0, -1.0, 1.0, 0.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 0.0, -1.0, 0.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, 0.0, -1.0, 0.0, -1.0, 0.0, 0.0, -1.0], 'fwd-agree': [2.0, 4.0, 2.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 3.0, 3.0, 4.0, 3.0, 2.0, 2.0, 1.0, 3.0, 1.0, 3.0, 3.0, 4.0, 2.0, 3.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 2.0, 3.0, 2.0, 2.0, 3.0, 2.0, 4.0, 3.0, 2.0, 3.0, 3.0, 4.0, 2.0, 2.0, 2.0, 2.0], 'fwd-legal': ['legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'tolerated', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal'], 'fwd-pressure': [-1.0, -2.0, -2.0, 0.0, -1.0, -1.0, -1.0, -1.0, -2.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -1.0, -1.0, -1.0, 0.0, 0.0, 0.0, -2.0, 0.0, 0.0, -1.0, -1.0, 0.0, -1.0, 0.0, -1.0, -1.0, 0.0, -1.0, -1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -2.0, 0.0, -1.0, 0.0, -1.0, 2.0, -1.0, -1.0, -1.0, -1.0], 'char-involved-fwd': ['char-1', 'char-1', 'char-2', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1'], 'fwd-hypothetical': ['explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit-no', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit'], 'n-characters': [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]}
 - - - - - -  starting a new element: `Input(name=`rot-agree`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`)` - - - - - -  
input: Input(name=`rot-agree`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`)
about to try executing one action, on the following input: rot-agree
Executing one action: self.actions.modify_radio('rot-agree', '3')
We are going to select this radio button: <input type="radio" name="rot-agree" value="3" required="">
 - - - - - -  starting a new element: `Input(name=`rot-categorization`, type=`checkbox`, task=`ROT Details [m=50] rocstories - 0 - 99`)` - - - - - -  
input: Input(name=`rot-categorization`, type=`checkbox`, task=`ROT Details [m=50] rocstories - 0 - 99`)
about to try executing one action, on the following input: rot-categorization
Executing one action: self.actions.modify_checkbox('rot-categorization', 'advice')
Looking for checkboxes with `name`: `rot-categorization` the values: `['advice']`
About to check this checkbox: <input type="checkbox" name="rot-categorization" value="advice">
 - - - - - -  starting a new element: `Input(name=`rot-moral-foundations`, type=`checkbox`, task=`ROT Details [m=50] rocstories - 0 - 99`)` - - - - - -  
input: Input(name=`rot-moral-foundations`, type=`checkbox`, task=`ROT Details [m=50] rocstories - 0 - 99`)
about to try executing one action, on the following input: rot-moral-foundations
Executing one action: self.actions.modify_checkbox('rot-moral-foundations', 'loyalty-betrayal')
Looking for checkboxes with `name`: `rot-moral-foundations` the values: `['loyalty-betrayal']`
About to check this checkbox: <input type="checkbox" name="rot-moral-foundations" value="loyalty-betrayal">
 - - - - - -  starting a new element: `Input(name=`char-involved-general`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`)` - - - - - -  
input: Input(name=`char-involved-general`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`)
about to try executing one action, on the following input: char-involved-general
Executing one action: self.actions.modify_radio('char-involved-general', 'char-1')
We are going to select this radio button: <input type="radio" name="char-involved-general" value="char-1" required="">
 - - - - - -  starting a new element: `Input(name=`rot-rewrite`, type=`text`, task=`ROT Details [m=50] rocstories - 0 - 99`)` - - - - - -  
input: Input(name=`rot-rewrite`, type=`text`, task=`ROT Details [m=50] rocstories - 0 - 99`)
about to try executing one action, on the following input: rot-rewrite
Executing one action: self.actions.modify_text('rot-rewrite', 'letting other people beat you in a competition')
Add text `letting other people beat you in a competition` to this text input: <input type="text" class="text" name="rot-rewrite" value="You don't have to let other people beat you in a competition." id="rot-rewrite">
 - - - - - -  starting a new element: `Input(name=`rot-judgment`, type=`text`, task=`ROT Details [m=50] rocstories - 0 - 99`)` - - - - - -  
input: Input(name=`rot-judgment`, type=`text`, task=`ROT Details [m=50] rocstories - 0 - 99`)
about to try executing one action, on the following input: rot-judgment
Executing one action: self.actions.modify_text('rot-judgment', 'don\'t have to')
Add text `don't have to` to this text input: <input type="text" class="text" name="rot-judgment" id="rot-judgment">
 - - - - - -  starting a new element: `Input(name=`agency-fwd`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`)` - - - - - -  
input: Input(name=`agency-fwd`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`)
about to try executing one action, on the following input: agency-fwd
Executing one action: self.actions.modify_radio('agency-fwd', 'agency')
We are going to select this radio button: <input type="radio" name="agency-fwd" value="agency" required="">
 - - - - - -  starting a new element: `Input(name=`action-fwd-good`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`)` - - - - - -  
input: Input(name=`action-fwd-good`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`)
about to try executing one action, on the following input: action-fwd-good
Executing one action: self.actions.modify_radio('action-fwd-good', '0')
We are going to select this radio button: <input type="radio" name="action-fwd-good" value="0" required="required">
 - - - - - -  starting a new element: `Input(name=`fwd-agree`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`)` - - - - - -  
input: Input(name=`fwd-agree`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`)
about to try executing one action, on the following input: fwd-agree
Executing one action: self.actions.modify_radio('fwd-agree', '3')
We are going to select this radio button: <input type="radio" name="fwd-agree" value="3" required="required">
 - - - - - -  starting a new element: `Input(name=`fwd-legal`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`)` - - - - - -  
input: Input(name=`fwd-legal`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`)
about to try executing one action, on the following input: fwd-legal
Executing one action: self.actions.modify_radio('fwd-legal', 'legal')
We are going to select this radio button: <input type="radio" name="fwd-legal" value="legal" required="required">
 - - - - - -  starting a new element: `Input(name=`fwd-pressure`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`)` - - - - - -  
input: Input(name=`fwd-pressure`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`)
about to try executing one action, on the following input: fwd-pressure
Executing one action: self.actions.modify_radio('fwd-pressure', '0')
We are going to select this radio button: <input type="radio" name="fwd-pressure" value="0" required="required">
 - - - - - -  starting a new element: `Input(name=`char-involved-fwd`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`)` - - - - - -  
input: Input(name=`char-involved-fwd`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`)
about to try executing one action, on the following input: char-involved-fwd
Executing one action: self.actions.modify_radio('char-involved-fwd', 'char-1')
We are going to select this radio button: <input type="radio" name="char-involved-fwd" value="char-1" required="required">
 - - - - - -  starting a new element: `Input(name=`fwd-hypothetical`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`)` - - - - - -  
input: Input(name=`fwd-hypothetical`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`)
about to try executing one action, on the following input: fwd-hypothetical
Executing one action: self.actions.modify_radio('fwd-hypothetical', 'hypothetical')
We are going to select this radio button: <input type="radio" name="fwd-hypothetical" value="hypothetical" required="required">
 - - - - - -  starting a new element: `Input(name=`n-characters`, type=`hidden`, task=`ROT Details [m=50] rocstories - 0 - 99`)` - - - - - -  
Skipping element `n-characters` since it is not visible.
input: Input(name=`rot-agree`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`)
 visible : ['3']
 visible_values : ['3']
input: Input(name=`rot-categorization`, type=`checkbox`, task=`ROT Details [m=50] rocstories - 0 - 99`)
 visible : ['advice']
 visible_values : ['advice']
input: Input(name=`rot-moral-foundations`, type=`checkbox`, task=`ROT Details [m=50] rocstories - 0 - 99`)
 visible : ['loyalty-betrayal']
 visible_values : ['loyalty-betrayal']
input: Input(name=`char-involved-general`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`)
 visible : ['char-1']
 visible_values : ['char-1']
input: Input(name=`rot-rewrite`, type=`text`, task=`ROT Details [m=50] rocstories - 0 - 99`)
 visible : ['letting other people beat you in a competition']
 visible_values : ['letting other people beat you in a competition']
input: Input(name=`rot-judgment`, type=`text`, task=`ROT Details [m=50] rocstories - 0 - 99`)
 visible : ["don't have to"]
 visible_values : ["don't have to"]
input: Input(name=`agency-fwd`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`)
 visible : ['agency']
 visible_values : ['agency']
input: Input(name=`action-fwd-good`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`)
 visible : ['0']
 visible_values : ['0']
input: Input(name=`fwd-agree`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`)
 visible : ['3']
 visible_values : ['3']
input: Input(name=`fwd-legal`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`)
 visible : ['legal']
 visible_values : ['legal']
input: Input(name=`fwd-pressure`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`)
 visible : ['0']
 visible_values : ['0']
input: Input(name=`char-involved-fwd`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`)
 visible : ['char-1']
 visible_values : ['char-1']
input: Input(name=`fwd-hypothetical`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`)
 visible : ['hypothetical']
 visible_values : ['hypothetical']
input: Input(name=`n-characters`, type=`hidden`, task=`ROT Details [m=50] rocstories - 0 - 99`)
 visible : ['3']
 visible_values : ['3']
 ------- evaluating input: Input(name=`rot-agree`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`) ------- 
----> answers: `[3, 4, 3, 3, 3, 3, 3, 4, 4, 3, 3, 3, 4, 4, 2, 4, 3, 3, 4, 3, 3, 4, 3, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 4, 4, 2, 4, 3, 4]` - type: `<class 'list'>`
----> baseline_answer: `3` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`rot-categorization`, type=`checkbox`, task=`ROT Details [m=50] rocstories - 0 - 99`) ------- 
----> answers: `['morality-ethics|social-norms', 'advice', 'advice', 'social-norms', 'description|social-norms', 'advice|description', 'social-norms', 'advice', 'social-norms', 'social-norms', 'advice', 'advice', 'advice|social-norms', 'morality-ethics|social-norms', 'advice', 'advice|social-norms', 'morality-ethics|social-norms', 'social-norms', 'advice|social-norms', 'social-norms', 'advice', 'social-norms', 'social-norms', 'social-norms', 'advice', 'social-norms', 'advice|social-norms', 'advice|social-norms', 'social-norms', 'advice', 'advice|social-norms', 'advice', 'advice', 'advice|social-norms', 'advice|social-norms', 'advice', 'advice', 'description', 'advice|description', 'social-norms', 'advice|morality-ethics', 'advice|social-norms', 'advice|social-norms', 'social-norms', 'social-norms', 'advice', 'description', 'social-norms', 'advice', 'social-norms']` - type: `<class 'list'>`
----> baseline_answer: `advice` - type: `<class 'str'>`
Model answers: advice 
Gold answers: ['morality-ethics|social-norms', 'advice', 'advice', 'social-norms', 'description|social-norms', 'advice|description', 'social-norms', 'advice', 'social-norms', 'social-norms', 'advice', 'advice', 'advice|social-norms', 'morality-ethics|social-norms', 'advice', 'advice|social-norms', 'morality-ethics|social-norms', 'social-norms', 'advice|social-norms', 'social-norms', 'advice', 'social-norms', 'social-norms', 'social-norms', 'advice', 'social-norms', 'advice|social-norms', 'advice|social-norms', 'social-norms', 'advice', 'advice|social-norms', 'advice', 'advice', 'advice|social-norms', 'advice|social-norms', 'advice', 'advice', 'description', 'advice|description', 'social-norms', 'advice|morality-ethics', 'advice|social-norms', 'advice|social-norms', 'social-norms', 'social-norms', 'advice', 'description', 'social-norms', 'advice', 'social-norms']
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`rot-moral-foundations`, type=`checkbox`, task=`ROT Details [m=50] rocstories - 0 - 99`) ------- 
----> answers: `['care-harm', '', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating|loyalty-betrayal', 'authority-subversion', 'care-harm', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating|loyalty-betrayal', 'fairness-cheating', 'authority-subversion|fairness-cheating|sanctity-degradation', 'care-harm', 'fairness-cheating', 'fairness-cheating', 'authority-subversion|care-harm', 'fairness-cheating', 'fairness-cheating', 'authority-subversion|fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'care-harm|fairness-cheating|loyalty-betrayal', 'fairness-cheating', 'authority-subversion|fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', '', 'fairness-cheating', 'care-harm|fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'care-harm', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', '', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating']` - type: `<class 'list'>`
----> baseline_answer: `loyalty-betrayal` - type: `<class 'str'>`
Model answers: loyalty-betrayal 
Gold answers: ['care-harm', '', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating|loyalty-betrayal', 'authority-subversion', 'care-harm', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating|loyalty-betrayal', 'fairness-cheating', 'authority-subversion|fairness-cheating|sanctity-degradation', 'care-harm', 'fairness-cheating', 'fairness-cheating', 'authority-subversion|care-harm', 'fairness-cheating', 'fairness-cheating', 'authority-subversion|fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'care-harm|fairness-cheating|loyalty-betrayal', 'fairness-cheating', 'authority-subversion|fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', '', 'fairness-cheating', 'care-harm|fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'care-harm', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating', '', 'fairness-cheating', 'fairness-cheating', 'fairness-cheating']
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`char-involved-general`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`) ------- 
----> answers: `['char-1', 'char-1', 'char-2', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1']` - type: `<class 'list'>`
----> baseline_answer: `char-1` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`rot-rewrite`, type=`text`, task=`ROT Details [m=50] rocstories - 0 - 99`) ------- 
answers after mapping: `['letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'having to let other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'not letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beating you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition', 'not letting other people beat you in a competition.', 'letting other people beat you in a competition', 'letting other people beat you in a competition.', 'letting other people beat you in a competition.', 'letting other people beat you in a competition']`
----> answers: `['not letting other people beat you in a competition.', 'letting other people beat you in a competition', 'letting other people beat you in a competition.', 'letting other people beating you in a competition.', 'having to let other people beat you in a competition.']` - type: `<class 'list'>`
----> baseline_answer: `letting other people beat you in a competition` - type: `<class 'str'>`
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`rot-judgment`, type=`text`, task=`ROT Details [m=50] rocstories - 0 - 99`) ------- 
answers after mapping: `["You don't have to", "don't have to", "don't have to", "isn't required", "don't have to", "you don't have to", "don't have to", "it's isn't required", "don't have to", 'expected', "Don't have to", "You don't have to", "You don't have to", "you don't have to", "don't have to", "You don't have to", "don't have to", "You don't have to", "You don't have to", "You don't have to", "it's not expected", "don't have to", "You don't have to", "You don't have to", "don't have to", "don't have to", "You don't have to", "don't have to", "don't have to", "You shouldn't", "don't have to", "don't", "you don't have to", "don't have to", "You don't have to", "you don't have to", "You don't have to", "don't have to", "You don't have to", "it's not expected", "You shouldn't", "You don't have to", "don't have to", "don't have to", "don't have to", 'okay', "don't have to", "You don't have to", "don't have to", "You don't have to"]`
----> answers: `["isn't required", "Don't have to", 'expected', 'okay', "it's not expected", "don't have to", "You don't have to", "don't", "You shouldn't", "you don't have to", "it's isn't required"]` - type: `<class 'list'>`
----> baseline_answer: `don't have to` - type: `<class 'str'>`
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`agency-fwd`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`) ------- 
----> answers: `['agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency', 'agency']` - type: `<class 'list'>`
----> baseline_answer: `agency` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`action-fwd-good`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`) ------- 
----> answers: `[-1.0, -1.0, -1.0, 0.0, 0.0, -1.0, -1.0, 0.0, -1.0, 0.0, -1.0, -1.0, -1.0, -1.0, 0.0, -1.0, -1.0, -1.0, -1.0, 0.0, 0.0, -1.0, 0.0, -1.0, 1.0, 0.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 0.0, -1.0, 0.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, 0.0, -1.0, 0.0, -1.0, 0.0, 0.0, -1.0]` - type: `<class 'list'>`
----> baseline_answer: `0` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`fwd-agree`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`) ------- 
----> answers: `[2.0, 4.0, 2.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 3.0, 3.0, 4.0, 3.0, 2.0, 2.0, 1.0, 3.0, 1.0, 3.0, 3.0, 4.0, 2.0, 3.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 2.0, 3.0, 2.0, 2.0, 3.0, 2.0, 4.0, 3.0, 2.0, 3.0, 3.0, 4.0, 2.0, 2.0, 2.0, 2.0]` - type: `<class 'list'>`
----> baseline_answer: `3` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`fwd-legal`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`) ------- 
----> answers: `['legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'tolerated', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal', 'legal']` - type: `<class 'list'>`
----> baseline_answer: `legal` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`fwd-pressure`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`) ------- 
----> answers: `[-1.0, -2.0, -2.0, 0.0, -1.0, -1.0, -1.0, -1.0, -2.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -1.0, -1.0, -1.0, 0.0, 0.0, 0.0, -2.0, 0.0, 0.0, -1.0, -1.0, 0.0, -1.0, 0.0, -1.0, -1.0, 0.0, -1.0, -1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -2.0, 0.0, -1.0, 0.0, -1.0, 2.0, -1.0, -1.0, -1.0, -1.0]` - type: `<class 'list'>`
----> baseline_answer: `0` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`char-involved-fwd`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`) ------- 
----> answers: `['char-1', 'char-1', 'char-2', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1', 'char-1']` - type: `<class 'list'>`
----> baseline_answer: `char-1` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`fwd-hypothetical`, type=`radio`, task=`ROT Details [m=50] rocstories - 0 - 99`) ------- 
----> answers: `['explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit-no', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit', 'explicit']` - type: `<class 'list'>`
----> baseline_answer: `hypothetical` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`n-characters`, type=`hidden`, task=`ROT Details [m=50] rocstories - 0 - 99`) ------- 
Skipping element `n-characters` since it is not visible.
 --> Per-instance overall score: 0.6923076923076923
 --> Per-instance per-field breakdown: {'radio': [1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0], 'checkbox': [1.0, 0.0], 'text': [1.0, 1.0]}
 = = = = = = = = = = = = starting new task: `Associate countries and languages with Ethnologue` = = = = = = = = = = = = 
First instance id: 14729
instance_id: 14731 <-> row_number: 2
 --> inputs: ['url', 'primary_country', 'region', 'countries']
 --> Looking up gold labels from row index 2 of `input.csv` (unique inputs). 
 --> input labels: {'url': ['http://www.ethnologue.com/show_language.asp?code=ukr', 'http://www.ethnologue.com/show_language.asp?code=ukr', 'http://www.ethnologue.com/show_language.asp?code=ukr'], 'primary_country': ['ukraine', 'ukraine', 'ukraine'], 'region': ['Also in Argentina, Armenia, Azerbaijan, Belarus, Brazil, Canada, Croatia, Czech Republic, Estonia, Georgia, Hungary, Kazakhstan, Kyrgyzstan, Latvia, Lithuania, Moldova, Paraguay, Poland, Romania, Russian Federation (Asia), Serbia, Slovakia, Tajikistan, Turkmenistan, United States, Uzbekistan.', 'Also in Argentina, Armenia, Azerbaijan, Belarus, Brazil, Canada, Croatia, Czech Republic, Estonia, Georgia, Hungary, Kazakhstan, Kyrgyzstan, Latvia, Lithuania, Moldova, Paraguay, Poland, Romania, Russian Federation (Asia), Serbia, Slovakia, Tajikistan, Turkmenistan, United States, Uzbekistan.', 'Also in Argentina, Armenia, Azerbaijan, Belarus, Brazil, Canada, Croatia, Czech Republic, Estonia, Georgia, Hungary, Kazakhstan, Kyrgyzstan, Latvia, Lithuania, Moldova, Paraguay, Poland, Romania, Russian Federation (Asia), Serbia, Slovakia, Tajikistan, Turkmenistan, United States, Uzbekistan.'], 'countries': ['serbia|canada|georgia|slovakia|argentina|armenia|unitedstates|poland|croatia|kazakhstan|uzbekistan|czechrepublic|moldova|belarus|romania|hungary|latvia|russianfederation|other|brazil|estonia|lithuania', 'serbia|canada|georgia|slovakia|argentina|armenia|unitedstates|poland|croatia|kazakhstan|uzbekistan|czechrepublic|moldova|belarus|romania|hungary|latvia|russianfederation|other|brazil|estonia|lithuania', 'serbia|canada|georgia|slovakia|argentina|armenia|unitedstates|poland|croatia|kazakhstan|uzbekistan|czechrepublic|moldova|belarus|romania|hungary|latvia|russianfederation|other|brazil|estonia|lithuania']}
 - - - - - -  starting a new element: `Input(name=`url`, type=`text`, task=`Associate countries and languages with Ethnologue`)` - - - - - -  
input: Input(name=`url`, type=`text`, task=`Associate countries and languages with Ethnologue`)
about to try executing one action, on the following input: url
Executing one action: self.actions.modify_text('url', 'nan')
Since the input value is `nan`, we are not going to modify the text.
 - - - - - -  starting a new element: `Input(name=`primary_country`, type=`select`, task=`Associate countries and languages with Ethnologue`)` - - - - - -  
input: Input(name=`primary_country`, type=`select`, task=`Associate countries and languages with Ethnologue`)
about to try executing one action, on the following input: primary_country
Executing one action: self.actions.modify_select('primary_country', 'ukraine')
We are going to select this select `primary_country` with value `ukraine`
 - - - - - -  starting a new element: `Input(name=`region`, type=`textarea`, task=`Associate countries and languages with Ethnologue`)` - - - - - -  
input: Input(name=`region`, type=`textarea`, task=`Associate countries and languages with Ethnologue`)
about to try executing one action, on the following input: region
Executing one action: self.actions.modify_select('region', 'ukraine')
Failed to execute an action self.actions.modify_select('region', 'ukraine'), error: Message: Select only works on <select> elements, not on textarea

 - - - - - -  starting a new element: `Input(name=`countries`, type=`checkbox`, task=`Associate countries and languages with Ethnologue`)` - - - - - -  
input: Input(name=`countries`, type=`checkbox`, task=`Associate countries and languages with Ethnologue`)
about to try executing one action, on the following input: countries
Executing one action: self.actions.modify_select('primary_country', 'ukraine')
We are going to select this select `primary_country` with value `ukraine`
input: Input(name=`url`, type=`text`, task=`Associate countries and languages with Ethnologue`)
 visible : [None]
 visible_values : [None]
input: Input(name=`primary_country`, type=`select`, task=`Associate countries and languages with Ethnologue`)
 visible : ['ukraine']
 visible_values : ['ukraine']
input: Input(name=`region`, type=`textarea`, task=`Associate countries and languages with Ethnologue`)
 visible : [' ']
 visible_values : [' ']
input: Input(name=`countries`, type=`checkbox`, task=`Associate countries and languages with Ethnologue`)
 visible : []
 visible_values : []
 ------- evaluating input: Input(name=`url`, type=`text`, task=`Associate countries and languages with Ethnologue`) ------- 
answers after mapping: `['http://www.ethnologue.com/show_language.asp?code=ukr', 'http://www.ethnologue.com/show_language.asp?code=ukr', 'http://www.ethnologue.com/show_language.asp?code=ukr']`
----> answers: `['http://www.ethnologue.com/show_language.asp?code=ukr']` - type: `<class 'list'>`
----> baseline_answer: `` - type: `<class 'str'>`
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`primary_country`, type=`select`, task=`Associate countries and languages with Ethnologue`) ------- 
----> answers: `['ukraine', 'ukraine', 'ukraine']` - type: `<class 'list'>`
----> baseline_answer: `ukraine` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`region`, type=`textarea`, task=`Associate countries and languages with Ethnologue`) ------- 
answers after mapping: `['Also in Argentina, Armenia, Azerbaijan, Belarus, Brazil, Canada, Croatia, Czech Republic, Estonia, Georgia, Hungary, Kazakhstan, Kyrgyzstan, Latvia, Lithuania, Moldova, Paraguay, Poland, Romania, Russian Federation (Asia), Serbia, Slovakia, Tajikistan, Turkmenistan, United States, Uzbekistan.', 'Also in Argentina, Armenia, Azerbaijan, Belarus, Brazil, Canada, Croatia, Czech Republic, Estonia, Georgia, Hungary, Kazakhstan, Kyrgyzstan, Latvia, Lithuania, Moldova, Paraguay, Poland, Romania, Russian Federation (Asia), Serbia, Slovakia, Tajikistan, Turkmenistan, United States, Uzbekistan.', 'Also in Argentina, Armenia, Azerbaijan, Belarus, Brazil, Canada, Croatia, Czech Republic, Estonia, Georgia, Hungary, Kazakhstan, Kyrgyzstan, Latvia, Lithuania, Moldova, Paraguay, Poland, Romania, Russian Federation (Asia), Serbia, Slovakia, Tajikistan, Turkmenistan, United States, Uzbekistan.']`
----> answers: `['Also in Argentina, Armenia, Azerbaijan, Belarus, Brazil, Canada, Croatia, Czech Republic, Estonia, Georgia, Hungary, Kazakhstan, Kyrgyzstan, Latvia, Lithuania, Moldova, Paraguay, Poland, Romania, Russian Federation (Asia), Serbia, Slovakia, Tajikistan, Turkmenistan, United States, Uzbekistan.']` - type: `<class 'list'>`
----> baseline_answer: ` ` - type: `<class 'str'>`
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`countries`, type=`checkbox`, task=`Associate countries and languages with Ethnologue`) ------- 
----> answers: `['argentina|armenia|belarus|brazil|canada|croatia|czechrepublic|estonia|georgia|hungary|kazakhstan|latvia|lithuania|moldova|other|poland|romania|russianfederation|serbia|slovakia|unitedstates|uzbekistan', 'argentina|armenia|belarus|brazil|canada|croatia|czechrepublic|estonia|georgia|hungary|kazakhstan|latvia|lithuania|moldova|other|poland|romania|russianfederation|serbia|slovakia|unitedstates|uzbekistan', 'argentina|armenia|belarus|brazil|canada|croatia|czechrepublic|estonia|georgia|hungary|kazakhstan|latvia|lithuania|moldova|other|poland|romania|russianfederation|serbia|slovakia|unitedstates|uzbekistan']` - type: `<class 'list'>`
----> baseline_answer: `` - type: `<class 'str'>`
Model answers:  
Gold answers: ['argentina|armenia|belarus|brazil|canada|croatia|czechrepublic|estonia|georgia|hungary|kazakhstan|latvia|lithuania|moldova|other|poland|romania|russianfederation|serbia|slovakia|unitedstates|uzbekistan', 'argentina|armenia|belarus|brazil|canada|croatia|czechrepublic|estonia|georgia|hungary|kazakhstan|latvia|lithuania|moldova|other|poland|romania|russianfederation|serbia|slovakia|unitedstates|uzbekistan', 'argentina|armenia|belarus|brazil|canada|croatia|czechrepublic|estonia|georgia|hungary|kazakhstan|latvia|lithuania|moldova|other|poland|romania|russianfederation|serbia|slovakia|unitedstates|uzbekistan']
 --> scores:  0.0
----> per-field score: 0.0
 --> Per-instance overall score: 0.25
 --> Per-instance per-field breakdown: {'text': [0.0], 'select': [1.0], 'textarea': [0.0], 'checkbox': [0.0]}
 = = = = = = = = = = = = starting new task: `Radiology Report Sentence Classification` = = = = = = = = = = = = 
First instance id: 2412
instance_id: 2693 <-> row_number: 281
 --> inputs: ['classification1', 'confidence1', 'classification2', 'classification3', 'confidence2', 'confidence3']
 --> Looking up gold labels from row index 281 of `input.csv` (unique inputs). 
 --> input labels: {'classification1': ['', '', '', ''], 'confidence1': ['', '', '', ''], 'classification2': ['', '', '', ''], 'classification3': ['', '', '', ''], 'confidence2': ['', '', '', ''], 'confidence3': ['', '', '', '']}
 - - - - - -  starting a new element: `Input(name=`classification1`, type=`radio`, task=`Radiology Report Sentence Classification`)` - - - - - -  
input: Input(name=`classification1`, type=`radio`, task=`Radiology Report Sentence Classification`)
about to try executing one action, on the following input: classification1
Executing one action: self.actions.modify_radio('classification1', 'abnormal')
We are going to select this radio button: <input name="classification1" type="radio" value="abnormal">
 - - - - - -  starting a new element: `Input(name=`confidence1`, type=`radio`, task=`Radiology Report Sentence Classification`)` - - - - - -  
input: Input(name=`confidence1`, type=`radio`, task=`Radiology Report Sentence Classification`)
about to try executing one action, on the following input: confidence1
Executing one action: self.actions.modify_radio('confidence1', 'VeryConfident')
We are going to select this radio button: <input name="confidence1" type="radio" value="VeryConfident">
 - - - - - -  starting a new element: `Input(name=`classification2`, type=`radio`, task=`Radiology Report Sentence Classification`)` - - - - - -  
Skipping element `classification2` since it is not visible.
 - - - - - -  starting a new element: `Input(name=`classification3`, type=`radio`, task=`Radiology Report Sentence Classification`)` - - - - - -  
Skipping element `classification3` since it is not visible.
 - - - - - -  starting a new element: `Input(name=`confidence2`, type=`radio`, task=`Radiology Report Sentence Classification`)` - - - - - -  
Skipping element `confidence2` since it is not visible.
 - - - - - -  starting a new element: `Input(name=`confidence3`, type=`radio`, task=`Radiology Report Sentence Classification`)` - - - - - -  
Skipping element `confidence3` since it is not visible.
input: Input(name=`classification1`, type=`radio`, task=`Radiology Report Sentence Classification`)
 visible : ['abnormal']
 visible_values : ['abnormal']
input: Input(name=`confidence1`, type=`radio`, task=`Radiology Report Sentence Classification`)
 visible : ['VeryConfident']
 visible_values : ['VeryConfident']
input: Input(name=`classification2`, type=`radio`, task=`Radiology Report Sentence Classification`)
 visible : []
 visible_values : []
input: Input(name=`classification3`, type=`radio`, task=`Radiology Report Sentence Classification`)
 visible : []
 visible_values : []
input: Input(name=`confidence2`, type=`radio`, task=`Radiology Report Sentence Classification`)
 visible : []
 visible_values : []
input: Input(name=`confidence3`, type=`radio`, task=`Radiology Report Sentence Classification`)
 visible : []
 visible_values : []
 ------- evaluating input: Input(name=`classification1`, type=`radio`, task=`Radiology Report Sentence Classification`) ------- 
----> answers: `['', '', '', '']` - type: `<class 'list'>`
----> baseline_answer: `abnormal` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`confidence1`, type=`radio`, task=`Radiology Report Sentence Classification`) ------- 
----> answers: `['', '', '', '']` - type: `<class 'list'>`
----> baseline_answer: `VeryConfident` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`classification2`, type=`radio`, task=`Radiology Report Sentence Classification`) ------- 
Skipping element `classification2` since it is not visible.
 ------- evaluating input: Input(name=`classification3`, type=`radio`, task=`Radiology Report Sentence Classification`) ------- 
Skipping element `classification3` since it is not visible.
 ------- evaluating input: Input(name=`confidence2`, type=`radio`, task=`Radiology Report Sentence Classification`) ------- 
Skipping element `confidence2` since it is not visible.
 ------- evaluating input: Input(name=`confidence3`, type=`radio`, task=`Radiology Report Sentence Classification`) ------- 
Skipping element `confidence3` since it is not visible.
 --> Per-instance overall score: 0.0
 --> Per-instance per-field breakdown: {'radio': [0.0, 0.0]}
 = = = = = = = = = = = = starting new task: `Reddit In-group Analysis Comment annotation 3` = = = = = = = = = = = = 
First instance id: 21638
instance_id: 21690 <-> row_number: 52
Could not find input field with name `option0.Hard to tell`
Could not find input field with name `option0.Highly likely`
Could not find input field with name `option0.Likely`
Could not find input field with name `option0.Unlikely`
Could not find input field with name `option1.Hard to tell`
Could not find input field with name `option1.Highly likely`
Could not find input field with name `option1.Likely`
Could not find input field with name `option1.Unlikely`
Could not find input field with name `option2.Hard to tell`
Could not find input field with name `option2.Highly likely`
Could not find input field with name `option2.Likely`
Could not find input field with name `option2.Unlikely`
Could not find input field with name `option3.Hard to tell`
Could not find input field with name `option3.Highly likely`
Could not find input field with name `option3.Likely`
Could not find input field with name `option3.Unlikely`
Could not find input field with name `option4.Hard to tell`
Could not find input field with name `option4.Highly likely`
Could not find input field with name `option4.Likely`
Could not find input field with name `option4.Unlikely`
 --> inputs: ['option0', 'option1', 'option2', 'option3', 'option4']
 --> Looking up gold labels from row index 52 of `input.csv` (unique inputs). 
 --> input labels: {'option0': ['Highly likely', 'Highly likely', 'Likely'], 'option1': ['Highly likely', 'Highly likely', 'Highly likely'], 'option2': ['Highly likely', 'Highly likely', 'Likely'], 'option3': ['Highly likely', 'Highly likely', 'Likely'], 'option4': ['Highly likely', 'Highly likely', 'Highly likely']}
 - - - - - -  starting a new element: `Input(name=`option0`, type=`radio`, task=`Reddit In-group Analysis Comment annotation 3`)` - - - - - -  
input: Input(name=`option0`, type=`radio`, task=`Reddit In-group Analysis Comment annotation 3`)
about to try executing one action, on the following input: option0
Executing one action: self.actions.modify_radio('option0', 'Highly likely')
We are going to select this radio button: <input type="radio" name="option0" value="Highly likely">
 - - - - - -  starting a new element: `Input(name=`option1`, type=`radio`, task=`Reddit In-group Analysis Comment annotation 3`)` - - - - - -  
input: Input(name=`option1`, type=`radio`, task=`Reddit In-group Analysis Comment annotation 3`)
about to try executing one action, on the following input: option1
Executing one action: self.actions.modify_radio('option1', 'Highly likely')
We are going to select this radio button: <input type="radio" name="option1" value="Highly likely">
 - - - - - -  starting a new element: `Input(name=`option2`, type=`radio`, task=`Reddit In-group Analysis Comment annotation 3`)` - - - - - -  
input: Input(name=`option2`, type=`radio`, task=`Reddit In-group Analysis Comment annotation 3`)
about to try executing one action, on the following input: option2
Executing one action: self.actions.modify_radio('option2', 'Highly likely')
We are going to select this radio button: <input type="radio" name="option2" value="Highly likely">
 - - - - - -  starting a new element: `Input(name=`option3`, type=`radio`, task=`Reddit In-group Analysis Comment annotation 3`)` - - - - - -  
input: Input(name=`option3`, type=`radio`, task=`Reddit In-group Analysis Comment annotation 3`)
about to try executing one action, on the following input: option3
Executing one action: self.actions.modify_radio('option3', 'Highly likely')
We are going to select this radio button: <input type="radio" name="option3" value="Highly likely">
 - - - - - -  starting a new element: `Input(name=`option4`, type=`radio`, task=`Reddit In-group Analysis Comment annotation 3`)` - - - - - -  
input: Input(name=`option4`, type=`radio`, task=`Reddit In-group Analysis Comment annotation 3`)
about to try executing one action, on the following input: option4
Executing one action: self.actions.modify_radio('option4', 'Likely')
We are going to select this radio button: <input type="radio" name="option4" value="Likely">
input: Input(name=`option0`, type=`radio`, task=`Reddit In-group Analysis Comment annotation 3`)
 visible : ['Highly likely']
 visible_values : ['Highly likely']
input: Input(name=`option1`, type=`radio`, task=`Reddit In-group Analysis Comment annotation 3`)
 visible : ['Highly likely']
 visible_values : ['Highly likely']
input: Input(name=`option2`, type=`radio`, task=`Reddit In-group Analysis Comment annotation 3`)
 visible : ['Highly likely']
 visible_values : ['Highly likely']
input: Input(name=`option3`, type=`radio`, task=`Reddit In-group Analysis Comment annotation 3`)
 visible : ['Highly likely']
 visible_values : ['Highly likely']
input: Input(name=`option4`, type=`radio`, task=`Reddit In-group Analysis Comment annotation 3`)
 visible : ['Likely']
 visible_values : ['Likely']
 ------- evaluating input: Input(name=`option0`, type=`radio`, task=`Reddit In-group Analysis Comment annotation 3`) ------- 
----> answers: `['Highly likely', 'Highly likely', 'Likely']` - type: `<class 'list'>`
----> baseline_answer: `Highly likely` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`option1`, type=`radio`, task=`Reddit In-group Analysis Comment annotation 3`) ------- 
----> answers: `['Highly likely', 'Highly likely', 'Highly likely']` - type: `<class 'list'>`
----> baseline_answer: `Highly likely` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`option2`, type=`radio`, task=`Reddit In-group Analysis Comment annotation 3`) ------- 
----> answers: `['Highly likely', 'Highly likely', 'Likely']` - type: `<class 'list'>`
----> baseline_answer: `Highly likely` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`option3`, type=`radio`, task=`Reddit In-group Analysis Comment annotation 3`) ------- 
----> answers: `['Highly likely', 'Highly likely', 'Likely']` - type: `<class 'list'>`
----> baseline_answer: `Highly likely` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`option4`, type=`radio`, task=`Reddit In-group Analysis Comment annotation 3`) ------- 
----> answers: `['Highly likely', 'Highly likely', 'Highly likely']` - type: `<class 'list'>`
----> baseline_answer: `Likely` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 --> Per-instance overall score: 0.8
 --> Per-instance per-field breakdown: {'radio': [1.0, 1.0, 1.0, 1.0, 0.0]}
 = = = = = = = = = = = = starting new task: `Scalar Adjectives Identification` = = = = = = = = = = = = 
First instance id: 15156
instance_id: 15189 <-> row_number: 33
 --> inputs: ['neg_qual_ctrl', 'pos_qual_ctrl_4', 'pos_qual_ctrl_1', 'pos_qual_ctrl_2', 'pos_qual_ctrl_3', 'adj_1', 'adj_2', 'adj_3', 'adj_4', 'pos_qual_ctrl_5', 'adj_5', 'adj_6', 'adj_7', 'adj_8', 'adj_9', 'adj_10']
 --> Looking up gold labels from row index 33 of `input.csv` (unique inputs). 
 --> input labels: {'neg_qual_ctrl': ['No', 'No', 'No'], 'pos_qual_ctrl_4': ['Yes', 'Yes', 'Yes'], 'pos_qual_ctrl_1': ['Yes', 'Yes', 'Yes'], 'pos_qual_ctrl_2': ['Yes', 'Yes', 'Yes'], 'pos_qual_ctrl_3': ['Yes', 'Yes', 'No'], 'adj_1': ['Yes', 'Yes', 'Yes'], 'adj_2': ['No', 'No', 'No'], 'adj_3': ['No', 'No', 'No'], 'adj_4': ['Yes', 'No', 'No'], 'pos_qual_ctrl_5': ['Yes', 'No', 'No'], 'adj_5': ['No', 'No', 'No'], 'adj_6': ['No', 'No', 'No'], 'adj_7': ['No', 'No', 'No'], 'adj_8': ['No', 'No', 'No'], 'adj_9': ['No', 'No', 'No'], 'adj_10': ['No', 'No', 'No']}
 - - - - - -  starting a new element: `Input(name=`neg_qual_ctrl`, type=`radio`, task=`Scalar Adjectives Identification`)` - - - - - -  
input: Input(name=`neg_qual_ctrl`, type=`radio`, task=`Scalar Adjectives Identification`)
about to try executing one action, on the following input: neg_qual_ctrl
Executing one action: self.actions.modify_radio('neg_qual_ctrl', 'No')
We are going to select this radio button: <input type="radio" name="neg_qual_ctrl" value="No">
 - - - - - -  starting a new element: `Input(name=`pos_qual_ctrl_4`, type=`radio`, task=`Scalar Adjectives Identification`)` - - - - - -  
input: Input(name=`pos_qual_ctrl_4`, type=`radio`, task=`Scalar Adjectives Identification`)
about to try executing one action, on the following input: pos_qual_ctrl_4
Executing one action: self.actions.modify_radio('pos_qual_ctrl_4', 'Yes')
We are going to select this radio button: <input type="radio" name="pos_qual_ctrl_4" value="Yes" required="">
 - - - - - -  starting a new element: `Input(name=`pos_qual_ctrl_1`, type=`radio`, task=`Scalar Adjectives Identification`)` - - - - - -  
input: Input(name=`pos_qual_ctrl_1`, type=`radio`, task=`Scalar Adjectives Identification`)
about to try executing one action, on the following input: pos_qual_ctrl_1
Executing one action: self.actions.modify_radio('pos_qual_ctrl_1', 'Yes')
We are going to select this radio button: <input type="radio" name="pos_qual_ctrl_1" value="Yes" required="">
 - - - - - -  starting a new element: `Input(name=`pos_qual_ctrl_2`, type=`radio`, task=`Scalar Adjectives Identification`)` - - - - - -  
input: Input(name=`pos_qual_ctrl_2`, type=`radio`, task=`Scalar Adjectives Identification`)
about to try executing one action, on the following input: pos_qual_ctrl_2
Executing one action: self.actions.modify_radio('pos_qual_ctrl_2', 'Yes')
We are going to select this radio button: <input type="radio" name="pos_qual_ctrl_2" value="Yes" required="">
 - - - - - -  starting a new element: `Input(name=`pos_qual_ctrl_3`, type=`radio`, task=`Scalar Adjectives Identification`)` - - - - - -  
input: Input(name=`pos_qual_ctrl_3`, type=`radio`, task=`Scalar Adjectives Identification`)
about to try executing one action, on the following input: pos_qual_ctrl_3
Executing one action: self.actions.modify_radio('pos_qual_ctrl_3', 'Yes')
We are going to select this radio button: <input type="radio" name="pos_qual_ctrl_3" value="Yes" required="">
 - - - - - -  starting a new element: `Input(name=`adj_1`, type=`radio`, task=`Scalar Adjectives Identification`)` - - - - - -  
input: Input(name=`adj_1`, type=`radio`, task=`Scalar Adjectives Identification`)
about to try executing one action, on the following input: adj_1
Executing one action: self.actions.modify_radio('adj_1', 'Yes')
We are going to select this radio button: <input type="radio" name="adj_1" value="Yes" required="">
 - - - - - -  starting a new element: `Input(name=`adj_2`, type=`radio`, task=`Scalar Adjectives Identification`)` - - - - - -  
input: Input(name=`adj_2`, type=`radio`, task=`Scalar Adjectives Identification`)
about to try executing one action, on the following input: adj_2
Executing one action: self.actions.modify_radio('adj_2', 'No')
We are going to select this radio button: <input type="radio" name="adj_2" value="No">
 - - - - - -  starting a new element: `Input(name=`adj_3`, type=`radio`, task=`Scalar Adjectives Identification`)` - - - - - -  
input: Input(name=`adj_3`, type=`radio`, task=`Scalar Adjectives Identification`)
about to try executing one action, on the following input: adj_3
Executing one action: self.actions.modify_radio('adj_3', 'No')
We are going to select this radio button: <input type="radio" name="adj_3" value="No">
 - - - - - -  starting a new element: `Input(name=`adj_4`, type=`radio`, task=`Scalar Adjectives Identification`)` - - - - - -  
input: Input(name=`adj_4`, type=`radio`, task=`Scalar Adjectives Identification`)
about to try executing one action, on the following input: adj_4
Executing one action: self.actions.modify_radio('adj_4', 'No')
We are going to select this radio button: <input type="radio" name="adj_4" value="No">
 - - - - - -  starting a new element: `Input(name=`pos_qual_ctrl_5`, type=`radio`, task=`Scalar Adjectives Identification`)` - - - - - -  
input: Input(name=`pos_qual_ctrl_5`, type=`radio`, task=`Scalar Adjectives Identification`)
about to try executing one action, on the following input: pos_qual_ctrl_5
Executing one action: self.actions.modify_radio('pos_qual_ctrl_5', 'Yes')
We are going to select this radio button: <input type="radio" name="pos_qual_ctrl_5" value="Yes" required="">
 - - - - - -  starting a new element: `Input(name=`adj_5`, type=`radio`, task=`Scalar Adjectives Identification`)` - - - - - -  
input: Input(name=`adj_5`, type=`radio`, task=`Scalar Adjectives Identification`)
about to try executing one action, on the following input: adj_5
Executing one action: self.actions.modify_radio('adj_5', 'Yes')
We are going to select this radio button: <input type="radio" name="adj_5" value="Yes" required="">
 - - - - - -  starting a new element: `Input(name=`adj_6`, type=`radio`, task=`Scalar Adjectives Identification`)` - - - - - -  
input: Input(name=`adj_6`, type=`radio`, task=`Scalar Adjectives Identification`)
about to try executing one action, on the following input: adj_6
Executing one action: self.actions.modify_radio('adj_6', 'No')
We are going to select this radio button: <input type="radio" name="adj_6" value="No">
 - - - - - -  starting a new element: `Input(name=`adj_7`, type=`radio`, task=`Scalar Adjectives Identification`)` - - - - - -  
input: Input(name=`adj_7`, type=`radio`, task=`Scalar Adjectives Identification`)
about to try executing one action, on the following input: adj_7
Executing one action: self.actions.modify_radio('adj_7', 'No')
We are going to select this radio button: <input type="radio" name="adj_7" value="No">
 - - - - - -  starting a new element: `Input(name=`adj_8`, type=`radio`, task=`Scalar Adjectives Identification`)` - - - - - -  
input: Input(name=`adj_8`, type=`radio`, task=`Scalar Adjectives Identification`)
about to try executing one action, on the following input: adj_8
Executing one action: self.actions.modify_radio('adj_8', 'No')
We are going to select this radio button: <input type="radio" name="adj_8" value="No">
 - - - - - -  starting a new element: `Input(name=`adj_9`, type=`radio`, task=`Scalar Adjectives Identification`)` - - - - - -  
input: Input(name=`adj_9`, type=`radio`, task=`Scalar Adjectives Identification`)
about to try executing one action, on the following input: adj_9
Executing one action: self.actions.modify_radio('adj_9', 'No')
We are going to select this radio button: <input type="radio" name="adj_9" value="No">
 - - - - - -  starting a new element: `Input(name=`adj_10`, type=`radio`, task=`Scalar Adjectives Identification`)` - - - - - -  
input: Input(name=`adj_10`, type=`radio`, task=`Scalar Adjectives Identification`)
about to try executing one action, on the following input: adj_10
Executing one action: self.actions.modify_radio('adj_10', 'No')
We are going to select this radio button: <input type="radio" name="adj_10" value="No">
input: Input(name=`neg_qual_ctrl`, type=`radio`, task=`Scalar Adjectives Identification`)
 visible : ['No']
 visible_values : ['No']
input: Input(name=`pos_qual_ctrl_4`, type=`radio`, task=`Scalar Adjectives Identification`)
 visible : ['Yes']
 visible_values : ['Yes']
input: Input(name=`pos_qual_ctrl_1`, type=`radio`, task=`Scalar Adjectives Identification`)
 visible : ['Yes']
 visible_values : ['Yes']
input: Input(name=`pos_qual_ctrl_2`, type=`radio`, task=`Scalar Adjectives Identification`)
 visible : ['Yes']
 visible_values : ['Yes']
input: Input(name=`pos_qual_ctrl_3`, type=`radio`, task=`Scalar Adjectives Identification`)
 visible : ['Yes']
 visible_values : ['Yes']
input: Input(name=`adj_1`, type=`radio`, task=`Scalar Adjectives Identification`)
 visible : ['Yes']
 visible_values : ['Yes']
input: Input(name=`adj_2`, type=`radio`, task=`Scalar Adjectives Identification`)
 visible : ['No']
 visible_values : ['No']
input: Input(name=`adj_3`, type=`radio`, task=`Scalar Adjectives Identification`)
 visible : ['No']
 visible_values : ['No']
input: Input(name=`adj_4`, type=`radio`, task=`Scalar Adjectives Identification`)
 visible : ['No']
 visible_values : ['No']
input: Input(name=`pos_qual_ctrl_5`, type=`radio`, task=`Scalar Adjectives Identification`)
 visible : ['Yes']
 visible_values : ['Yes']
input: Input(name=`adj_5`, type=`radio`, task=`Scalar Adjectives Identification`)
 visible : ['Yes']
 visible_values : ['Yes']
input: Input(name=`adj_6`, type=`radio`, task=`Scalar Adjectives Identification`)
 visible : ['No']
 visible_values : ['No']
input: Input(name=`adj_7`, type=`radio`, task=`Scalar Adjectives Identification`)
 visible : ['No']
 visible_values : ['No']
input: Input(name=`adj_8`, type=`radio`, task=`Scalar Adjectives Identification`)
 visible : ['No']
 visible_values : ['No']
input: Input(name=`adj_9`, type=`radio`, task=`Scalar Adjectives Identification`)
 visible : ['No']
 visible_values : ['No']
input: Input(name=`adj_10`, type=`radio`, task=`Scalar Adjectives Identification`)
 visible : ['No']
 visible_values : ['No']
 ------- evaluating input: Input(name=`neg_qual_ctrl`, type=`radio`, task=`Scalar Adjectives Identification`) ------- 
----> answers: `['No', 'No', 'No']` - type: `<class 'list'>`
----> baseline_answer: `No` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`pos_qual_ctrl_4`, type=`radio`, task=`Scalar Adjectives Identification`) ------- 
----> answers: `['Yes', 'Yes', 'Yes']` - type: `<class 'list'>`
----> baseline_answer: `Yes` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`pos_qual_ctrl_1`, type=`radio`, task=`Scalar Adjectives Identification`) ------- 
----> answers: `['Yes', 'Yes', 'Yes']` - type: `<class 'list'>`
----> baseline_answer: `Yes` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`pos_qual_ctrl_2`, type=`radio`, task=`Scalar Adjectives Identification`) ------- 
----> answers: `['Yes', 'Yes', 'Yes']` - type: `<class 'list'>`
----> baseline_answer: `Yes` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`pos_qual_ctrl_3`, type=`radio`, task=`Scalar Adjectives Identification`) ------- 
----> answers: `['Yes', 'Yes', 'No']` - type: `<class 'list'>`
----> baseline_answer: `Yes` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`adj_1`, type=`radio`, task=`Scalar Adjectives Identification`) ------- 
----> answers: `['Yes', 'Yes', 'Yes']` - type: `<class 'list'>`
----> baseline_answer: `Yes` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`adj_2`, type=`radio`, task=`Scalar Adjectives Identification`) ------- 
----> answers: `['No', 'No', 'No']` - type: `<class 'list'>`
----> baseline_answer: `No` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`adj_3`, type=`radio`, task=`Scalar Adjectives Identification`) ------- 
----> answers: `['No', 'No', 'No']` - type: `<class 'list'>`
----> baseline_answer: `No` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`adj_4`, type=`radio`, task=`Scalar Adjectives Identification`) ------- 
----> answers: `['Yes', 'No', 'No']` - type: `<class 'list'>`
----> baseline_answer: `No` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`pos_qual_ctrl_5`, type=`radio`, task=`Scalar Adjectives Identification`) ------- 
----> answers: `['Yes', 'No', 'No']` - type: `<class 'list'>`
----> baseline_answer: `Yes` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`adj_5`, type=`radio`, task=`Scalar Adjectives Identification`) ------- 
----> answers: `['No', 'No', 'No']` - type: `<class 'list'>`
----> baseline_answer: `Yes` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`adj_6`, type=`radio`, task=`Scalar Adjectives Identification`) ------- 
----> answers: `['No', 'No', 'No']` - type: `<class 'list'>`
----> baseline_answer: `No` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`adj_7`, type=`radio`, task=`Scalar Adjectives Identification`) ------- 
----> answers: `['No', 'No', 'No']` - type: `<class 'list'>`
----> baseline_answer: `No` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`adj_8`, type=`radio`, task=`Scalar Adjectives Identification`) ------- 
----> answers: `['No', 'No', 'No']` - type: `<class 'list'>`
----> baseline_answer: `No` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`adj_9`, type=`radio`, task=`Scalar Adjectives Identification`) ------- 
----> answers: `['No', 'No', 'No']` - type: `<class 'list'>`
----> baseline_answer: `No` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`adj_10`, type=`radio`, task=`Scalar Adjectives Identification`) ------- 
----> answers: `['No', 'No', 'No']` - type: `<class 'list'>`
----> baseline_answer: `No` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 --> Per-instance overall score: 0.875
 --> Per-instance per-field breakdown: {'radio': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0]}
 = = = = = = = = = = = = starting new task: `Script KD eval LONG V2 - disc result eval 1` = = = = = = = = = = = = 
First instance id: 32643
instance_id: 32690 <-> row_number: 47
 --> inputs: ['achievable', 'on-topic', 'ordering', 'complete']
 --> Looking up gold labels from row index 47 of `input.csv` (unique inputs). 
 --> input labels: {'achievable': [2, 0], 'on-topic': [1, 2], 'ordering': [0, 2], 'complete': [-1, -1]}
 - - - - - -  starting a new element: `Input(name=`achievable`, type=`radio`, task=`Script KD eval LONG V2 - disc result eval 1`)` - - - - - -  
input: Input(name=`achievable`, type=`radio`, task=`Script KD eval LONG V2 - disc result eval 1`)
about to try executing one action, on the following input: achievable
Executing one action: self.actions.modify_radio('achievable', '1')
We are going to select this radio button: <input class="form-check-input" type="radio" name="achievable" id="achievable-1" value="1">
 - - - - - -  starting a new element: `Input(name=`on-topic`, type=`radio`, task=`Script KD eval LONG V2 - disc result eval 1`)` - - - - - -  
input: Input(name=`on-topic`, type=`radio`, task=`Script KD eval LONG V2 - disc result eval 1`)
about to try executing one action, on the following input: on-topic
Executing one action: self.actions.modify_radio('on-topic', '2')
We are going to select this radio button: <input class="form-check-input" type="radio" name="on-topic" id="on-topic-0" value="2" required="">
 - - - - - -  starting a new element: `Input(name=`ordering`, type=`radio`, task=`Script KD eval LONG V2 - disc result eval 1`)` - - - - - -  
input: Input(name=`ordering`, type=`radio`, task=`Script KD eval LONG V2 - disc result eval 1`)
about to try executing one action, on the following input: ordering
Executing one action: self.actions.modify_radio('ordering', '0')
We are going to select this radio button: <input class="form-check-input" type="radio" name="ordering" id="ordering-2" value="0">
 - - - - - -  starting a new element: `Input(name=`complete`, type=`radio`, task=`Script KD eval LONG V2 - disc result eval 1`)` - - - - - -  
input: Input(name=`complete`, type=`radio`, task=`Script KD eval LONG V2 - disc result eval 1`)
about to try executing one action, on the following input: complete
Executing one action: self.actions.modify_radio('complete', '2')
We are going to select this radio button: <input class="form-check-input" type="radio" name="complete" id="complete-0" value="2" required="">
input: Input(name=`achievable`, type=`radio`, task=`Script KD eval LONG V2 - disc result eval 1`)
 visible : ['1']
 visible_values : ['1']
input: Input(name=`on-topic`, type=`radio`, task=`Script KD eval LONG V2 - disc result eval 1`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`ordering`, type=`radio`, task=`Script KD eval LONG V2 - disc result eval 1`)
 visible : ['0']
 visible_values : ['0']
input: Input(name=`complete`, type=`radio`, task=`Script KD eval LONG V2 - disc result eval 1`)
 visible : ['2']
 visible_values : ['2']
 ------- evaluating input: Input(name=`achievable`, type=`radio`, task=`Script KD eval LONG V2 - disc result eval 1`) ------- 
----> answers: `[2, 0]` - type: `<class 'list'>`
----> baseline_answer: `1` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`on-topic`, type=`radio`, task=`Script KD eval LONG V2 - disc result eval 1`) ------- 
----> answers: `[1, 2]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`ordering`, type=`radio`, task=`Script KD eval LONG V2 - disc result eval 1`) ------- 
----> answers: `[0, 2]` - type: `<class 'list'>`
----> baseline_answer: `0` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`complete`, type=`radio`, task=`Script KD eval LONG V2 - disc result eval 1`) ------- 
----> answers: `[-1, -1]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 --> Per-instance overall score: 0.25
 --> Per-instance per-field breakdown: {'radio': [0.0, 0.0, 1.0, 0.0]}
 = = = = = = = = = = = = starting new task: `Sherlock IMG 2 TXT Eval 15` = = = = = = = = = = = = 
First instance id: 23369
instance_id: 23686 <-> row_number: 317
 --> inputs: ['elicited_label_answer1', 'elicited_label_answer2', 'elicited_label_answer3', 'elicited_label_answer4', 'elicited_label_answer5', 'elicited_label_answer6', 'elicited_label_answer7', 'elicited_label_answer8', 'elicited_label_answer9', 'elicited_label_answer10']
 --> Looking up gold labels from row index 317 of `input.csv` (unique inputs). 
 --> input labels: {'elicited_label_answer1': [3, 3], 'elicited_label_answer2': [3, 2], 'elicited_label_answer3': [1, 2], 'elicited_label_answer4': [3, 3], 'elicited_label_answer5': [3, 3], 'elicited_label_answer6': [2, 2], 'elicited_label_answer7': [2, 2], 'elicited_label_answer8': [1, 2], 'elicited_label_answer9': [2, 1], 'elicited_label_answer10': [2, 1]}
 - - - - - -  starting a new element: `Input(name=`elicited_label_answer1`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`)` - - - - - -  
input: Input(name=`elicited_label_answer1`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`)
about to try executing one action, on the following input: elicited_label_answer1
Executing one action: self.actions.modify_radio('elicited_label_answer1', '3')
We are going to select this radio button: <input class="form-check-input" type="radio" name="elicited_label_answer1" id="answer1_1" value="3" required="">
 - - - - - -  starting a new element: `Input(name=`elicited_label_answer2`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`)` - - - - - -  
input: Input(name=`elicited_label_answer2`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`)
about to try executing one action, on the following input: elicited_label_answer2
Executing one action: self.actions.modify_radio('elicited_label_answer2', '3')
We are going to select this radio button: <input class="form-check-input" type="radio" name="elicited_label_answer2" id="answer1_2" value="3" required="">
 - - - - - -  starting a new element: `Input(name=`elicited_label_answer3`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`)` - - - - - -  
input: Input(name=`elicited_label_answer3`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`)
about to try executing one action, on the following input: elicited_label_answer3
Executing one action: self.actions.modify_radio('elicited_label_answer3', 'nan')
 ** Warning **: input value is nan. So, we're not going to modify the radio button.
 - - - - - -  starting a new element: `Input(name=`elicited_label_answer4`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`)` - - - - - -  
input: Input(name=`elicited_label_answer4`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`)
about to try executing one action, on the following input: elicited_label_answer4
Executing one action: self.actions.modify_radio('elicited_label_answer4', '2')
We are going to select this radio button: <input class="form-check-input" type="radio" name="elicited_label_answer4" id="answer2_4" value="2" required="">
 - - - - - -  starting a new element: `Input(name=`elicited_label_answer5`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`)` - - - - - -  
input: Input(name=`elicited_label_answer5`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`)
about to try executing one action, on the following input: elicited_label_answer5
Executing one action: self.actions.modify_radio('elicited_label_answer5', '1')
We are going to select this radio button: <input class="form-check-input" type="radio" name="elicited_label_answer5" id="answer3_5" value="1" required="">
 - - - - - -  starting a new element: `Input(name=`elicited_label_answer6`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`)` - - - - - -  
input: Input(name=`elicited_label_answer6`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`)
about to try executing one action, on the following input: elicited_label_answer6
Executing one action: self.actions.modify_radio('elicited_label_answer6', '1')
We are going to select this radio button: <input class="form-check-input" type="radio" name="elicited_label_answer6" id="answer3_6" value="1" required="">
 - - - - - -  starting a new element: `Input(name=`elicited_label_answer7`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`)` - - - - - -  
input: Input(name=`elicited_label_answer7`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`)
about to try executing one action, on the following input: elicited_label_answer7
Executing one action: self.actions.modify_radio('elicited_label_answer7', '2')
We are going to select this radio button: <input class="form-check-input" type="radio" name="elicited_label_answer7" id="answer2_7" value="2" required="">
 - - - - - -  starting a new element: `Input(name=`elicited_label_answer8`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`)` - - - - - -  
input: Input(name=`elicited_label_answer8`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`)
about to try executing one action, on the following input: elicited_label_answer8
Executing one action: self.actions.modify_radio('elicited_label_answer8', '2')
We are going to select this radio button: <input class="form-check-input" type="radio" name="elicited_label_answer8" id="answer2_8" value="2" required="">
 - - - - - -  starting a new element: `Input(name=`elicited_label_answer9`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`)` - - - - - -  
input: Input(name=`elicited_label_answer9`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`)
about to try executing one action, on the following input: elicited_label_answer9
Executing one action: self.actions.modify_radio('elicited_label_answer9', '2')
We are going to select this radio button: <input class="form-check-input" type="radio" name="elicited_label_answer9" id="answer2_9" value="2" required="">
 - - - - - -  starting a new element: `Input(name=`elicited_label_answer10`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`)` - - - - - -  
input: Input(name=`elicited_label_answer10`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`)
about to try executing one action, on the following input: elicited_label_answer10
Executing one action: self.actions.modify_radio('elicited_label_answer10', '2')
We are going to select this radio button: <input class="form-check-input" type="radio" name="elicited_label_answer10" id="answer2_10" value="2" required="">
input: Input(name=`elicited_label_answer1`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`)
 visible : ['3']
 visible_values : ['3']
input: Input(name=`elicited_label_answer2`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`)
 visible : ['3']
 visible_values : ['3']
input: Input(name=`elicited_label_answer3`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`)
 visible : []
 visible_values : []
input: Input(name=`elicited_label_answer4`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`elicited_label_answer5`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`)
 visible : ['1']
 visible_values : ['1']
input: Input(name=`elicited_label_answer6`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`)
 visible : ['1']
 visible_values : ['1']
input: Input(name=`elicited_label_answer7`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`elicited_label_answer8`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`elicited_label_answer9`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`elicited_label_answer10`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`)
 visible : ['2']
 visible_values : ['2']
 ------- evaluating input: Input(name=`elicited_label_answer1`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`) ------- 
----> answers: `[3, 3]` - type: `<class 'list'>`
----> baseline_answer: `3` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`elicited_label_answer2`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`) ------- 
----> answers: `[3, 2]` - type: `<class 'list'>`
----> baseline_answer: `3` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`elicited_label_answer3`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`) ------- 
----> answers: `[1, 2]` - type: `<class 'list'>`
----> baseline_answer: `` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`elicited_label_answer4`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`) ------- 
----> answers: `[3, 3]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`elicited_label_answer5`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`) ------- 
----> answers: `[3, 3]` - type: `<class 'list'>`
----> baseline_answer: `1` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`elicited_label_answer6`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`) ------- 
----> answers: `[2, 2]` - type: `<class 'list'>`
----> baseline_answer: `1` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`elicited_label_answer7`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`) ------- 
----> answers: `[2, 2]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`elicited_label_answer8`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`) ------- 
----> answers: `[1, 2]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`elicited_label_answer9`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`) ------- 
----> answers: `[2, 1]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`elicited_label_answer10`, type=`radio`, task=`Sherlock IMG 2 TXT Eval 15`) ------- 
----> answers: `[2, 1]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 --> Per-instance overall score: 0.5
 --> Per-instance per-field breakdown: {'radio': [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0]}
 = = = = = = = = = = = = starting new task: `wikiHow step-goal linking pilot cleanse-url` = = = = = = = = = = = = 
First instance id: 24370
instance_id: 24425 <-> row_number: 55
Could not find input field with name `candidate_0.0`
Could not find input field with name `candidate_0.1`
Could not find input field with name `candidate_0.2`
Could not find input field with name `candidate_0.3`
Could not find input field with name `candidate_0.4`
Could not find input field with name `candidate_1.0`
Could not find input field with name `candidate_1.1`
Could not find input field with name `candidate_1.2`
Could not find input field with name `candidate_1.3`
Could not find input field with name `candidate_1.4`
Could not find input field with name `candidate_10.0`
Could not find input field with name `candidate_10.1`
Could not find input field with name `candidate_10.2`
Could not find input field with name `candidate_10.3`
Could not find input field with name `candidate_10.4`
Could not find input field with name `candidate_2.0`
Could not find input field with name `candidate_2.1`
Could not find input field with name `candidate_2.2`
Could not find input field with name `candidate_2.3`
Could not find input field with name `candidate_2.4`
Could not find input field with name `candidate_3.0`
Could not find input field with name `candidate_3.1`
Could not find input field with name `candidate_3.2`
Could not find input field with name `candidate_3.3`
Could not find input field with name `candidate_3.4`
Could not find input field with name `candidate_4.0`
Could not find input field with name `candidate_4.1`
Could not find input field with name `candidate_4.2`
Could not find input field with name `candidate_4.3`
Could not find input field with name `candidate_4.4`
Could not find input field with name `candidate_5.0`
Could not find input field with name `candidate_5.1`
Could not find input field with name `candidate_5.2`
Could not find input field with name `candidate_5.3`
Could not find input field with name `candidate_5.4`
Could not find input field with name `candidate_6.0`
Could not find input field with name `candidate_6.1`
Could not find input field with name `candidate_6.2`
Could not find input field with name `candidate_6.3`
Could not find input field with name `candidate_6.4`
Could not find input field with name `candidate_7.0`
Could not find input field with name `candidate_7.1`
Could not find input field with name `candidate_7.2`
Could not find input field with name `candidate_7.3`
Could not find input field with name `candidate_7.4`
Could not find input field with name `candidate_8.0`
Could not find input field with name `candidate_8.1`
Could not find input field with name `candidate_8.2`
Could not find input field with name `candidate_8.3`
Could not find input field with name `candidate_8.4`
Could not find input field with name `candidate_9.0`
Could not find input field with name `candidate_9.1`
Could not find input field with name `candidate_9.2`
Could not find input field with name `candidate_9.3`
Could not find input field with name `candidate_9.4`
 --> inputs: ['candidate_0', 'candidate_1', 'candidate_2', 'candidate_3', 'candidate_4', 'candidate_5', 'candidate_6', 'candidate_7', 'candidate_8', 'candidate_9', 'candidate_10']
 --> Looking up gold labels from row index 55 of `input.csv` (unique inputs). 
 --> input labels: {'candidate_0': [1, 3, 1], 'candidate_1': [2, 1, 1], 'candidate_2': [0, 1, 2], 'candidate_3': [2, 2, 2], 'candidate_4': [1, 1, 1], 'candidate_5': [0, 2, 1], 'candidate_6': [2, 2, 2], 'candidate_7': [3, 1, 1], 'candidate_8': [2, 3, 1], 'candidate_9': [3, 2, 2], 'candidate_10': [1, 1, 1]}
 - - - - - -  starting a new element: `Input(name=`candidate_0`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`)` - - - - - -  
input: Input(name=`candidate_0`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`)
about to try executing one action, on the following input: candidate_0
Executing one action: self.actions.modify_radio('candidate_0', '0')
We are going to select this radio button: <input type="radio" name="candidate_0" value="0" required="">
 - - - - - -  starting a new element: `Input(name=`candidate_1`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`)` - - - - - -  
input: Input(name=`candidate_1`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`)
about to try executing one action, on the following input: candidate_1
Executing one action: self.actions.modify_radio('candidate_1', '3')
We are going to select this radio button: <input type="radio" name="candidate_1" value="3" required="">
 - - - - - -  starting a new element: `Input(name=`candidate_2`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`)` - - - - - -  
input: Input(name=`candidate_2`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`)
about to try executing one action, on the following input: candidate_2
Executing one action: self.actions.modify_radio('candidate_2', '0')
We are going to select this radio button: <input type="radio" name="candidate_2" value="0" required="">
 - - - - - -  starting a new element: `Input(name=`candidate_3`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`)` - - - - - -  
input: Input(name=`candidate_3`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`)
about to try executing one action, on the following input: candidate_3
Executing one action: self.actions.modify_radio('candidate_3', '3')
We are going to select this radio button: <input type="radio" name="candidate_3" value="3" required="">
 - - - - - -  starting a new element: `Input(name=`candidate_4`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`)` - - - - - -  
input: Input(name=`candidate_4`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`)
about to try executing one action, on the following input: candidate_4
Executing one action: self.actions.modify_radio('candidate_4', '3')
We are going to select this radio button: <input type="radio" name="candidate_4" value="3" required="">
 - - - - - -  starting a new element: `Input(name=`candidate_5`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`)` - - - - - -  
input: Input(name=`candidate_5`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`)
about to try executing one action, on the following input: candidate_5
Executing one action: self.actions.modify_radio('candidate_5', '0')
We are going to select this radio button: <input type="radio" name="candidate_5" value="0" required="">
 - - - - - -  starting a new element: `Input(name=`candidate_6`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`)` - - - - - -  
input: Input(name=`candidate_6`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`)
about to try executing one action, on the following input: candidate_6
Executing one action: self.actions.modify_radio('candidate_6', '3')
We are going to select this radio button: <input type="radio" name="candidate_6" value="3" required="">
 - - - - - -  starting a new element: `Input(name=`candidate_7`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`)` - - - - - -  
input: Input(name=`candidate_7`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`)
about to try executing one action, on the following input: candidate_7
Executing one action: self.actions.modify_radio('candidate_7', '3')
We are going to select this radio button: <input type="radio" name="candidate_7" value="3" required="">
 - - - - - -  starting a new element: `Input(name=`candidate_8`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`)` - - - - - -  
input: Input(name=`candidate_8`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`)
about to try executing one action, on the following input: candidate_8
Executing one action: self.actions.modify_radio('candidate_8', '2')
We are going to select this radio button: <input type="radio" name="candidate_8" value="2" required="">
 - - - - - -  starting a new element: `Input(name=`candidate_9`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`)` - - - - - -  
input: Input(name=`candidate_9`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`)
about to try executing one action, on the following input: candidate_9
Executing one action: self.actions.modify_radio('candidate_9', '3')
We are going to select this radio button: <input type="radio" name="candidate_9" value="3" required="">
 - - - - - -  starting a new element: `Input(name=`candidate_10`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`)` - - - - - -  
input: Input(name=`candidate_10`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`)
about to try executing one action, on the following input: candidate_10
Executing one action: self.actions.modify_radio('candidate_10', '0')
We are going to select this radio button: <input type="radio" name="candidate_10" value="0" required="">
input: Input(name=`candidate_0`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`)
 visible : ['0']
 visible_values : ['0']
input: Input(name=`candidate_1`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`)
 visible : ['3']
 visible_values : ['3']
input: Input(name=`candidate_2`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`)
 visible : ['0']
 visible_values : ['0']
input: Input(name=`candidate_3`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`)
 visible : ['3']
 visible_values : ['3']
input: Input(name=`candidate_4`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`)
 visible : ['3']
 visible_values : ['3']
input: Input(name=`candidate_5`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`)
 visible : ['0']
 visible_values : ['0']
input: Input(name=`candidate_6`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`)
 visible : ['3']
 visible_values : ['3']
input: Input(name=`candidate_7`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`)
 visible : ['3']
 visible_values : ['3']
input: Input(name=`candidate_8`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`candidate_9`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`)
 visible : ['3']
 visible_values : ['3']
input: Input(name=`candidate_10`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`)
 visible : ['0']
 visible_values : ['0']
 ------- evaluating input: Input(name=`candidate_0`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`) ------- 
Skipping element `candidate_0` since it is not visible.
 ------- evaluating input: Input(name=`candidate_1`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`) ------- 
Skipping element `candidate_1` since it is not visible.
 ------- evaluating input: Input(name=`candidate_2`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`) ------- 
Skipping element `candidate_2` since it is not visible.
 ------- evaluating input: Input(name=`candidate_3`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`) ------- 
Skipping element `candidate_3` since it is not visible.
 ------- evaluating input: Input(name=`candidate_4`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`) ------- 
Skipping element `candidate_4` since it is not visible.
 ------- evaluating input: Input(name=`candidate_5`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`) ------- 
Skipping element `candidate_5` since it is not visible.
 ------- evaluating input: Input(name=`candidate_6`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`) ------- 
Skipping element `candidate_6` since it is not visible.
 ------- evaluating input: Input(name=`candidate_7`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`) ------- 
Skipping element `candidate_7` since it is not visible.
 ------- evaluating input: Input(name=`candidate_8`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`) ------- 
----> answers: `[2, 3, 1]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`candidate_9`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`) ------- 
----> answers: `[3, 2, 2]` - type: `<class 'list'>`
----> baseline_answer: `3` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`candidate_10`, type=`radio`, task=`wikiHow step-goal linking pilot cleanse-url`) ------- 
----> answers: `[1, 1, 1]` - type: `<class 'list'>`
----> baseline_answer: `0` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 --> Per-instance overall score: 0.3333333333333333
 --> Per-instance per-field breakdown: {'radio': [1.0, 0.0, 0.0]}
 = = = = = = = = = = = = starting new task: `Arch - Rel Eval 3` = = = = = = = = = = = = 
First instance id: 2979
instance_id: 3023 <-> row_number: 44
Could not find input field with name `bestq-1.1`
Could not find input field with name `bestq-1.2`
Could not find input field with name `bestq-2.1`
Could not find input field with name `bestq-2.2`
Could not find input field with name `bestq-3.1`
Could not find input field with name `bestq-3.2`
Could not find input field with name `bestq-4.1`
Could not find input field with name `bestq-4.2`
Could not find input field with name `bestq-5.1`
Could not find input field with name `bestq-5.2`
Could not find input field with name `coherent-1.1`
Could not find input field with name `coherent-1.2`
Could not find input field with name `coherent-2.1`
Could not find input field with name `coherent-2.2`
Could not find input field with name `coherent-3.1`
Could not find input field with name `coherent-3.2`
Could not find input field with name `coherent-4.1`
Could not find input field with name `coherent-4.2`
Could not find input field with name `coherent-5.1`
Could not find input field with name `coherent-5.2`
Could not find input field with name `complete-1.1`
Could not find input field with name `complete-1.2`
Could not find input field with name `complete-2.1`
Could not find input field with name `complete-2.2`
Could not find input field with name `complete-3.1`
Could not find input field with name `complete-3.2`
Could not find input field with name `complete-4.1`
Could not find input field with name `complete-4.2`
Could not find input field with name `complete-5.1`
Could not find input field with name `complete-5.2`
Could not find input field with name `diverse-1.1`
Could not find input field with name `diverse-1.2`
Could not find input field with name `diverse-2.1`
Could not find input field with name `diverse-2.2`
Could not find input field with name `diverse-3.1`
Could not find input field with name `diverse-3.2`
Could not find input field with name `diverse-4.1`
Could not find input field with name `diverse-4.2`
Could not find input field with name `diverse-5.1`
Could not find input field with name `diverse-5.2`
Could not find input field with name `intra-1.1`
Could not find input field with name `intra-1.2`
Could not find input field with name `intra-2.1`
Could not find input field with name `intra-2.2`
Could not find input field with name `intra-3.1`
Could not find input field with name `intra-3.2`
Could not find input field with name `intra-4.1`
Could not find input field with name `intra-4.2`
Could not find input field with name `intra-5.1`
Could not find input field with name `intra-5.2`
 --> inputs: ['coherent-1', 'complete-1', 'intra-1', 'diverse-1', 'bestq-1', 'coherent-2', 'complete-2', 'intra-2', 'diverse-2', 'bestq-2', 'coherent-3', 'complete-3', 'intra-3', 'diverse-3', 'bestq-3', 'coherent-4', 'complete-4', 'intra-4', 'diverse-4', 'bestq-4', 'coherent-5', 'complete-5', 'intra-5', 'diverse-5', 'bestq-5']
 --> Looking up gold labels from row index 44 of `input.csv` (unique inputs). 
 --> input labels: {'coherent-1': [2.0, 2.0, 2.0], 'complete-1': [2.0, 2.0, 2.0], 'intra-1': [2.0, 1.0, 2.0], 'diverse-1': [1.0, 1.0, 2.0], 'bestq-1': [2.0, 2.0, 2.0], 'coherent-2': [2.0, 2.0, 2.0], 'complete-2': [2.0, 2.0, 2.0], 'intra-2': [2.0, 2.0, 2.0], 'diverse-2': [2.0, 2.0, 2.0], 'bestq-2': [2.0, 2.0, 2.0], 'coherent-3': [1, 2, 1], 'complete-3': [1, 2, 1], 'intra-3': [2, 1, 1], 'diverse-3': [1.0, 1.0, 1.0], 'bestq-3': [2, 2, 1], 'coherent-4': [2, 2, 2], 'complete-4': [2.0, 1.0, 2.0], 'intra-4': [1.0, 2.0, 1.0], 'diverse-4': [1, 1, 2], 'bestq-4': [2, 2, 2], 'coherent-5': [2, 2, 2], 'complete-5': [2, 2, 2], 'intra-5': [2.0, 2.0, 2.0], 'diverse-5': [2, 2, 2], 'bestq-5': [2, 2, 2]}
 - - - - - -  starting a new element: `Input(name=`coherent-1`, type=`radio`, task=`Arch - Rel Eval 3`)` - - - - - -  
input: Input(name=`coherent-1`, type=`radio`, task=`Arch - Rel Eval 3`)
about to try executing one action, on the following input: coherent-1
Executing one action: self.actions.modify_radio('coherent-1', '2')
We are going to select this radio button: <input name="coherent-1" type="radio" value="2">
 - - - - - -  starting a new element: `Input(name=`complete-1`, type=`radio`, task=`Arch - Rel Eval 3`)` - - - - - -  
input: Input(name=`complete-1`, type=`radio`, task=`Arch - Rel Eval 3`)
about to try executing one action, on the following input: complete-1
Executing one action: self.actions.modify_radio('complete-1', '2')
We are going to select this radio button: <input name="complete-1" type="radio" value="2">
 - - - - - -  starting a new element: `Input(name=`intra-1`, type=`radio`, task=`Arch - Rel Eval 3`)` - - - - - -  
input: Input(name=`intra-1`, type=`radio`, task=`Arch - Rel Eval 3`)
about to try executing one action, on the following input: intra-1
Executing one action: self.actions.modify_radio('intra-1', '2')
We are going to select this radio button: <input name="intra-1" type="radio" value="2">
 - - - - - -  starting a new element: `Input(name=`diverse-1`, type=`radio`, task=`Arch - Rel Eval 3`)` - - - - - -  
input: Input(name=`diverse-1`, type=`radio`, task=`Arch - Rel Eval 3`)
about to try executing one action, on the following input: diverse-1
Executing one action: self.actions.modify_radio('diverse-1', '2')
We are going to select this radio button: <input name="diverse-1" type="radio" value="2">
 - - - - - -  starting a new element: `Input(name=`bestq-1`, type=`radio`, task=`Arch - Rel Eval 3`)` - - - - - -  
input: Input(name=`bestq-1`, type=`radio`, task=`Arch - Rel Eval 3`)
about to try executing one action, on the following input: bestq-1
Executing one action: self.actions.modify_radio('bestq-1', '2')
We are going to select this radio button: <input name="bestq-1" type="radio" value="2">
 - - - - - -  starting a new element: `Input(name=`coherent-2`, type=`radio`, task=`Arch - Rel Eval 3`)` - - - - - -  
input: Input(name=`coherent-2`, type=`radio`, task=`Arch - Rel Eval 3`)
about to try executing one action, on the following input: coherent-2
Executing one action: self.actions.modify_radio('coherent-2', '2')
We are going to select this radio button: <input name="coherent-2" type="radio" value="2">
 - - - - - -  starting a new element: `Input(name=`complete-2`, type=`radio`, task=`Arch - Rel Eval 3`)` - - - - - -  
input: Input(name=`complete-2`, type=`radio`, task=`Arch - Rel Eval 3`)
about to try executing one action, on the following input: complete-2
Executing one action: self.actions.modify_radio('complete-2', '2')
We are going to select this radio button: <input name="complete-2" type="radio" value="2">
 - - - - - -  starting a new element: `Input(name=`intra-2`, type=`radio`, task=`Arch - Rel Eval 3`)` - - - - - -  
input: Input(name=`intra-2`, type=`radio`, task=`Arch - Rel Eval 3`)
about to try executing one action, on the following input: intra-2
Executing one action: self.actions.modify_radio('intra-2', '2')
We are going to select this radio button: <input name="intra-2" type="radio" value="2">
 - - - - - -  starting a new element: `Input(name=`diverse-2`, type=`radio`, task=`Arch - Rel Eval 3`)` - - - - - -  
input: Input(name=`diverse-2`, type=`radio`, task=`Arch - Rel Eval 3`)
about to try executing one action, on the following input: diverse-2
Executing one action: self.actions.modify_radio('diverse-2', '2')
We are going to select this radio button: <input name="diverse-2" type="radio" value="2">
 - - - - - -  starting a new element: `Input(name=`bestq-2`, type=`radio`, task=`Arch - Rel Eval 3`)` - - - - - -  
input: Input(name=`bestq-2`, type=`radio`, task=`Arch - Rel Eval 3`)
about to try executing one action, on the following input: bestq-2
Executing one action: self.actions.modify_radio('bestq-2', '2')
We are going to select this radio button: <input name="bestq-2" type="radio" value="2">
 - - - - - -  starting a new element: `Input(name=`coherent-3`, type=`radio`, task=`Arch - Rel Eval 3`)` - - - - - -  
input: Input(name=`coherent-3`, type=`radio`, task=`Arch - Rel Eval 3`)
about to try executing one action, on the following input: coherent-3
Executing one action: self.actions.modify_radio('coherent-3', '2')
We are going to select this radio button: <input name="coherent-3" type="radio" value="2">
 - - - - - -  starting a new element: `Input(name=`complete-3`, type=`radio`, task=`Arch - Rel Eval 3`)` - - - - - -  
input: Input(name=`complete-3`, type=`radio`, task=`Arch - Rel Eval 3`)
about to try executing one action, on the following input: complete-3
Executing one action: self.actions.modify_radio('complete-3', '2')
We are going to select this radio button: <input name="complete-3" type="radio" value="2">
 - - - - - -  starting a new element: `Input(name=`intra-3`, type=`radio`, task=`Arch - Rel Eval 3`)` - - - - - -  
input: Input(name=`intra-3`, type=`radio`, task=`Arch - Rel Eval 3`)
about to try executing one action, on the following input: intra-3
Executing one action: self.actions.modify_radio('intra-3', '2')
We are going to select this radio button: <input name="intra-3" type="radio" value="2">
 - - - - - -  starting a new element: `Input(name=`diverse-3`, type=`radio`, task=`Arch - Rel Eval 3`)` - - - - - -  
input: Input(name=`diverse-3`, type=`radio`, task=`Arch - Rel Eval 3`)
about to try executing one action, on the following input: diverse-3
Executing one action: self.actions.modify_radio('diverse-3', '2')
We are going to select this radio button: <input name="diverse-3" type="radio" value="2">
 - - - - - -  starting a new element: `Input(name=`bestq-3`, type=`radio`, task=`Arch - Rel Eval 3`)` - - - - - -  
input: Input(name=`bestq-3`, type=`radio`, task=`Arch - Rel Eval 3`)
about to try executing one action, on the following input: bestq-3
Executing one action: self.actions.modify_radio('bestq-3', '1')
We are going to select this radio button: <input name="bestq-3" type="radio" value="1">
 - - - - - -  starting a new element: `Input(name=`coherent-4`, type=`radio`, task=`Arch - Rel Eval 3`)` - - - - - -  
input: Input(name=`coherent-4`, type=`radio`, task=`Arch - Rel Eval 3`)
about to try executing one action, on the following input: coherent-4
Executing one action: self.actions.modify_radio('coherent-4', '2')
We are going to select this radio button: <input name="coherent-4" type="radio" value="2">
 - - - - - -  starting a new element: `Input(name=`complete-4`, type=`radio`, task=`Arch - Rel Eval 3`)` - - - - - -  
input: Input(name=`complete-4`, type=`radio`, task=`Arch - Rel Eval 3`)
about to try executing one action, on the following input: complete-4
Executing one action: self.actions.modify_radio('complete-4', '2')
We are going to select this radio button: <input name="complete-4" type="radio" value="2">
 - - - - - -  starting a new element: `Input(name=`intra-4`, type=`radio`, task=`Arch - Rel Eval 3`)` - - - - - -  
input: Input(name=`intra-4`, type=`radio`, task=`Arch - Rel Eval 3`)
about to try executing one action, on the following input: intra-4
Executing one action: self.actions.modify_radio('intra-4', '2')
We are going to select this radio button: <input name="intra-4" type="radio" value="2">
 - - - - - -  starting a new element: `Input(name=`diverse-4`, type=`radio`, task=`Arch - Rel Eval 3`)` - - - - - -  
input: Input(name=`diverse-4`, type=`radio`, task=`Arch - Rel Eval 3`)
about to try executing one action, on the following input: diverse-4
Executing one action: self.actions.modify_radio('diverse-4', '2')
We are going to select this radio button: <input name="diverse-4" type="radio" value="2">
 - - - - - -  starting a new element: `Input(name=`bestq-4`, type=`radio`, task=`Arch - Rel Eval 3`)` - - - - - -  
input: Input(name=`bestq-4`, type=`radio`, task=`Arch - Rel Eval 3`)
about to try executing one action, on the following input: bestq-4
Executing one action: self.actions.modify_radio('bestq-4', '2')
We are going to select this radio button: <input name="bestq-4" type="radio" value="2">
 - - - - - -  starting a new element: `Input(name=`coherent-5`, type=`radio`, task=`Arch - Rel Eval 3`)` - - - - - -  
input: Input(name=`coherent-5`, type=`radio`, task=`Arch - Rel Eval 3`)
about to try executing one action, on the following input: coherent-5
Executing one action: self.actions.modify_radio('coherent-5', '2')
We are going to select this radio button: <input name="coherent-5" type="radio" value="2">
 - - - - - -  starting a new element: `Input(name=`complete-5`, type=`radio`, task=`Arch - Rel Eval 3`)` - - - - - -  
input: Input(name=`complete-5`, type=`radio`, task=`Arch - Rel Eval 3`)
about to try executing one action, on the following input: complete-5
Executing one action: self.actions.modify_radio('complete-5', '2')
We are going to select this radio button: <input name="complete-5" type="radio" value="2">
 - - - - - -  starting a new element: `Input(name=`intra-5`, type=`radio`, task=`Arch - Rel Eval 3`)` - - - - - -  
input: Input(name=`intra-5`, type=`radio`, task=`Arch - Rel Eval 3`)
about to try executing one action, on the following input: intra-5
Executing one action: self.actions.modify_radio('intra-5', '2')
We are going to select this radio button: <input name="intra-5" type="radio" value="2">
 - - - - - -  starting a new element: `Input(name=`diverse-5`, type=`radio`, task=`Arch - Rel Eval 3`)` - - - - - -  
input: Input(name=`diverse-5`, type=`radio`, task=`Arch - Rel Eval 3`)
about to try executing one action, on the following input: diverse-5
Executing one action: self.actions.modify_radio('diverse-5', '2')
We are going to select this radio button: <input name="diverse-5" type="radio" value="2">
 - - - - - -  starting a new element: `Input(name=`bestq-5`, type=`radio`, task=`Arch - Rel Eval 3`)` - - - - - -  
input: Input(name=`bestq-5`, type=`radio`, task=`Arch - Rel Eval 3`)
about to try executing one action, on the following input: bestq-5
Executing one action: self.actions.modify_radio('bestq-5', '2')
We are going to select this radio button: <input name="bestq-5" type="radio" value="2">
input: Input(name=`coherent-1`, type=`radio`, task=`Arch - Rel Eval 3`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`complete-1`, type=`radio`, task=`Arch - Rel Eval 3`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`intra-1`, type=`radio`, task=`Arch - Rel Eval 3`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`diverse-1`, type=`radio`, task=`Arch - Rel Eval 3`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`bestq-1`, type=`radio`, task=`Arch - Rel Eval 3`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`coherent-2`, type=`radio`, task=`Arch - Rel Eval 3`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`complete-2`, type=`radio`, task=`Arch - Rel Eval 3`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`intra-2`, type=`radio`, task=`Arch - Rel Eval 3`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`diverse-2`, type=`radio`, task=`Arch - Rel Eval 3`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`bestq-2`, type=`radio`, task=`Arch - Rel Eval 3`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`coherent-3`, type=`radio`, task=`Arch - Rel Eval 3`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`complete-3`, type=`radio`, task=`Arch - Rel Eval 3`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`intra-3`, type=`radio`, task=`Arch - Rel Eval 3`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`diverse-3`, type=`radio`, task=`Arch - Rel Eval 3`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`bestq-3`, type=`radio`, task=`Arch - Rel Eval 3`)
 visible : ['1']
 visible_values : ['1']
input: Input(name=`coherent-4`, type=`radio`, task=`Arch - Rel Eval 3`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`complete-4`, type=`radio`, task=`Arch - Rel Eval 3`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`intra-4`, type=`radio`, task=`Arch - Rel Eval 3`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`diverse-4`, type=`radio`, task=`Arch - Rel Eval 3`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`bestq-4`, type=`radio`, task=`Arch - Rel Eval 3`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`coherent-5`, type=`radio`, task=`Arch - Rel Eval 3`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`complete-5`, type=`radio`, task=`Arch - Rel Eval 3`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`intra-5`, type=`radio`, task=`Arch - Rel Eval 3`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`diverse-5`, type=`radio`, task=`Arch - Rel Eval 3`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`bestq-5`, type=`radio`, task=`Arch - Rel Eval 3`)
 visible : ['2']
 visible_values : ['2']
 ------- evaluating input: Input(name=`coherent-1`, type=`radio`, task=`Arch - Rel Eval 3`) ------- 
----> answers: `[2.0, 2.0, 2.0]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`complete-1`, type=`radio`, task=`Arch - Rel Eval 3`) ------- 
----> answers: `[2.0, 2.0, 2.0]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`intra-1`, type=`radio`, task=`Arch - Rel Eval 3`) ------- 
----> answers: `[2.0, 1.0, 2.0]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`diverse-1`, type=`radio`, task=`Arch - Rel Eval 3`) ------- 
----> answers: `[1.0, 1.0, 2.0]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`bestq-1`, type=`radio`, task=`Arch - Rel Eval 3`) ------- 
----> answers: `[2.0, 2.0, 2.0]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`coherent-2`, type=`radio`, task=`Arch - Rel Eval 3`) ------- 
----> answers: `[2.0, 2.0, 2.0]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`complete-2`, type=`radio`, task=`Arch - Rel Eval 3`) ------- 
----> answers: `[2.0, 2.0, 2.0]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`intra-2`, type=`radio`, task=`Arch - Rel Eval 3`) ------- 
----> answers: `[2.0, 2.0, 2.0]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`diverse-2`, type=`radio`, task=`Arch - Rel Eval 3`) ------- 
----> answers: `[2.0, 2.0, 2.0]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`bestq-2`, type=`radio`, task=`Arch - Rel Eval 3`) ------- 
----> answers: `[2.0, 2.0, 2.0]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`coherent-3`, type=`radio`, task=`Arch - Rel Eval 3`) ------- 
----> answers: `[1, 2, 1]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`complete-3`, type=`radio`, task=`Arch - Rel Eval 3`) ------- 
----> answers: `[1, 2, 1]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`intra-3`, type=`radio`, task=`Arch - Rel Eval 3`) ------- 
----> answers: `[2, 1, 1]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`diverse-3`, type=`radio`, task=`Arch - Rel Eval 3`) ------- 
----> answers: `[1.0, 1.0, 1.0]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`bestq-3`, type=`radio`, task=`Arch - Rel Eval 3`) ------- 
----> answers: `[2, 2, 1]` - type: `<class 'list'>`
----> baseline_answer: `1` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`coherent-4`, type=`radio`, task=`Arch - Rel Eval 3`) ------- 
----> answers: `[2, 2, 2]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`complete-4`, type=`radio`, task=`Arch - Rel Eval 3`) ------- 
----> answers: `[2.0, 1.0, 2.0]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`intra-4`, type=`radio`, task=`Arch - Rel Eval 3`) ------- 
----> answers: `[1.0, 2.0, 1.0]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`diverse-4`, type=`radio`, task=`Arch - Rel Eval 3`) ------- 
----> answers: `[1, 1, 2]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`bestq-4`, type=`radio`, task=`Arch - Rel Eval 3`) ------- 
----> answers: `[2, 2, 2]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`coherent-5`, type=`radio`, task=`Arch - Rel Eval 3`) ------- 
----> answers: `[2, 2, 2]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`complete-5`, type=`radio`, task=`Arch - Rel Eval 3`) ------- 
----> answers: `[2, 2, 2]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`intra-5`, type=`radio`, task=`Arch - Rel Eval 3`) ------- 
----> answers: `[2.0, 2.0, 2.0]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`diverse-5`, type=`radio`, task=`Arch - Rel Eval 3`) ------- 
----> answers: `[2, 2, 2]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`bestq-5`, type=`radio`, task=`Arch - Rel Eval 3`) ------- 
----> answers: `[2, 2, 2]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 --> Per-instance overall score: 0.68
 --> Per-instance per-field breakdown: {'radio': [1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]}
 = = = = = = = = = = = = starting new task: `Compression HIT` = = = = = = = = = = = = 
First instance id: 3249
instance_id: 4041 <-> row_number: 792
 --> inputs: ['meaning_0_0', 'grammar_0_0', 'meaning_0_6', 'grammar_0_6', 'meaning_0_11', 'grammar_0_11', 'meaning_0_1', 'grammar_0_1', 'meaning_0_5', 'grammar_0_5', 'meaning_0_2', 'grammar_0_2', 'meaning_0_8', 'grammar_0_8', 'meaning_0_9', 'grammar_0_9', 'meaning_0_4', 'grammar_0_4', 'meaning_0_7', 'grammar_0_7', 'meaning_0_3', 'grammar_0_3', 'meaning_0_10', 'grammar_0_10']
 --> Looking up gold labels from row index 792 of `input.csv` (unique inputs). 
 --> input labels: {'meaning_0_0': [1, 2], 'grammar_0_0': [4, 2], 'meaning_0_6': [4, 4], 'grammar_0_6': [3, 3], 'meaning_0_11': [5, 4], 'grammar_0_11': [5, 5], 'meaning_0_1': [1, 2], 'grammar_0_1': [3, 2], 'meaning_0_5': [4, 3], 'grammar_0_5': [4, 2], 'meaning_0_2': [4, 4], 'grammar_0_2': [3, 4], 'meaning_0_8': [5, 3], 'grammar_0_8': [5, 3], 'meaning_0_9': [5, 3], 'grammar_0_9': [5, 3], 'meaning_0_4': [5, 4], 'grammar_0_4': [5, 3], 'meaning_0_7': [5, 5], 'grammar_0_7': [5, 5], 'meaning_0_3': [2, 3], 'grammar_0_3': [2, 3], 'meaning_0_10': [4, 2], 'grammar_0_10': [2, 2]}
 - - - - - -  starting a new element: `Input(name=`meaning_0_0`, type=`select`, task=`Compression HIT`)` - - - - - -  
input: Input(name=`meaning_0_0`, type=`select`, task=`Compression HIT`)
about to try executing one action, on the following input: meaning_0_0
Executing one action: self.actions.modify_select('meaning_0_0', '5')
We are going to select this select `meaning_0_0` with value `5`
 - - - - - -  starting a new element: `Input(name=`grammar_0_0`, type=`select`, task=`Compression HIT`)` - - - - - -  
input: Input(name=`grammar_0_0`, type=`select`, task=`Compression HIT`)
about to try executing one action, on the following input: grammar_0_0
Executing one action: self.actions.modify_select('grammar_0_0', 'blank')
We are going to select this select `grammar_0_0` with value `blank`
 - - - - - -  starting a new element: `Input(name=`meaning_0_6`, type=`select`, task=`Compression HIT`)` - - - - - -  
input: Input(name=`meaning_0_6`, type=`select`, task=`Compression HIT`)
about to try executing one action, on the following input: meaning_0_6
Executing one action: self.actions.modify_select('meaning_0_6', 'identical')
Failed to execute an action self.actions.modify_select('meaning_0_6', 'identical'), error: Input value `identical` is not among the available option values `['blank', '5', '4', '3', '2', '1']`
 - - - - - -  starting a new element: `Input(name=`grammar_0_6`, type=`select`, task=`Compression HIT`)` - - - - - -  
input: Input(name=`grammar_0_6`, type=`select`, task=`Compression HIT`)
about to try executing one action, on the following input: grammar_0_6
Executing one action: self.actions.modify_select('grammar_0_6', '5')
We are going to select this select `grammar_0_6` with value `5`
 - - - - - -  starting a new element: `Input(name=`meaning_0_11`, type=`select`, task=`Compression HIT`)` - - - - - -  
input: Input(name=`meaning_0_11`, type=`select`, task=`Compression HIT`)
about to try executing one action, on the following input: meaning_0_11
Executing one action: self.actions.modify_select('meaning_0_11', '5')
We are going to select this select `meaning_0_11` with value `5`
 - - - - - -  starting a new element: `Input(name=`grammar_0_11`, type=`select`, task=`Compression HIT`)` - - - - - -  
input: Input(name=`grammar_0_11`, type=`select`, task=`Compression HIT`)
about to try executing one action, on the following input: grammar_0_11
Executing one action: self.actions.modify_select('grammar_0_11', '5')
We are going to select this select `grammar_0_11` with value `5`
 - - - - - -  starting a new element: `Input(name=`meaning_0_1`, type=`select`, task=`Compression HIT`)` - - - - - -  
input: Input(name=`meaning_0_1`, type=`select`, task=`Compression HIT`)
about to try executing one action, on the following input: meaning_0_1
Executing one action: self.actions.modify_select('meaning_0_1', 'blank')
We are going to select this select `meaning_0_1` with value `blank`
 - - - - - -  starting a new element: `Input(name=`grammar_0_1`, type=`select`, task=`Compression HIT`)` - - - - - -  
input: Input(name=`grammar_0_1`, type=`select`, task=`Compression HIT`)
about to try executing one action, on the following input: grammar_0_1
Executing one action: self.actions.modify_select('grammar_0_1', 'perfect')
Failed to execute an action self.actions.modify_select('grammar_0_1', 'perfect'), error: Input value `perfect` is not among the available option values `['blank', '5', '4', '3', '2', '1']`
 - - - - - -  starting a new element: `Input(name=`meaning_0_5`, type=`select`, task=`Compression HIT`)` - - - - - -  
input: Input(name=`meaning_0_5`, type=`select`, task=`Compression HIT`)
about to try executing one action, on the following input: meaning_0_5
Executing one action: self.actions.modify_select('meaning_0_5', 'identical')
Failed to execute an action self.actions.modify_select('meaning_0_5', 'identical'), error: Input value `identical` is not among the available option values `['blank', '5', '4', '3', '2', '1']`
 - - - - - -  starting a new element: `Input(name=`grammar_0_5`, type=`select`, task=`Compression HIT`)` - - - - - -  
input: Input(name=`grammar_0_5`, type=`select`, task=`Compression HIT`)
about to try executing one action, on the following input: grammar_0_5
Executing one action: self.actions.modify_select('grammar_0_5', '5')
We are going to select this select `grammar_0_5` with value `5`
 - - - - - -  starting a new element: `Input(name=`meaning_0_2`, type=`select`, task=`Compression HIT`)` - - - - - -  
input: Input(name=`meaning_0_2`, type=`select`, task=`Compression HIT`)
about to try executing one action, on the following input: meaning_0_2
Executing one action: Based on the HTML code and the provided image, you can modify the input named "meaning_0_2" by selecting an appropriate option from the dropdown. The HTML doesn't show the options for "meaning_0_2", but based on the instructions and the dropdowns visible in the image, you would typically choose between:

- 5 (Identical)
- 4 (Minor differences)
- 3 (Moderate differences)
- 2 (Substantially different)
- 1 (Completely different)

The selection should represent how closely the meaning of the variation matches the original sentence. Since the screenshot does not contain enough information to determine the exact option to select, the command to modify this input cannot be generated without additional context or the content of the variation in question. If you provide the specific text content of the variation for input "meaning_0_2" and how it compares to the original, I can generate the appropriate command.
Failed to execute an action Based on the HTML code and the provided image, you can modify the input named "meaning_0_2" by selecting an appropriate option from the dropdown. The HTML doesn't show the options for "meaning_0_2", but based on the instructions and the dropdowns visible in the image, you would typically choose between:

- 5 (Identical)
- 4 (Minor differences)
- 3 (Moderate differences)
- 2 (Substantially different)
- 1 (Completely different)

The selection should represent how closely the meaning of the variation matches the original sentence. Since the screenshot does not contain enough information to determine the exact option to select, the command to modify this input cannot be generated without additional context or the content of the variation in question. If you provide the specific text content of the variation for input "meaning_0_2" and how it compares to the original, I can generate the appropriate command., error: unterminated string literal (detected at line 1) (<string>, line 1)
 - - - - - -  starting a new element: `Input(name=`grammar_0_2`, type=`select`, task=`Compression HIT`)` - - - - - -  
input: Input(name=`grammar_0_2`, type=`select`, task=`Compression HIT`)
about to try executing one action, on the following input: grammar_0_2
Executing one action: self.actions.modify_select('grammar_0_2', '5')
We are going to select this select `grammar_0_2` with value `5`
 - - - - - -  starting a new element: `Input(name=`meaning_0_8`, type=`select`, task=`Compression HIT`)` - - - - - -  
input: Input(name=`meaning_0_8`, type=`select`, task=`Compression HIT`)
about to try executing one action, on the following input: meaning_0_8
Executing one action: self.actions.modify_select('meaning_0_8', 'blank')
We are going to select this select `meaning_0_8` with value `blank`
 - - - - - -  starting a new element: `Input(name=`grammar_0_8`, type=`select`, task=`Compression HIT`)` - - - - - -  
input: Input(name=`grammar_0_8`, type=`select`, task=`Compression HIT`)
about to try executing one action, on the following input: grammar_0_8
Executing one action: self.actions.modify_select('grammar_0_8', 'blank')
We are going to select this select `grammar_0_8` with value `blank`
 - - - - - -  starting a new element: `Input(name=`meaning_0_9`, type=`select`, task=`Compression HIT`)` - - - - - -  
input: Input(name=`meaning_0_9`, type=`select`, task=`Compression HIT`)
about to try executing one action, on the following input: meaning_0_9
Executing one action: self.actions.modify_select('meaning_0_9', '3')
We are going to select this select `meaning_0_9` with value `3`
 - - - - - -  starting a new element: `Input(name=`grammar_0_9`, type=`select`, task=`Compression HIT`)` - - - - - -  
input: Input(name=`grammar_0_9`, type=`select`, task=`Compression HIT`)
about to try executing one action, on the following input: grammar_0_9
Executing one action: Based on the provided HTML form and the screenshot of the webpage, it looks like the task involves judging the quality of similar sentences based on their meaning and grammar. To modify the grammar rating for an item with the input name "grammar_0_9," you could use a dropdown select command. However, I do not have the specific value to set for this input. 

If you provide the specific rating value you want to set (such as "5" for perfect, "4" for ok but awkward, "3" for one error, "2" for many errors, or "1" for ungrammatical), I could then generate the appropriate command to modify the input. Please provide the rating value you wish to select for "grammar_0_9."
Failed to execute an action Based on the provided HTML form and the screenshot of the webpage, it looks like the task involves judging the quality of similar sentences based on their meaning and grammar. To modify the grammar rating for an item with the input name "grammar_0_9," you could use a dropdown select command. However, I do not have the specific value to set for this input. 

If you provide the specific rating value you want to set (such as "5" for perfect, "4" for ok but awkward, "3" for one error, "2" for many errors, or "1" for ungrammatical), I could then generate the appropriate command to modify the input. Please provide the rating value you wish to select for "grammar_0_9.", error: invalid syntax (<string>, line 1)
 - - - - - -  starting a new element: `Input(name=`meaning_0_4`, type=`select`, task=`Compression HIT`)` - - - - - -  
input: Input(name=`meaning_0_4`, type=`select`, task=`Compression HIT`)
about to try executing one action, on the following input: meaning_0_4
Executing one action: self.actions.modify_select('meaning_0_4', '2')
We are going to select this select `meaning_0_4` with value `2`
 - - - - - -  starting a new element: `Input(name=`grammar_0_4`, type=`select`, task=`Compression HIT`)` - - - - - -  
input: Input(name=`grammar_0_4`, type=`select`, task=`Compression HIT`)
about to try executing one action, on the following input: grammar_0_4
Executing one action: self.actions.modify_select('grammar_0_4', '1')
We are going to select this select `grammar_0_4` with value `1`
 - - - - - -  starting a new element: `Input(name=`meaning_0_7`, type=`select`, task=`Compression HIT`)` - - - - - -  
input: Input(name=`meaning_0_7`, type=`select`, task=`Compression HIT`)
about to try executing one action, on the following input: meaning_0_7
Executing one action: self.actions.modify_select('meaning_0_7', '2')
We are going to select this select `meaning_0_7` with value `2`
 - - - - - -  starting a new element: `Input(name=`grammar_0_7`, type=`select`, task=`Compression HIT`)` - - - - - -  
input: Input(name=`grammar_0_7`, type=`select`, task=`Compression HIT`)
about to try executing one action, on the following input: grammar_0_7
Executing one action: self.actions.modify_select('grammar_0_7', '2')


Given that "grammar_0_7" is not visible in the screenshot, please provide the specific value you wish to set for this input so that the correct command can be generated.
Failed to execute an action self.actions.modify_select('grammar_0_7', '2')


Given that "grammar_0_7" is not visible in the screenshot, please provide the specific value you wish to set for this input so that the correct command can be generated., error: invalid syntax (<string>, line 4)
 - - - - - -  starting a new element: `Input(name=`meaning_0_3`, type=`select`, task=`Compression HIT`)` - - - - - -  
input: Input(name=`meaning_0_3`, type=`select`, task=`Compression HIT`)
about to try executing one action, on the following input: meaning_0_3
Executing one action: self.actions.modify_select('meaning_0_3', '2')
We are going to select this select `meaning_0_3` with value `2`
 - - - - - -  starting a new element: `Input(name=`grammar_0_3`, type=`select`, task=`Compression HIT`)` - - - - - -  
input: Input(name=`grammar_0_3`, type=`select`, task=`Compression HIT`)
about to try executing one action, on the following input: grammar_0_3
Executing one action: self.actions.modify_select('grammar_0_3', '3')
We are going to select this select `grammar_0_3` with value `3`
 - - - - - -  starting a new element: `Input(name=`meaning_0_10`, type=`select`, task=`Compression HIT`)` - - - - - -  
input: Input(name=`meaning_0_10`, type=`select`, task=`Compression HIT`)
about to try executing one action, on the following input: meaning_0_10
Executing one action: self.actions.modify_select('meaning_0_10', 'identical')
Failed to execute an action self.actions.modify_select('meaning_0_10', 'identical'), error: Input value `identical` is not among the available option values `['blank', '5', '4', '3', '2', '1']`
 - - - - - -  starting a new element: `Input(name=`grammar_0_10`, type=`select`, task=`Compression HIT`)` - - - - - -  
input: Input(name=`grammar_0_10`, type=`select`, task=`Compression HIT`)
about to try executing one action, on the following input: grammar_0_10
Executing one action: self.actions.modify_select('grammar_0_10', '1')
We are going to select this select `grammar_0_10` with value `1`
input: Input(name=`meaning_0_0`, type=`select`, task=`Compression HIT`)
 visible : ['5']
 visible_values : ['5']
input: Input(name=`grammar_0_0`, type=`select`, task=`Compression HIT`)
 visible : ['blank']
 visible_values : ['blank']
input: Input(name=`meaning_0_6`, type=`select`, task=`Compression HIT`)
 visible : ['blank']
 visible_values : ['blank']
input: Input(name=`grammar_0_6`, type=`select`, task=`Compression HIT`)
 visible : ['5']
 visible_values : ['5']
input: Input(name=`meaning_0_11`, type=`select`, task=`Compression HIT`)
 visible : ['5']
 visible_values : ['5']
input: Input(name=`grammar_0_11`, type=`select`, task=`Compression HIT`)
 visible : ['5']
 visible_values : ['5']
input: Input(name=`meaning_0_1`, type=`select`, task=`Compression HIT`)
 visible : ['blank']
 visible_values : ['blank']
input: Input(name=`grammar_0_1`, type=`select`, task=`Compression HIT`)
 visible : ['blank']
 visible_values : ['blank']
input: Input(name=`meaning_0_5`, type=`select`, task=`Compression HIT`)
 visible : ['blank']
 visible_values : ['blank']
input: Input(name=`grammar_0_5`, type=`select`, task=`Compression HIT`)
 visible : ['5']
 visible_values : ['5']
input: Input(name=`meaning_0_2`, type=`select`, task=`Compression HIT`)
 visible : ['blank']
 visible_values : ['blank']
input: Input(name=`grammar_0_2`, type=`select`, task=`Compression HIT`)
 visible : ['5']
 visible_values : ['5']
input: Input(name=`meaning_0_8`, type=`select`, task=`Compression HIT`)
 visible : ['blank']
 visible_values : ['blank']
input: Input(name=`grammar_0_8`, type=`select`, task=`Compression HIT`)
 visible : ['blank']
 visible_values : ['blank']
input: Input(name=`meaning_0_9`, type=`select`, task=`Compression HIT`)
 visible : ['3']
 visible_values : ['3']
input: Input(name=`grammar_0_9`, type=`select`, task=`Compression HIT`)
 visible : ['blank']
 visible_values : ['blank']
input: Input(name=`meaning_0_4`, type=`select`, task=`Compression HIT`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`grammar_0_4`, type=`select`, task=`Compression HIT`)
 visible : ['1']
 visible_values : ['1']
input: Input(name=`meaning_0_7`, type=`select`, task=`Compression HIT`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`grammar_0_7`, type=`select`, task=`Compression HIT`)
 visible : ['blank']
 visible_values : ['blank']
input: Input(name=`meaning_0_3`, type=`select`, task=`Compression HIT`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`grammar_0_3`, type=`select`, task=`Compression HIT`)
 visible : ['3']
 visible_values : ['3']
input: Input(name=`meaning_0_10`, type=`select`, task=`Compression HIT`)
 visible : ['blank']
 visible_values : ['blank']
input: Input(name=`grammar_0_10`, type=`select`, task=`Compression HIT`)
 visible : ['1']
 visible_values : ['1']
 ------- evaluating input: Input(name=`meaning_0_0`, type=`select`, task=`Compression HIT`) ------- 
----> answers: `[1, 2]` - type: `<class 'list'>`
----> baseline_answer: `5` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`grammar_0_0`, type=`select`, task=`Compression HIT`) ------- 
----> answers: `[4, 2]` - type: `<class 'list'>`
----> baseline_answer: `blank` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`meaning_0_6`, type=`select`, task=`Compression HIT`) ------- 
----> answers: `[4, 4]` - type: `<class 'list'>`
----> baseline_answer: `blank` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`grammar_0_6`, type=`select`, task=`Compression HIT`) ------- 
----> answers: `[3, 3]` - type: `<class 'list'>`
----> baseline_answer: `5` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`meaning_0_11`, type=`select`, task=`Compression HIT`) ------- 
----> answers: `[5, 4]` - type: `<class 'list'>`
----> baseline_answer: `5` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`grammar_0_11`, type=`select`, task=`Compression HIT`) ------- 
----> answers: `[5, 5]` - type: `<class 'list'>`
----> baseline_answer: `5` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`meaning_0_1`, type=`select`, task=`Compression HIT`) ------- 
----> answers: `[1, 2]` - type: `<class 'list'>`
----> baseline_answer: `blank` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`grammar_0_1`, type=`select`, task=`Compression HIT`) ------- 
----> answers: `[3, 2]` - type: `<class 'list'>`
----> baseline_answer: `blank` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`meaning_0_5`, type=`select`, task=`Compression HIT`) ------- 
----> answers: `[4, 3]` - type: `<class 'list'>`
----> baseline_answer: `blank` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`grammar_0_5`, type=`select`, task=`Compression HIT`) ------- 
----> answers: `[4, 2]` - type: `<class 'list'>`
----> baseline_answer: `5` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`meaning_0_2`, type=`select`, task=`Compression HIT`) ------- 
----> answers: `[4, 4]` - type: `<class 'list'>`
----> baseline_answer: `blank` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`grammar_0_2`, type=`select`, task=`Compression HIT`) ------- 
----> answers: `[3, 4]` - type: `<class 'list'>`
----> baseline_answer: `5` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`meaning_0_8`, type=`select`, task=`Compression HIT`) ------- 
----> answers: `[5, 3]` - type: `<class 'list'>`
----> baseline_answer: `blank` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`grammar_0_8`, type=`select`, task=`Compression HIT`) ------- 
----> answers: `[5, 3]` - type: `<class 'list'>`
----> baseline_answer: `blank` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`meaning_0_9`, type=`select`, task=`Compression HIT`) ------- 
----> answers: `[5, 3]` - type: `<class 'list'>`
----> baseline_answer: `3` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`grammar_0_9`, type=`select`, task=`Compression HIT`) ------- 
----> answers: `[5, 3]` - type: `<class 'list'>`
----> baseline_answer: `blank` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`meaning_0_4`, type=`select`, task=`Compression HIT`) ------- 
----> answers: `[5, 4]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`grammar_0_4`, type=`select`, task=`Compression HIT`) ------- 
----> answers: `[5, 3]` - type: `<class 'list'>`
----> baseline_answer: `1` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`meaning_0_7`, type=`select`, task=`Compression HIT`) ------- 
----> answers: `[5, 5]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`grammar_0_7`, type=`select`, task=`Compression HIT`) ------- 
----> answers: `[5, 5]` - type: `<class 'list'>`
----> baseline_answer: `blank` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`meaning_0_3`, type=`select`, task=`Compression HIT`) ------- 
----> answers: `[2, 3]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`grammar_0_3`, type=`select`, task=`Compression HIT`) ------- 
----> answers: `[2, 3]` - type: `<class 'list'>`
----> baseline_answer: `3` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`meaning_0_10`, type=`select`, task=`Compression HIT`) ------- 
----> answers: `[4, 2]` - type: `<class 'list'>`
----> baseline_answer: `blank` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`grammar_0_10`, type=`select`, task=`Compression HIT`) ------- 
----> answers: `[2, 2]` - type: `<class 'list'>`
----> baseline_answer: `1` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 --> Per-instance overall score: 0.125
 --> Per-instance per-field breakdown: {'select': [0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]}
 = = = = = = = = = = = = starting new task: `Formalize this` = = = = = = = = = = = = 
First instance id: 9550
instance_id: 9557 <-> row_number: 7
 --> inputs: ['Q6MultiLineTextInput']
 --> Looking up gold labels from row index 7 of `input.csv` (unique inputs). 
 --> input labels: {'Q6MultiLineTextInput': ["I have received the Evil controller I purchased.I was wondering, how I am supposed to use the Mod's on the controller if I do not have the instructions to do so? I was also wondering, are the controllers are tested before they are shipped to customers?", "I purchased and received a controller from Evil Controllers and there is only one problem; how am I suppose to use the Mod's on the controller if I have no instructions? I would also like to know if Evil Controllers tests the controllers before they ship them out to customers?", "Evil Controllers,\nI purchased and received a controller from you and I have a couple of questions. The controller did not come with instructions so I am not sure how to use the Mod's. I was also wondering if you tested the controllers before shipping them to the customer. Thank You."]}
 - - - - - -  starting a new element: `Input(name=`Q6MultiLineTextInput`, type=`textarea`, task=`Formalize this`)` - - - - - -  
input: Input(name=`Q6MultiLineTextInput`, type=`textarea`, task=`Formalize this`)
about to try executing one action, on the following input: Q6MultiLineTextInput
Executing one action: self.actions.modify_text('Q6MultiLineTextInput', 'Dear Evil Controllers Team,\n\nI have recently purchased a controller from your company, and I was pleased to receive it promptly. However, I encountered an issue regarding the use of the mods, as there were no instructions provided. Could you please assist me by sending the necessary guidelines for the controller’s use? Furthermore, I am curious about your quality assurance process. Specifically, does Evil Controllers conduct tests on the controllers prior to dispatching them to customers? Your clarification on these matters would be greatly appreciated.\n\nSincerely,\n[Your Name]')
Add text `Dear Evil Controllers Team,

I have recently purchased a controller from your company, and I was pleased to receive it promptly. However, I encountered an issue regarding the use of the mods, as there were no instructions provided. Could you please assist me by sending the necessary guidelines for the controller’s use? Furthermore, I am curious about your quality assurance process. Specifically, does Evil Controllers conduct tests on the controllers prior to dispatching them to customers? Your clarification on these matters would be greatly appreciated.

Sincerely,
[Your Name]` to this text input: <textarea class="form-control" cols="120" name="Q6MultiLineTextInput" rows="5"></textarea>
input: Input(name=`Q6MultiLineTextInput`, type=`textarea`, task=`Formalize this`)
 visible : ['Dear Evil Controllers Team,\n\nI have recently purchased a controller from your company, and I was pleased to receive it promptly. However, I encountered an issue regarding the use of the mods, as there were no instructions provided. Could you please assist me by sending the necessary guidelines for the controller’s use? Furthermore, I am curious about your quality assurance process. Specifically, does Evil Controllers conduct tests on the controllers prior to dispatching them to customers? Your clarification on these matters would be greatly appreciated.\n\nSincerely,\n[Your Name]']
 visible_values : ['Dear Evil Controllers Team,\n\nI have recently purchased a controller from your company, and I was pleased to receive it promptly. However, I encountered an issue regarding the use of the mods, as there were no instructions provided. Could you please assist me by sending the necessary guidelines for the controller’s use? Furthermore, I am curious about your quality assurance process. Specifically, does Evil Controllers conduct tests on the controllers prior to dispatching them to customers? Your clarification on these matters would be greatly appreciated.\n\nSincerely,\n[Your Name]']
 ------- evaluating input: Input(name=`Q6MultiLineTextInput`, type=`textarea`, task=`Formalize this`) ------- 
answers after mapping: `["I have received the Evil controller I purchased.I was wondering, how I am supposed to use the Mod's on the controller if I do not have the instructions to do so? I was also wondering, are the controllers are tested before they are shipped to customers?", "I purchased and received a controller from Evil Controllers and there is only one problem; how am I suppose to use the Mod's on the controller if I have no instructions? I would also like to know if Evil Controllers tests the controllers before they ship them out to customers?", "Evil Controllers,\nI purchased and received a controller from you and I have a couple of questions. The controller did not come with instructions so I am not sure how to use the Mod's. I was also wondering if you tested the controllers before shipping them to the customer. Thank You."]`
----> answers: `["I purchased and received a controller from Evil Controllers and there is only one problem; how am I suppose to use the Mod's on the controller if I have no instructions? I would also like to know if Evil Controllers tests the controllers before they ship them out to customers?", "I have received the Evil controller I purchased.I was wondering, how I am supposed to use the Mod's on the controller if I do not have the instructions to do so? I was also wondering, are the controllers are tested before they are shipped to customers?", "Evil Controllers,\nI purchased and received a controller from you and I have a couple of questions. The controller did not come with instructions so I am not sure how to use the Mod's. I was also wondering if you tested the controllers before shipping them to the customer. Thank You."]` - type: `<class 'list'>`
----> baseline_answer: `Dear Evil Controllers Team,

I have recently purchased a controller from your company, and I was pleased to receive it promptly. However, I encountered an issue regarding the use of the mods, as there were no instructions provided. Could you please assist me by sending the necessary guidelines for the controller’s use? Furthermore, I am curious about your quality assurance process. Specifically, does Evil Controllers conduct tests on the controllers prior to dispatching them to customers? Your clarification on these matters would be greatly appreciated.

Sincerely,
[Your Name]` - type: `<class 'str'>`
 --> scores:  0.3142857142857143
----> per-field score: 0.3142857142857143
 --> Per-instance overall score: 0.3142857142857143
 --> Per-instance per-field breakdown: {'textarea': [0.3142857142857143]}
 = = = = = = = = = = = = starting new task: `JiminyCricket-HumanVal-b10` = = = = = = = = = = = = 
First instance id: 11531
instance_id: 11546 <-> row_number: 15
 --> inputs: ['summary', 'moralSaliency', 'judgment', 'badOthersRationale', 'badOthersScore', 'badSelfRationale', 'badSelfScore', 'goodOthersRationale', 'goodOthersScore', 'goodSelfRationale', 'goodSelfScore']
 --> Looking up gold labels from row index 15 of `input.csv` (unique inputs). 
 --> input labels: {'summary': ['The character enters the midway and show a mouse to an elephant. The elephant breaks its chain and runs off.', 'The character gives a cigarette case to a person with multiple personalities. The personalities have an argument. The character uses a mouse to scare an elephant.', "You are questioning two individuals about a cigarette case. WHen you ask Jenny about it the other person, Andrew panics and Jenny realizes she had been part of some plot she didn't realize. She then chases him and for some reason you go and get a mouse and scare an elephant with it.", 'Character explores a circus. They confront someone, gaining information, then go scare an elephant.', "I'm trying to find information and stuff in a circus. Lots of animals are around."], 'moralSaliency': ['salient', 'salient', 'salient', 'salient', 'salient'], 'judgment': ['badOthers', 'badOthers', 'badOthers', 'goodSelf|badOthers', 'goodSelf'], 'badOthersRationale': ['The character possibly injured the elephant and caused the elephant to do damage to the circus.', 'The character steals someones clothes', 'You take a mouse and show it to an elephant, causing the elephant to eventually break off its chains in fear and stampede out of the tent.', 'Character scares an elephant into stampeding.', '{}'], 'badOthersScore': [1.0, 1.0, 2.0, 2.0, ''], 'badSelfRationale': ['{}', '{}', '{}', '{}', '{}'], 'badSelfScore': ['', '', '', '', ''], 'goodOthersRationale': ['{}', '{}', '{}', '{}', '{}'], 'goodOthersScore': ['', '', '', '', ''], 'goodSelfRationale': ['{}', '{}', '{}', 'Character learns new information.', 'Hunting for information.'], 'goodSelfScore': ['', '', '', 1.0, 3.0]}
 - - - - - -  starting a new element: `Input(name=`summary`, type=`textarea`, task=`JiminyCricket-HumanVal-b10`)` - - - - - -  
input: Input(name=`summary`, type=`textarea`, task=`JiminyCricket-HumanVal-b10`)
about to try executing one action, on the following input: summary
Executing one action: self.actions.modify_text('summary', 'In the snippet, the player progresses through a circus environment, discovering characters and engaging with various elements of the scene. They interact with the detective, showcase a mouse to an elephant causing it to panic and eventually flee by breaking its chains. The player moves through locations like Jennifer's Boudoir, Midway Entrance, Menagerie, and retrieves items like a shawl-jacket combo and a dress-suit combination.')
Failed to execute an action self.actions.modify_text('summary', 'In the snippet, the player progresses through a circus environment, discovering characters and engaging with various elements of the scene. They interact with the detective, showcase a mouse to an elephant causing it to panic and eventually flee by breaking its chains. The player moves through locations like Jennifer's Boudoir, Midway Entrance, Menagerie, and retrieves items like a shawl-jacket combo and a dress-suit combination.'), error: unterminated string literal (detected at line 1) (<string>, line 1)
 - - - - - -  starting a new element: `Input(name=`moralSaliency`, type=`radio`, task=`JiminyCricket-HumanVal-b10`)` - - - - - -  
input: Input(name=`moralSaliency`, type=`radio`, task=`JiminyCricket-HumanVal-b10`)
about to try executing one action, on the following input: moralSaliency
Executing one action: self.actions.modify_radio('moralSaliency', 'salient')
We are going to select this radio button: <input class="form-check-input" type="radio" name="moralSaliency" id="judgmentSalient" value="salient" onclick="notSalient()" required="">
 - - - - - -  starting a new element: `Input(name=`judgment`, type=`checkbox`, task=`JiminyCricket-HumanVal-b10`)` - - - - - -  
input: Input(name=`judgment`, type=`checkbox`, task=`JiminyCricket-HumanVal-b10`)
about to try executing one action, on the following input: judgment
Executing one action: self.actions.modify_radio('judgment', 'badOthers')
The input value (`badOthers`, <class 'str'>) not found. 
Failed to execute an action self.actions.modify_radio('judgment', 'badOthers'), error: 'NoneType' object has no attribute 'get_attribute'
 - - - - - -  starting a new element: `Input(name=`badOthersRationale`, type=`text`, task=`JiminyCricket-HumanVal-b10`)` - - - - - -  
Skipping element `badOthersRationale` since it is not visible.
 - - - - - -  starting a new element: `Input(name=`badOthersScore`, type=`radio`, task=`JiminyCricket-HumanVal-b10`)` - - - - - -  
Skipping element `badOthersScore` since it is not visible.
 - - - - - -  starting a new element: `Input(name=`badSelfRationale`, type=`text`, task=`JiminyCricket-HumanVal-b10`)` - - - - - -  
Skipping element `badSelfRationale` since it is not visible.
 - - - - - -  starting a new element: `Input(name=`badSelfScore`, type=`radio`, task=`JiminyCricket-HumanVal-b10`)` - - - - - -  
Skipping element `badSelfScore` since it is not visible.
 - - - - - -  starting a new element: `Input(name=`goodOthersRationale`, type=`text`, task=`JiminyCricket-HumanVal-b10`)` - - - - - -  
Skipping element `goodOthersRationale` since it is not visible.
 - - - - - -  starting a new element: `Input(name=`goodOthersScore`, type=`radio`, task=`JiminyCricket-HumanVal-b10`)` - - - - - -  
Skipping element `goodOthersScore` since it is not visible.
 - - - - - -  starting a new element: `Input(name=`goodSelfRationale`, type=`text`, task=`JiminyCricket-HumanVal-b10`)` - - - - - -  
Skipping element `goodSelfRationale` since it is not visible.
 - - - - - -  starting a new element: `Input(name=`goodSelfScore`, type=`radio`, task=`JiminyCricket-HumanVal-b10`)` - - - - - -  
Skipping element `goodSelfScore` since it is not visible.
input: Input(name=`summary`, type=`textarea`, task=`JiminyCricket-HumanVal-b10`)
 visible : ['']
 visible_values : ['']
input: Input(name=`moralSaliency`, type=`radio`, task=`JiminyCricket-HumanVal-b10`)
 visible : ['salient']
 visible_values : ['salient']
input: Input(name=`judgment`, type=`checkbox`, task=`JiminyCricket-HumanVal-b10`)
 visible : []
 visible_values : []
input: Input(name=`badOthersRationale`, type=`text`, task=`JiminyCricket-HumanVal-b10`)
 visible : [None]
 visible_values : [None]
input: Input(name=`badOthersScore`, type=`radio`, task=`JiminyCricket-HumanVal-b10`)
 visible : []
 visible_values : []
input: Input(name=`badSelfRationale`, type=`text`, task=`JiminyCricket-HumanVal-b10`)
 visible : [None]
 visible_values : [None]
input: Input(name=`badSelfScore`, type=`radio`, task=`JiminyCricket-HumanVal-b10`)
 visible : []
 visible_values : []
input: Input(name=`goodOthersRationale`, type=`text`, task=`JiminyCricket-HumanVal-b10`)
 visible : [None]
 visible_values : [None]
input: Input(name=`goodOthersScore`, type=`radio`, task=`JiminyCricket-HumanVal-b10`)
 visible : []
 visible_values : []
input: Input(name=`goodSelfRationale`, type=`text`, task=`JiminyCricket-HumanVal-b10`)
 visible : [None]
 visible_values : [None]
input: Input(name=`goodSelfScore`, type=`radio`, task=`JiminyCricket-HumanVal-b10`)
 visible : []
 visible_values : []
 ------- evaluating input: Input(name=`summary`, type=`textarea`, task=`JiminyCricket-HumanVal-b10`) ------- 
answers after mapping: `['The character enters the midway and show a mouse to an elephant. The elephant breaks its chain and runs off.', 'The character gives a cigarette case to a person with multiple personalities. The personalities have an argument. The character uses a mouse to scare an elephant.', "You are questioning two individuals about a cigarette case. WHen you ask Jenny about it the other person, Andrew panics and Jenny realizes she had been part of some plot she didn't realize. She then chases him and for some reason you go and get a mouse and scare an elephant with it.", 'Character explores a circus. They confront someone, gaining information, then go scare an elephant.', "I'm trying to find information and stuff in a circus. Lots of animals are around."]`
----> answers: `['The character gives a cigarette case to a person with multiple personalities. The personalities have an argument. The character uses a mouse to scare an elephant.', 'Character explores a circus. They confront someone, gaining information, then go scare an elephant.', 'The character enters the midway and show a mouse to an elephant. The elephant breaks its chain and runs off.', "You are questioning two individuals about a cigarette case. WHen you ask Jenny about it the other person, Andrew panics and Jenny realizes she had been part of some plot she didn't realize. She then chases him and for some reason you go and get a mouse and scare an elephant with it.", "I'm trying to find information and stuff in a circus. Lots of animals are around."]` - type: `<class 'list'>`
----> baseline_answer: `` - type: `<class 'str'>`
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`moralSaliency`, type=`radio`, task=`JiminyCricket-HumanVal-b10`) ------- 
----> answers: `['salient', 'salient', 'salient', 'salient', 'salient']` - type: `<class 'list'>`
----> baseline_answer: `salient` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`judgment`, type=`checkbox`, task=`JiminyCricket-HumanVal-b10`) ------- 
----> answers: `['badOthers', 'badOthers', 'badOthers', 'badOthers|goodSelf', 'goodSelf']` - type: `<class 'list'>`
----> baseline_answer: `` - type: `<class 'str'>`
Model answers:  
Gold answers: ['badOthers', 'badOthers', 'badOthers', 'badOthers|goodSelf', 'goodSelf']
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`badOthersRationale`, type=`text`, task=`JiminyCricket-HumanVal-b10`) ------- 
Skipping element `badOthersRationale` since it is not visible.
 ------- evaluating input: Input(name=`badOthersScore`, type=`radio`, task=`JiminyCricket-HumanVal-b10`) ------- 
Skipping element `badOthersScore` since it is not visible.
 ------- evaluating input: Input(name=`badSelfRationale`, type=`text`, task=`JiminyCricket-HumanVal-b10`) ------- 
Skipping element `badSelfRationale` since it is not visible.
 ------- evaluating input: Input(name=`badSelfScore`, type=`radio`, task=`JiminyCricket-HumanVal-b10`) ------- 
Skipping element `badSelfScore` since it is not visible.
 ------- evaluating input: Input(name=`goodOthersRationale`, type=`text`, task=`JiminyCricket-HumanVal-b10`) ------- 
Skipping element `goodOthersRationale` since it is not visible.
 ------- evaluating input: Input(name=`goodOthersScore`, type=`radio`, task=`JiminyCricket-HumanVal-b10`) ------- 
Skipping element `goodOthersScore` since it is not visible.
 ------- evaluating input: Input(name=`goodSelfRationale`, type=`text`, task=`JiminyCricket-HumanVal-b10`) ------- 
Skipping element `goodSelfRationale` since it is not visible.
 ------- evaluating input: Input(name=`goodSelfScore`, type=`radio`, task=`JiminyCricket-HumanVal-b10`) ------- 
Skipping element `goodSelfScore` since it is not visible.
 --> Per-instance overall score: 0.3333333333333333
 --> Per-instance per-field breakdown: {'textarea': [0.0], 'radio': [1.0], 'checkbox': [0.0]}
 = = = = = = = = = = = = starting new task: `winogrande validation (grammar) additional_ph` = = = = = = = = = = = = 
First instance id: 20429
instance_id: 20488 <-> row_number: 59
 --> inputs: ['Answer_radios1', 'equal1', 'Answer_radios2', 'equal2', 'gender1', 'gender2']
 --> Looking up gold labels from row index 59 of `input.csv` (unique inputs). 
 --> input labels: {'Answer_radios1': [2], 'equal1': [''], 'Answer_radios2': [1], 'equal2': [''], 'gender1': [nan], 'gender2': [nan]}
 - - - - - -  starting a new element: `Input(name=`Answer_radios1`, type=`radio`, task=`winogrande validation (grammar) additional_ph`)` - - - - - -  
input: Input(name=`Answer_radios1`, type=`radio`, task=`winogrande validation (grammar) additional_ph`)
about to try executing one action, on the following input: Answer_radios1
Executing one action: self.actions.modify_radio('Answer_radios1', '2')
We are going to select this radio button: <input type="radio" name="Answer_radios1" id="Answer_radios_1_2" value="2">
 - - - - - -  starting a new element: `Input(name=`equal1`, type=`checkbox`, task=`winogrande validation (grammar) additional_ph`)` - - - - - -  
input: Input(name=`equal1`, type=`checkbox`, task=`winogrande validation (grammar) additional_ph`)
about to try executing one action, on the following input: equal1
Executing one action: self.actions.modify_checkbox('equal1', 'on')
Looking for checkboxes with `name`: `equal1` the values: `['on']`
 ** Warning **: input value is []. So, we're not going to modify the checkbox.
 - - - - - -  starting a new element: `Input(name=`Answer_radios2`, type=`radio`, task=`winogrande validation (grammar) additional_ph`)` - - - - - -  
input: Input(name=`Answer_radios2`, type=`radio`, task=`winogrande validation (grammar) additional_ph`)
about to try executing one action, on the following input: Answer_radios2
Executing one action: self.actions.modify_radio('Answer_radios2', '2')
We are going to select this radio button: <input type="radio" name="Answer_radios2" id="Answer_radios_2_2" value="2">
 - - - - - -  starting a new element: `Input(name=`equal2`, type=`checkbox`, task=`winogrande validation (grammar) additional_ph`)` - - - - - -  
input: Input(name=`equal2`, type=`checkbox`, task=`winogrande validation (grammar) additional_ph`)
about to try executing one action, on the following input: equal2
Executing one action: self.actions.modify_checkbox('equal2', 'on')
Looking for checkboxes with `name`: `equal2` the values: `['on']`
 ** Warning **: input value is []. So, we're not going to modify the checkbox.
 - - - - - -  starting a new element: `Input(name=`gender1`, type=`hidden`, task=`winogrande validation (grammar) additional_ph`)` - - - - - -  
Skipping element `gender1` since it is not visible.
 - - - - - -  starting a new element: `Input(name=`gender2`, type=`hidden`, task=`winogrande validation (grammar) additional_ph`)` - - - - - -  
Skipping element `gender2` since it is not visible.
input: Input(name=`Answer_radios1`, type=`radio`, task=`winogrande validation (grammar) additional_ph`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`equal1`, type=`checkbox`, task=`winogrande validation (grammar) additional_ph`)
 visible : []
 visible_values : []
input: Input(name=`Answer_radios2`, type=`radio`, task=`winogrande validation (grammar) additional_ph`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`equal2`, type=`checkbox`, task=`winogrande validation (grammar) additional_ph`)
 visible : []
 visible_values : []
input: Input(name=`gender1`, type=`hidden`, task=`winogrande validation (grammar) additional_ph`)
 visible : [' ']
 visible_values : [' ']
input: Input(name=`gender2`, type=`hidden`, task=`winogrande validation (grammar) additional_ph`)
 visible : [' ']
 visible_values : [' ']
 ------- evaluating input: Input(name=`Answer_radios1`, type=`radio`, task=`winogrande validation (grammar) additional_ph`) ------- 
----> answers: `[2]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`equal1`, type=`checkbox`, task=`winogrande validation (grammar) additional_ph`) ------- 
----> answers: `['']` - type: `<class 'list'>`
----> baseline_answer: `` - type: `<class 'str'>`
----> per-field score: 1.0
 ------- evaluating input: Input(name=`Answer_radios2`, type=`radio`, task=`winogrande validation (grammar) additional_ph`) ------- 
----> answers: `[1]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`equal2`, type=`checkbox`, task=`winogrande validation (grammar) additional_ph`) ------- 
----> answers: `['']` - type: `<class 'list'>`
----> baseline_answer: `` - type: `<class 'str'>`
----> per-field score: 1.0
 ------- evaluating input: Input(name=`gender1`, type=`hidden`, task=`winogrande validation (grammar) additional_ph`) ------- 
Skipping element `gender1` since it is not visible.
 ------- evaluating input: Input(name=`gender2`, type=`hidden`, task=`winogrande validation (grammar) additional_ph`) ------- 
Skipping element `gender2` since it is not visible.
 --> Per-instance overall score: 0.75
 --> Per-instance per-field breakdown: {'radio': [1.0, 0.0], 'checkbox': [1.0, 1.0]}
 = = = = = = = = = = = = starting new task: `atomic_event2event-effects 4` = = = = = = = = = = = = 
First instance id: 20011
instance_id: 20101 <-> row_number: 90
 --> inputs: ['xhaseff', 'ohaseff', 'xeff2a', 'xeff3b', 'xeff3c', 'xeff3d', 'norational', 'oeff4a', 'oeff4b', 'oeff4c', 'oeff4d']
 --> Looking up gold labels from row index 90 of `input.csv` (unique inputs). 
 --> input labels: {'xhaseff': ['yes', 'yes', 'yes'], 'ohaseff': ['yes', 'yes', 'no'], 'xeff2a': ['PersonX is fired', 'Are greeted by Y', 'becomes more sensitive'], 'xeff3b': ['PersonX is rewarded', 'Are refsued by Y', 'wants to change'], 'xeff3c': ['{}', '{}', '{}'], 'xeff3d': ['{}', '{}', '{}'], 'norational': ['{}', '{}', '{}'], 'oeff4a': ['PersonY gets information', 'Tears of joy', '{}'], 'oeff4b': ['PersonY receives a hug', "Hear about X's adventures", '{}'], 'oeff4c': ['{}', '{}', '{}'], 'oeff4d': ['{}', '{}', '{}']}
 - - - - - -  starting a new element: `Input(name=`xhaseff`, type=`radio`, task=`atomic_event2event-effects 4`)` - - - - - -  
input: Input(name=`xhaseff`, type=`radio`, task=`atomic_event2event-effects 4`)
about to try executing one action, on the following input: xhaseff
Executing one action: self.actions.modify_radio('xhaseff', 'yes')
We are going to select this radio button: <input id="radio3a" name="xhaseff" onclick="showhelper('xeff');requirelist(['input3a1', 'input3a2']);allNoHide()" required="" type="radio" value="yes">
 - - - - - -  starting a new element: `Input(name=`ohaseff`, type=`radio`, task=`atomic_event2event-effects 4`)` - - - - - -  
input: Input(name=`ohaseff`, type=`radio`, task=`atomic_event2event-effects 4`)
about to try executing one action, on the following input: ohaseff
Executing one action: self.actions.modify_radio('ohaseff', 'no')
We are going to select this radio button: <input id="radio4b" name="ohaseff" onclick="unshowhelper('oeff');unrequirelist(['input4a1', 'input4a2']);allNoShow()" required="" type="radio" value="no">
 - - - - - -  starting a new element: `Input(name=`xeff2a`, type=`text`, task=`atomic_event2event-effects 4`)` - - - - - -  
input: Input(name=`xeff2a`, type=`text`, task=`atomic_event2event-effects 4`)
about to try executing one action, on the following input: xeff2a
Executing one action: self.actions.modify_text('xeff2a', 'nan')
Since the input value is `nan`, we are not going to modify the text.
 - - - - - -  starting a new element: `Input(name=`xeff3b`, type=`text`, task=`atomic_event2event-effects 4`)` - - - - - -  
input: Input(name=`xeff3b`, type=`text`, task=`atomic_event2event-effects 4`)
about to try executing one action, on the following input: xeff3b
Executing one action: self.actions.modify_text('xeff3b', 'nan')
Since the input value is `nan`, we are not going to modify the text.
 - - - - - -  starting a new element: `Input(name=`xeff3c`, type=`text`, task=`atomic_event2event-effects 4`)` - - - - - -  
input: Input(name=`xeff3c`, type=`text`, task=`atomic_event2event-effects 4`)
about to try executing one action, on the following input: xeff3c
Executing one action: self.actions.modify_text('xeff3c', 'PersonX feels relieved')
Add text `PersonX feels relieved` to this text input: <input autocomplete="off" id="input3a3" name="xeff3c" style="padding-left:10px;margin-left:10px;background-color:#f0f0f0;width:250px" type="text" width="500px">
 - - - - - -  starting a new element: `Input(name=`xeff3d`, type=`text`, task=`atomic_event2event-effects 4`)` - - - - - -  
input: Input(name=`xeff3d`, type=`text`, task=`atomic_event2event-effects 4`)
about to try executing one action, on the following input: xeff3d
Executing one action: self.actions.modify_text('xeff3d', 'PersonX feels a sense of closure')
Add text `PersonX feels a sense of closure` to this text input: <input autocomplete="off" id="input2a4" name="xeff3d" style="padding-left:10px;margin-left:10px;background-color:#f0f0f0;width:250px" type="text" width="500px">
 - - - - - -  starting a new element: `Input(name=`norational`, type=`textarea`, task=`atomic_event2event-effects 4`)` - - - - - -  
Skipping element `norational` since it is not visible.
 - - - - - -  starting a new element: `Input(name=`oeff4a`, type=`text`, task=`atomic_event2event-effects 4`)` - - - - - -  
Skipping element `oeff4a` since it is not visible.
 - - - - - -  starting a new element: `Input(name=`oeff4b`, type=`text`, task=`atomic_event2event-effects 4`)` - - - - - -  
Skipping element `oeff4b` since it is not visible.
 - - - - - -  starting a new element: `Input(name=`oeff4c`, type=`text`, task=`atomic_event2event-effects 4`)` - - - - - -  
Skipping element `oeff4c` since it is not visible.
 - - - - - -  starting a new element: `Input(name=`oeff4d`, type=`text`, task=`atomic_event2event-effects 4`)` - - - - - -  
Skipping element `oeff4d` since it is not visible.
input: Input(name=`xhaseff`, type=`radio`, task=`atomic_event2event-effects 4`)
 visible : ['yes']
 visible_values : ['yes']
input: Input(name=`ohaseff`, type=`radio`, task=`atomic_event2event-effects 4`)
 visible : ['no']
 visible_values : ['no']
input: Input(name=`xeff2a`, type=`text`, task=`atomic_event2event-effects 4`)
 visible : [None]
 visible_values : [None]
input: Input(name=`xeff3b`, type=`text`, task=`atomic_event2event-effects 4`)
 visible : [None]
 visible_values : [None]
input: Input(name=`xeff3c`, type=`text`, task=`atomic_event2event-effects 4`)
 visible : ['PersonX feels relieved']
 visible_values : ['PersonX feels relieved']
input: Input(name=`xeff3d`, type=`text`, task=`atomic_event2event-effects 4`)
 visible : ['PersonX feels a sense of closure']
 visible_values : ['PersonX feels a sense of closure']
input: Input(name=`norational`, type=`textarea`, task=`atomic_event2event-effects 4`)
 visible : ['']
 visible_values : ['']
input: Input(name=`oeff4a`, type=`text`, task=`atomic_event2event-effects 4`)
 visible : [None]
 visible_values : [None]
input: Input(name=`oeff4b`, type=`text`, task=`atomic_event2event-effects 4`)
 visible : [None]
 visible_values : [None]
input: Input(name=`oeff4c`, type=`text`, task=`atomic_event2event-effects 4`)
 visible : [None]
 visible_values : [None]
input: Input(name=`oeff4d`, type=`text`, task=`atomic_event2event-effects 4`)
 visible : [None]
 visible_values : [None]
 ------- evaluating input: Input(name=`xhaseff`, type=`radio`, task=`atomic_event2event-effects 4`) ------- 
----> answers: `['yes', 'yes', 'yes']` - type: `<class 'list'>`
----> baseline_answer: `yes` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`ohaseff`, type=`radio`, task=`atomic_event2event-effects 4`) ------- 
----> answers: `['yes', 'yes', 'no']` - type: `<class 'list'>`
----> baseline_answer: `no` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`xeff2a`, type=`text`, task=`atomic_event2event-effects 4`) ------- 
answers after mapping: `['PersonX is fired', 'Are greeted by Y', 'becomes more sensitive']`
----> answers: `['Are greeted by Y', 'becomes more sensitive', 'PersonX is fired']` - type: `<class 'list'>`
----> baseline_answer: `` - type: `<class 'str'>`
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`xeff3b`, type=`text`, task=`atomic_event2event-effects 4`) ------- 
answers after mapping: `['PersonX is rewarded', 'Are refsued by Y', 'wants to change']`
----> answers: `['Are refsued by Y', 'PersonX is rewarded', 'wants to change']` - type: `<class 'list'>`
----> baseline_answer: `` - type: `<class 'str'>`
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`xeff3c`, type=`text`, task=`atomic_event2event-effects 4`) ------- 
answers after mapping: `['', '', '']`
 ------- evaluating input: Input(name=`xeff3d`, type=`text`, task=`atomic_event2event-effects 4`) ------- 
answers after mapping: `['', '', '']`
 ------- evaluating input: Input(name=`norational`, type=`textarea`, task=`atomic_event2event-effects 4`) ------- 
Skipping element `norational` since it is not visible.
 ------- evaluating input: Input(name=`oeff4a`, type=`text`, task=`atomic_event2event-effects 4`) ------- 
Skipping element `oeff4a` since it is not visible.
 ------- evaluating input: Input(name=`oeff4b`, type=`text`, task=`atomic_event2event-effects 4`) ------- 
Skipping element `oeff4b` since it is not visible.
 ------- evaluating input: Input(name=`oeff4c`, type=`text`, task=`atomic_event2event-effects 4`) ------- 
Skipping element `oeff4c` since it is not visible.
 ------- evaluating input: Input(name=`oeff4d`, type=`text`, task=`atomic_event2event-effects 4`) ------- 
Skipping element `oeff4d` since it is not visible.
 --> Per-instance overall score: 0.25
 --> Per-instance per-field breakdown: {'radio': [1.0, 0.0], 'text': [0.0, 0.0]}
 = = = = = = = = = = = = starting new task: `ANLI Generation Eval - Reflective_ACL_1` = = = = = = = = = = = = 
First instance id: 12945
instance_id: 12989 <-> row_number: 44
 --> inputs: ['o1_h_coherence', 'h_o2_coherence', 'o1_h_o2_coherence', 'overall_coherence']
 --> Looking up gold labels from row index 44 of `input.csv` (unique inputs). 
 --> input labels: {'o1_h_coherence': [-1, -1, -1], 'h_o2_coherence': [-1, -2, 1], 'o1_h_o2_coherence': [-1, -2, 1], 'overall_coherence': [-1, -2, 1]}
 - - - - - -  starting a new element: `Input(name=`o1_h_coherence`, type=`radio`, task=`ANLI Generation Eval - Reflective_ACL_1`)` - - - - - -  
input: Input(name=`o1_h_coherence`, type=`radio`, task=`ANLI Generation Eval - Reflective_ACL_1`)
about to try executing one action, on the following input: o1_h_coherence
Executing one action: self.actions.modify_radio('o1_h_coherence', '2')
We are going to select this radio button: <input type="radio" name="o1_h_coherence" id="o1_h_coherence_4" autocomplete="off" value="2" required="">
 - - - - - -  starting a new element: `Input(name=`h_o2_coherence`, type=`radio`, task=`ANLI Generation Eval - Reflective_ACL_1`)` - - - - - -  
input: Input(name=`h_o2_coherence`, type=`radio`, task=`ANLI Generation Eval - Reflective_ACL_1`)
about to try executing one action, on the following input: h_o2_coherence
Executing one action: self.actions.modify_radio('h_o2_coherence', '2')
We are going to select this radio button: <input type="radio" name="h_o2_coherence" id="h_o2_coherence_4" autocomplete="off" value="2" required="">
 - - - - - -  starting a new element: `Input(name=`o1_h_o2_coherence`, type=`radio`, task=`ANLI Generation Eval - Reflective_ACL_1`)` - - - - - -  
input: Input(name=`o1_h_o2_coherence`, type=`radio`, task=`ANLI Generation Eval - Reflective_ACL_1`)
about to try executing one action, on the following input: o1_h_o2_coherence
Executing one action: self.actions.modify_radio('o1_h_o2_coherence', '2')
We are going to select this radio button: <input type="radio" name="o1_h_o2_coherence" id="o1_h_o2_coherence_4" autocomplete="off" value="2" required="">
 - - - - - -  starting a new element: `Input(name=`overall_coherence`, type=`radio`, task=`ANLI Generation Eval - Reflective_ACL_1`)` - - - - - -  
input: Input(name=`overall_coherence`, type=`radio`, task=`ANLI Generation Eval - Reflective_ACL_1`)
about to try executing one action, on the following input: overall_coherence
Executing one action: self.actions.modify_radio('overall_coherence', '2')
We are going to select this radio button: <input type="radio" name="overall_coherence" id="overall_coherence_4" autocomplete="off" value="2" required="">
input: Input(name=`o1_h_coherence`, type=`radio`, task=`ANLI Generation Eval - Reflective_ACL_1`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`h_o2_coherence`, type=`radio`, task=`ANLI Generation Eval - Reflective_ACL_1`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`o1_h_o2_coherence`, type=`radio`, task=`ANLI Generation Eval - Reflective_ACL_1`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`overall_coherence`, type=`radio`, task=`ANLI Generation Eval - Reflective_ACL_1`)
 visible : ['2']
 visible_values : ['2']
 ------- evaluating input: Input(name=`o1_h_coherence`, type=`radio`, task=`ANLI Generation Eval - Reflective_ACL_1`) ------- 
----> answers: `[-1, -1, -1]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`h_o2_coherence`, type=`radio`, task=`ANLI Generation Eval - Reflective_ACL_1`) ------- 
----> answers: `[-1, -2, 1]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`o1_h_o2_coherence`, type=`radio`, task=`ANLI Generation Eval - Reflective_ACL_1`) ------- 
----> answers: `[-1, -2, 1]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`overall_coherence`, type=`radio`, task=`ANLI Generation Eval - Reflective_ACL_1`) ------- 
----> answers: `[-1, -2, 1]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 --> Per-instance overall score: 0.0
 --> Per-instance per-field breakdown: {'radio': [0.0, 0.0, 0.0, 0.0]}
 = = = = = = = = = = = = starting new task: `ATOMIC - Object Rationale 13` = = = = = = = = = = = = 
First instance id: 29790
instance_id: 30081 <-> row_number: 291
Could not find input field with name `Step`
 --> inputs: ['rationale1', 'rationale2', 'rationale3']
 --> Looking up gold labels from row index 291 of `input.csv` (unique inputs). 
 --> input labels: {'rationale1': ['People like to welcome people to the neighborhood with treats.  Cookies are a treat.'], 'rationale2': ['A chain can stop a person from moving.'], 'rationale3': ['It can be hard to carry a gift.  A paper bag can hold a gift very well.']}
 - - - - - -  starting a new element: `Input(name=`rationale1`, type=`textarea`, task=`ATOMIC - Object Rationale 13`)` - - - - - -  
input: Input(name=`rationale1`, type=`textarea`, task=`ATOMIC - Object Rationale 13`)
about to try executing one action, on the following input: rationale1
Executing one action: self.actions.modify_text('rationale1', 'Cookies are often associated with hospitality and are a common treat offered to guests. They are easy to serve and share, and can make guests feel welcome and appreciated during visits.')
Add text `Cookies are often associated with hospitality and are a common treat offered to guests. They are easy to serve and share, and can make guests feel welcome and appreciated during visits.` to this text input: <textarea rows="1" class="required inline-input" name="rationale1" placeholder="Why? ..." required=""></textarea>
 - - - - - -  starting a new element: `Input(name=`rationale2`, type=`textarea`, task=`ATOMIC - Object Rationale 13`)` - - - - - -  
input: Input(name=`rationale2`, type=`textarea`, task=`ATOMIC - Object Rationale 13`)
about to try executing one action, on the following input: rationale2
Executing one action: self.actions.modify_text('rationale2', 'Chains can be used to restrict movement, making it physically impossible for Person Y to leave a particular area or attend an event.')
Add text `Chains can be used to restrict movement, making it physically impossible for Person Y to leave a particular area or attend an event.` to this text input: <textarea rows="1" class="required inline-input" name="rationale2" placeholder="Why? ..." required="" style="height: 76px;"></textarea>
 - - - - - -  starting a new element: `Input(name=`rationale3`, type=`textarea`, task=`ATOMIC - Object Rationale 13`)` - - - - - -  
input: Input(name=`rationale3`, type=`textarea`, task=`ATOMIC - Object Rationale 13`)
about to try executing one action, on the following input: rationale3
Executing one action: self.actions.modify_text('rationale3', 'Paper bags are commonly used for carrying items because they are sturdy and have handles that make them easy to hold. They can accommodate gifts of various sizes, keeping the present secure and concealed until it is ready to be given.')
Add text `Paper bags are commonly used for carrying items because they are sturdy and have handles that make them easy to hold. They can accommodate gifts of various sizes, keeping the present secure and concealed until it is ready to be given.` to this text input: <textarea rows="1" class="required inline-input" name="rationale3" placeholder="Why? ..." required="" style="height: 76px;"></textarea>
input: Input(name=`rationale1`, type=`textarea`, task=`ATOMIC - Object Rationale 13`)
 visible : ['Cookies are often associated with hospitality and are a common treat offered to guests. They are easy to serve and share, and can make guests feel welcome and appreciated during visits.']
 visible_values : ['Cookies are often associated with hospitality and are a common treat offered to guests. They are easy to serve and share, and can make guests feel welcome and appreciated during visits.']
input: Input(name=`rationale2`, type=`textarea`, task=`ATOMIC - Object Rationale 13`)
 visible : ['Chains can be used to restrict movement, making it physically impossible for Person Y to leave a particular area or attend an event.']
 visible_values : ['Chains can be used to restrict movement, making it physically impossible for Person Y to leave a particular area or attend an event.']
input: Input(name=`rationale3`, type=`textarea`, task=`ATOMIC - Object Rationale 13`)
 visible : ['Paper bags are commonly used for carrying items because they are sturdy and have handles that make them easy to hold. They can accommodate gifts of various sizes, keeping the present secure and concealed until it is ready to be given.']
 visible_values : ['Paper bags are commonly used for carrying items because they are sturdy and have handles that make them easy to hold. They can accommodate gifts of various sizes, keeping the present secure and concealed until it is ready to be given.']
 ------- evaluating input: Input(name=`rationale1`, type=`textarea`, task=`ATOMIC - Object Rationale 13`) ------- 
answers after mapping: `['People like to welcome people to the neighborhood with treats.  Cookies are a treat.']`
----> answers: `['People like to welcome people to the neighborhood with treats.  Cookies are a treat.']` - type: `<class 'list'>`
----> baseline_answer: `Cookies are often associated with hospitality and are a common treat offered to guests. They are easy to serve and share, and can make guests feel welcome and appreciated during visits.` - type: `<class 'str'>`
 --> scores:  0.17777777777777778
----> per-field score: 0.17777777777777778
 ------- evaluating input: Input(name=`rationale2`, type=`textarea`, task=`ATOMIC - Object Rationale 13`) ------- 
answers after mapping: `['A chain can stop a person from moving.']`
----> answers: `['A chain can stop a person from moving.']` - type: `<class 'list'>`
----> baseline_answer: `Chains can be used to restrict movement, making it physically impossible for Person Y to leave a particular area or attend an event.` - type: `<class 'str'>`
 --> scores:  0.19354838709677416
----> per-field score: 0.19354838709677416
 ------- evaluating input: Input(name=`rationale3`, type=`textarea`, task=`ATOMIC - Object Rationale 13`) ------- 
answers after mapping: `['It can be hard to carry a gift.  A paper bag can hold a gift very well.']`
----> answers: `['It can be hard to carry a gift.  A paper bag can hold a gift very well.']` - type: `<class 'list'>`
----> baseline_answer: `Paper bags are commonly used for carrying items because they are sturdy and have handles that make them easy to hold. They can accommodate gifts of various sizes, keeping the present secure and concealed until it is ready to be given.` - type: `<class 'str'>`
 --> scores:  0.13793103448275862
----> per-field score: 0.13793103448275862
 --> Per-instance overall score: 0.16975239978577017
 --> Per-instance per-field breakdown: {'textarea': [0.17777777777777778, 0.19354838709677416, 0.13793103448275862]}
 = = = = = = = = = = = = starting new task: `Missing Adjective FITB` = = = = = = = = = = = = 
First instance id: 35415
instance_id: 35501 <-> row_number: 86
 --> inputs: ['Sent0FreeTextInput', 'Sent1FreeTextInput', 'Sent2FreeTextInput', 'Sent3FreeTextInput', 'Sent4FreeTextInput', 'Sent5FreeTextInput', 'Sent6FreeTextInput', 'Sent7FreeTextInput', 'Sent8FreeTextInput', 'Sent9FreeTextInput']
 --> Looking up gold labels from row index 86 of `input.csv` (unique inputs). 
 --> input labels: {'Sent0FreeTextInput': ['recent', 'last', 'private', 'latest', '{}'], 'Sent1FreeTextInput': ['budget', 'new', 'peace', 'new', 'economic'], 'Sent2FreeTextInput': ['player', 'batter', 'line-up', 'quick', 'pitching'], 'Sent3FreeTextInput': ['last', 'first', 'first', 'first', 'first'], 'Sent4FreeTextInput': ['tenth', 'last', 'first, second, third, fourth', 'first', 'last'], 'Sent5FreeTextInput': ['large', 'alternate', 'national', 'broad', 'diverse'], 'Sent6FreeTextInput': ['population', 'Pro-Life', 'sex', 'gender', 'female'], 'Sent7FreeTextInput': ['second', 'second', 'first', 'first, second, third, fourth', 'mid'], 'Sent8FreeTextInput': ['terrorist', 'ally', 'guerilla', 'terrorist', 'terrorist'], 'Sent9FreeTextInput': ['crucial', 'big', 'hot', 'crucial', 'delicate']}
 - - - - - -  starting a new element: `Input(name=`Sent0FreeTextInput`, type=`text`, task=`Missing Adjective FITB`)` - - - - - -  
input: Input(name=`Sent0FreeTextInput`, type=`text`, task=`Missing Adjective FITB`)
about to try executing one action, on the following input: Sent0FreeTextInput
Executing one action: self.actions.modify_text('Sent0FreeTextInput', 'weekly')
Add text `weekly` to this text input: <input class="form-control" name="Sent0FreeTextInput" size="120" type="text">
 - - - - - -  starting a new element: `Input(name=`Sent1FreeTextInput`, type=`text`, task=`Missing Adjective FITB`)` - - - - - -  
input: Input(name=`Sent1FreeTextInput`, type=`text`, task=`Missing Adjective FITB`)
about to try executing one action, on the following input: Sent1FreeTextInput
Executing one action: self.actions.modify_text('Sent1FreeTextInput', 'nan')
Since the input value is `nan`, we are not going to modify the text.
 - - - - - -  starting a new element: `Input(name=`Sent2FreeTextInput`, type=`text`, task=`Missing Adjective FITB`)` - - - - - -  
input: Input(name=`Sent2FreeTextInput`, type=`text`, task=`Missing Adjective FITB`)
about to try executing one action, on the following input: Sent2FreeTextInput
Executing one action: self.actions.modify_text('Sent2FreeTextInput', 'surprising')
Add text `surprising` to this text input: <input class="form-control" name="Sent2FreeTextInput" size="120" type="text">
 - - - - - -  starting a new element: `Input(name=`Sent3FreeTextInput`, type=`text`, task=`Missing Adjective FITB`)` - - - - - -  
input: Input(name=`Sent3FreeTextInput`, type=`text`, task=`Missing Adjective FITB`)
about to try executing one action, on the following input: Sent3FreeTextInput
Executing one action: self.actions.modify_text('Sent3FreeTextInput', 'surprising')
Add text `surprising` to this text input: <input class="form-control" name="Sent3FreeTextInput" size="120" type="text">
 - - - - - -  starting a new element: `Input(name=`Sent4FreeTextInput`, type=`text`, task=`Missing Adjective FITB`)` - - - - - -  
input: Input(name=`Sent4FreeTextInput`, type=`text`, task=`Missing Adjective FITB`)
about to try executing one action, on the following input: Sent4FreeTextInput
Executing one action: self.actions.modify_text('Sent4FreeTextInput', 'final')
Add text `final` to this text input: <input class="form-control" name="Sent4FreeTextInput" size="120" type="text">
 - - - - - -  starting a new element: `Input(name=`Sent5FreeTextInput`, type=`text`, task=`Missing Adjective FITB`)` - - - - - -  
input: Input(name=`Sent5FreeTextInput`, type=`text`, task=`Missing Adjective FITB`)
about to try executing one action, on the following input: Sent5FreeTextInput
Executing one action: self.actions.modify_text('Sent5FreeTextInput', 'comprehensive')
Add text `comprehensive` to this text input: <input class="form-control" name="Sent5FreeTextInput" size="120" type="text">
 - - - - - -  starting a new element: `Input(name=`Sent6FreeTextInput`, type=`text`, task=`Missing Adjective FITB`)` - - - - - -  
input: Input(name=`Sent6FreeTextInput`, type=`text`, task=`Missing Adjective FITB`)
about to try executing one action, on the following input: Sent6FreeTextInput
Executing one action: self.actions.modify_text('Sent6FreeTextInput', 'comprehensive')
Add text `comprehensive` to this text input: <input class="form-control" name="Sent6FreeTextInput" size="120" type="text">
 - - - - - -  starting a new element: `Input(name=`Sent7FreeTextInput`, type=`text`, task=`Missing Adjective FITB`)` - - - - - -  
input: Input(name=`Sent7FreeTextInput`, type=`text`, task=`Missing Adjective FITB`)
about to try executing one action, on the following input: Sent7FreeTextInput
Executing one action: self.actions.modify_text('Sent7FreeTextInput', 'first')
Add text `first` to this text input: <input class="form-control" name="Sent7FreeTextInput" size="120" type="text">
 - - - - - -  starting a new element: `Input(name=`Sent8FreeTextInput`, type=`text`, task=`Missing Adjective FITB`)` - - - - - -  
input: Input(name=`Sent8FreeTextInput`, type=`text`, task=`Missing Adjective FITB`)
about to try executing one action, on the following input: Sent8FreeTextInput
Executing one action: self.actions.modify_text('Sent8FreeTextInput', 'terrorist')
Add text `terrorist` to this text input: <input class="form-control" name="Sent8FreeTextInput" size="120" type="text">
 - - - - - -  starting a new element: `Input(name=`Sent9FreeTextInput`, type=`text`, task=`Missing Adjective FITB`)` - - - - - -  
input: Input(name=`Sent9FreeTextInput`, type=`text`, task=`Missing Adjective FITB`)
about to try executing one action, on the following input: Sent9FreeTextInput
Executing one action: self.actions.modify_text('Sent9FreeTextInput', 'pressing')
Add text `pressing` to this text input: <input class="form-control" name="Sent9FreeTextInput" size="120" type="text">
input: Input(name=`Sent0FreeTextInput`, type=`text`, task=`Missing Adjective FITB`)
 visible : ['weekly']
 visible_values : ['weekly']
input: Input(name=`Sent1FreeTextInput`, type=`text`, task=`Missing Adjective FITB`)
 visible : [None]
 visible_values : [None]
input: Input(name=`Sent2FreeTextInput`, type=`text`, task=`Missing Adjective FITB`)
 visible : ['surprising']
 visible_values : ['surprising']
input: Input(name=`Sent3FreeTextInput`, type=`text`, task=`Missing Adjective FITB`)
 visible : ['surprising']
 visible_values : ['surprising']
input: Input(name=`Sent4FreeTextInput`, type=`text`, task=`Missing Adjective FITB`)
 visible : ['final']
 visible_values : ['final']
input: Input(name=`Sent5FreeTextInput`, type=`text`, task=`Missing Adjective FITB`)
 visible : ['comprehensive']
 visible_values : ['comprehensive']
input: Input(name=`Sent6FreeTextInput`, type=`text`, task=`Missing Adjective FITB`)
 visible : ['comprehensive']
 visible_values : ['comprehensive']
input: Input(name=`Sent7FreeTextInput`, type=`text`, task=`Missing Adjective FITB`)
 visible : ['first']
 visible_values : ['first']
input: Input(name=`Sent8FreeTextInput`, type=`text`, task=`Missing Adjective FITB`)
 visible : ['terrorist']
 visible_values : ['terrorist']
input: Input(name=`Sent9FreeTextInput`, type=`text`, task=`Missing Adjective FITB`)
 visible : ['pressing']
 visible_values : ['pressing']
 ------- evaluating input: Input(name=`Sent0FreeTextInput`, type=`text`, task=`Missing Adjective FITB`) ------- 
answers after mapping: `['recent', 'last', 'private', 'latest', '']`
----> answers: `['private', '', 'recent', 'last', 'latest']` - type: `<class 'list'>`
----> baseline_answer: `weekly` - type: `<class 'str'>`
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`Sent1FreeTextInput`, type=`text`, task=`Missing Adjective FITB`) ------- 
answers after mapping: `['budget', 'new', 'peace', 'new', 'economic']`
----> answers: `['budget', 'economic', 'new', 'peace']` - type: `<class 'list'>`
----> baseline_answer: `` - type: `<class 'str'>`
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`Sent2FreeTextInput`, type=`text`, task=`Missing Adjective FITB`) ------- 
answers after mapping: `['player', 'batter', 'line-up', 'quick', 'pitching']`
----> answers: `['pitching', 'line-up', 'batter', 'quick', 'player']` - type: `<class 'list'>`
----> baseline_answer: `surprising` - type: `<class 'str'>`
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`Sent3FreeTextInput`, type=`text`, task=`Missing Adjective FITB`) ------- 
answers after mapping: `['last', 'first', 'first', 'first', 'first']`
----> answers: `['first', 'last']` - type: `<class 'list'>`
----> baseline_answer: `surprising` - type: `<class 'str'>`
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`Sent4FreeTextInput`, type=`text`, task=`Missing Adjective FITB`) ------- 
answers after mapping: `['tenth', 'last', 'first, second, third, fourth', 'first', 'last']`
----> answers: `['tenth', 'first', 'last', 'first, second, third, fourth']` - type: `<class 'list'>`
----> baseline_answer: `final` - type: `<class 'str'>`
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`Sent5FreeTextInput`, type=`text`, task=`Missing Adjective FITB`) ------- 
answers after mapping: `['large', 'alternate', 'national', 'broad', 'diverse']`
----> answers: `['large', 'alternate', 'broad', 'diverse', 'national']` - type: `<class 'list'>`
----> baseline_answer: `comprehensive` - type: `<class 'str'>`
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`Sent6FreeTextInput`, type=`text`, task=`Missing Adjective FITB`) ------- 
answers after mapping: `['population', 'Pro-Life', 'sex', 'gender', 'female']`
----> answers: `['female', 'sex', 'gender', 'population', 'Pro-Life']` - type: `<class 'list'>`
----> baseline_answer: `comprehensive` - type: `<class 'str'>`
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`Sent7FreeTextInput`, type=`text`, task=`Missing Adjective FITB`) ------- 
answers after mapping: `['second', 'second', 'first', 'first, second, third, fourth', 'mid']`
----> answers: `['mid', 'first, second, third, fourth', 'first', 'second']` - type: `<class 'list'>`
----> baseline_answer: `first` - type: `<class 'str'>`
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`Sent8FreeTextInput`, type=`text`, task=`Missing Adjective FITB`) ------- 
answers after mapping: `['terrorist', 'ally', 'guerilla', 'terrorist', 'terrorist']`
----> answers: `['ally', 'guerilla', 'terrorist']` - type: `<class 'list'>`
----> baseline_answer: `terrorist` - type: `<class 'str'>`
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`Sent9FreeTextInput`, type=`text`, task=`Missing Adjective FITB`) ------- 
answers after mapping: `['crucial', 'big', 'hot', 'crucial', 'delicate']`
----> answers: `['crucial', 'hot', 'big', 'delicate']` - type: `<class 'list'>`
----> baseline_answer: `pressing` - type: `<class 'str'>`
 --> scores:  0.0
----> per-field score: 0.0
 --> Per-instance overall score: 0.2
 --> Per-instance per-field breakdown: {'text': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0]}
 = = = = = = = = = = = = starting new task: `Simplicity HIT` = = = = = = = = = = = = 
First instance id: 20529
instance_id: 20572 <-> row_number: 43
 --> inputs: ['meaning_0_4', 'grammar_0_4', 'meaning_0_3', 'grammar_0_3', 'meaning_0_5', 'grammar_0_5', 'meaning_0_2', 'grammar_0_2', 'meaning_0_1', 'grammar_0_1', 'meaning_0_0', 'grammar_0_0', 'meaning_1_5', 'grammar_1_5', 'meaning_1_3', 'grammar_1_3', 'meaning_1_4', 'grammar_1_4', 'meaning_1_0', 'grammar_1_0', 'meaning_1_2', 'grammar_1_2', 'meaning_1_1', 'grammar_1_1']
 --> Looking up gold labels from row index 43 of `input.csv` (unique inputs). 
 --> input labels: {'meaning_0_4': [4.0, 4.0, 4.0], 'grammar_0_4': [3.0, 2.0, 2.0], 'meaning_0_3': [3.0, 3.0, 3.0], 'grammar_0_3': [5.0, 5.0, 3.0], 'meaning_0_5': [1.0, 2.0, 2.0], 'grammar_0_5': [5.0, 5.0, 5.0], 'meaning_0_2': [5, 5, 4], 'grammar_0_2': [5, 5, 5], 'meaning_0_1': [3, 4, 3], 'grammar_0_1': [3, 2, 2], 'meaning_0_0': [3, 5, 4], 'grammar_0_0': [2, 2, 1], 'meaning_1_5': [2.0, 2.0, 3.0], 'grammar_1_5': [4.0, 5.0, 5.0], 'meaning_1_3': [5.0, 5.0, 5.0], 'grammar_1_3': [5.0, 5.0, 5.0], 'meaning_1_4': [1.0, 3.0, 2.0], 'grammar_1_4': [1.0, 2.0, 1.0], 'meaning_1_0': [2, 2, 2], 'grammar_1_0': [1, 2, 2], 'meaning_1_2': [4, 2, 4], 'grammar_1_2': [3, 3, 3], 'meaning_1_1': [1, 1, 2], 'grammar_1_1': [1, 1, 2]}
 - - - - - -  starting a new element: `Input(name=`meaning_0_4`, type=`select`, task=`Simplicity HIT`)` - - - - - -  
input: Input(name=`meaning_0_4`, type=`select`, task=`Simplicity HIT`)
about to try executing one action, on the following input: meaning_0_4
Executing one action: self.actions.modify_select('meaning_0_4', '2')
We are going to select this select `meaning_0_4` with value `2`
 - - - - - -  starting a new element: `Input(name=`grammar_0_4`, type=`select`, task=`Simplicity HIT`)` - - - - - -  
input: Input(name=`grammar_0_4`, type=`select`, task=`Simplicity HIT`)
about to try executing one action, on the following input: grammar_0_4
Executing one action: self.actions.modify_select('grammar_0_4', '1')
We are going to select this select `grammar_0_4` with value `1`
 - - - - - -  starting a new element: `Input(name=`meaning_0_3`, type=`select`, task=`Simplicity HIT`)` - - - - - -  
input: Input(name=`meaning_0_3`, type=`select`, task=`Simplicity HIT`)
about to try executing one action, on the following input: meaning_0_3
Executing one action: self.actions.modify_select('meaning_0_3', '3')
We are going to select this select `meaning_0_3` with value `3`
 - - - - - -  starting a new element: `Input(name=`grammar_0_3`, type=`select`, task=`Simplicity HIT`)` - - - - - -  
input: Input(name=`grammar_0_3`, type=`select`, task=`Simplicity HIT`)
about to try executing one action, on the following input: grammar_0_3
Executing one action: self.actions.modify_select('grammar_0_3', '3')
We are going to select this select `grammar_0_3` with value `3`
 - - - - - -  starting a new element: `Input(name=`meaning_0_5`, type=`select`, task=`Simplicity HIT`)` - - - - - -  
input: Input(name=`meaning_0_5`, type=`select`, task=`Simplicity HIT`)
about to try executing one action, on the following input: meaning_0_5
Executing one action: self.actions.modify_select('meaning_0_5', '3')
We are going to select this select `meaning_0_5` with value `3`
 - - - - - -  starting a new element: `Input(name=`grammar_0_5`, type=`select`, task=`Simplicity HIT`)` - - - - - -  
input: Input(name=`grammar_0_5`, type=`select`, task=`Simplicity HIT`)
about to try executing one action, on the following input: grammar_0_5
Executing one action: self.actions.modify_select('grammar_0_5', 'blank')
We are going to select this select `grammar_0_5` with value `blank`
 - - - - - -  starting a new element: `Input(name=`meaning_0_2`, type=`select`, task=`Simplicity HIT`)` - - - - - -  
input: Input(name=`meaning_0_2`, type=`select`, task=`Simplicity HIT`)
about to try executing one action, on the following input: meaning_0_2
Executing one action: self.actions.modify_select('meaning_0_2', '2')
We are going to select this select `meaning_0_2` with value `2`
 - - - - - -  starting a new element: `Input(name=`grammar_0_2`, type=`select`, task=`Simplicity HIT`)` - - - - - -  
input: Input(name=`grammar_0_2`, type=`select`, task=`Simplicity HIT`)
about to try executing one action, on the following input: grammar_0_2
Executing one action: self.actions.modify_select('grammar_0_2', '1')
We are going to select this select `grammar_0_2` with value `1`
 - - - - - -  starting a new element: `Input(name=`meaning_0_1`, type=`select`, task=`Simplicity HIT`)` - - - - - -  
input: Input(name=`meaning_0_1`, type=`select`, task=`Simplicity HIT`)
about to try executing one action, on the following input: meaning_0_1
Executing one action: self.actions.modify_select('meaning_0_1', '4')
We are going to select this select `meaning_0_1` with value `4`
 - - - - - -  starting a new element: `Input(name=`grammar_0_1`, type=`select`, task=`Simplicity HIT`)` - - - - - -  
input: Input(name=`grammar_0_1`, type=`select`, task=`Simplicity HIT`)
about to try executing one action, on the following input: grammar_0_1
Executing one action: self.actions.modify_select('grammar_0_1', '1')
We are going to select this select `grammar_0_1` with value `1`
 - - - - - -  starting a new element: `Input(name=`meaning_0_0`, type=`select`, task=`Simplicity HIT`)` - - - - - -  
input: Input(name=`meaning_0_0`, type=`select`, task=`Simplicity HIT`)
about to try executing one action, on the following input: meaning_0_0
Executing one action: self.actions.modify_select('meaning_0_0', 'blank')
We are going to select this select `meaning_0_0` with value `blank`
 - - - - - -  starting a new element: `Input(name=`grammar_0_0`, type=`select`, task=`Simplicity HIT`)` - - - - - -  
input: Input(name=`grammar_0_0`, type=`select`, task=`Simplicity HIT`)
about to try executing one action, on the following input: grammar_0_0
Executing one action: self.actions.modify_select('grammar_0_0', '5')
We are going to select this select `grammar_0_0` with value `5`
 - - - - - -  starting a new element: `Input(name=`meaning_1_5`, type=`select`, task=`Simplicity HIT`)` - - - - - -  
input: Input(name=`meaning_1_5`, type=`select`, task=`Simplicity HIT`)
about to try executing one action, on the following input: meaning_1_5
Executing one action: self.actions.modify_select('meaning_1_5', '2')
We are going to select this select `meaning_1_5` with value `2`
 - - - - - -  starting a new element: `Input(name=`grammar_1_5`, type=`select`, task=`Simplicity HIT`)` - - - - - -  
input: Input(name=`grammar_1_5`, type=`select`, task=`Simplicity HIT`)
about to try executing one action, on the following input: grammar_1_5
Executing one action: self.actions.modify_select('grammar_1_5', '5')


Please note that the '5' represents the value for "perfect" as per the grading scale provided in the task description. Replace '5' with the appropriate value based on the grading you wish to apply to the sentence variation. If you provide the value to be selected, I can generate the precise command.
Failed to execute an action self.actions.modify_select('grammar_1_5', '5')


Please note that the '5' represents the value for "perfect" as per the grading scale provided in the task description. Replace '5' with the appropriate value based on the grading you wish to apply to the sentence variation. If you provide the value to be selected, I can generate the precise command., error: invalid syntax (<string>, line 4)
 - - - - - -  starting a new element: `Input(name=`meaning_1_3`, type=`select`, task=`Simplicity HIT`)` - - - - - -  
input: Input(name=`meaning_1_3`, type=`select`, task=`Simplicity HIT`)
about to try executing one action, on the following input: meaning_1_3
Executing one action: self.actions.modify_select('meaning_1_3', '1')
We are going to select this select `meaning_1_3` with value `1`
 - - - - - -  starting a new element: `Input(name=`grammar_1_3`, type=`select`, task=`Simplicity HIT`)` - - - - - -  
input: Input(name=`grammar_1_3`, type=`select`, task=`Simplicity HIT`)
about to try executing one action, on the following input: grammar_1_3
Executing one action: self.actions.modify_select('grammar_1_3', '3')
We are going to select this select `grammar_1_3` with value `3`
 - - - - - -  starting a new element: `Input(name=`meaning_1_4`, type=`select`, task=`Simplicity HIT`)` - - - - - -  
input: Input(name=`meaning_1_4`, type=`select`, task=`Simplicity HIT`)
about to try executing one action, on the following input: meaning_1_4
Executing one action: self.actions.modify_select('meaning_1_4', '2')
We are going to select this select `meaning_1_4` with value `2`
 - - - - - -  starting a new element: `Input(name=`grammar_1_4`, type=`select`, task=`Simplicity HIT`)` - - - - - -  
input: Input(name=`grammar_1_4`, type=`select`, task=`Simplicity HIT`)
about to try executing one action, on the following input: grammar_1_4
Executing one action: self.actions.modify_select('grammar_1_4', 'ungrammatical')
Failed to execute an action self.actions.modify_select('grammar_1_4', 'ungrammatical'), error: Input value `ungrammatical` is not among the available option values `['blank', '5', '4', '3', '2', '1']`
 - - - - - -  starting a new element: `Input(name=`meaning_1_0`, type=`select`, task=`Simplicity HIT`)` - - - - - -  
input: Input(name=`meaning_1_0`, type=`select`, task=`Simplicity HIT`)
about to try executing one action, on the following input: meaning_1_0
Executing one action: self.actions.modify_select('meaning_1_0', '2')
We are going to select this select `meaning_1_0` with value `2`
 - - - - - -  starting a new element: `Input(name=`grammar_1_0`, type=`select`, task=`Simplicity HIT`)` - - - - - -  
input: Input(name=`grammar_1_0`, type=`select`, task=`Simplicity HIT`)
about to try executing one action, on the following input: grammar_1_0
Executing one action: self.actions.modify_select('grammar_1_0', '5')
We are going to select this select `grammar_1_0` with value `5`
 - - - - - -  starting a new element: `Input(name=`meaning_1_2`, type=`select`, task=`Simplicity HIT`)` - - - - - -  
input: Input(name=`meaning_1_2`, type=`select`, task=`Simplicity HIT`)
about to try executing one action, on the following input: meaning_1_2
Executing one action: self.actions.modify_select('meaning_1_2', '3')
We are going to select this select `meaning_1_2` with value `3`
 - - - - - -  starting a new element: `Input(name=`grammar_1_2`, type=`select`, task=`Simplicity HIT`)` - - - - - -  
input: Input(name=`grammar_1_2`, type=`select`, task=`Simplicity HIT`)
about to try executing one action, on the following input: grammar_1_2
Executing one action: self.actions.modify_select('grammar_1_2', 'blank')
We are going to select this select `grammar_1_2` with value `blank`
 - - - - - -  starting a new element: `Input(name=`meaning_1_1`, type=`select`, task=`Simplicity HIT`)` - - - - - -  
input: Input(name=`meaning_1_1`, type=`select`, task=`Simplicity HIT`)
about to try executing one action, on the following input: meaning_1_1
Executing one action: self.actions.modify_select('meaning_1_1', '3')
We are going to select this select `meaning_1_1` with value `3`
 - - - - - -  starting a new element: `Input(name=`grammar_1_1`, type=`select`, task=`Simplicity HIT`)` - - - - - -  
input: Input(name=`grammar_1_1`, type=`select`, task=`Simplicity HIT`)
about to try executing one action, on the following input: grammar_1_1
Executing one action: self.actions.modify_select('grammar_1_1', '3')
We are going to select this select `grammar_1_1` with value `3`
input: Input(name=`meaning_0_4`, type=`select`, task=`Simplicity HIT`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`grammar_0_4`, type=`select`, task=`Simplicity HIT`)
 visible : ['1']
 visible_values : ['1']
input: Input(name=`meaning_0_3`, type=`select`, task=`Simplicity HIT`)
 visible : ['3']
 visible_values : ['3']
input: Input(name=`grammar_0_3`, type=`select`, task=`Simplicity HIT`)
 visible : ['3']
 visible_values : ['3']
input: Input(name=`meaning_0_5`, type=`select`, task=`Simplicity HIT`)
 visible : ['3']
 visible_values : ['3']
input: Input(name=`grammar_0_5`, type=`select`, task=`Simplicity HIT`)
 visible : ['blank']
 visible_values : ['blank']
input: Input(name=`meaning_0_2`, type=`select`, task=`Simplicity HIT`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`grammar_0_2`, type=`select`, task=`Simplicity HIT`)
 visible : ['1']
 visible_values : ['1']
input: Input(name=`meaning_0_1`, type=`select`, task=`Simplicity HIT`)
 visible : ['4']
 visible_values : ['4']
input: Input(name=`grammar_0_1`, type=`select`, task=`Simplicity HIT`)
 visible : ['1']
 visible_values : ['1']
input: Input(name=`meaning_0_0`, type=`select`, task=`Simplicity HIT`)
 visible : ['blank']
 visible_values : ['blank']
input: Input(name=`grammar_0_0`, type=`select`, task=`Simplicity HIT`)
 visible : ['5']
 visible_values : ['5']
input: Input(name=`meaning_1_5`, type=`select`, task=`Simplicity HIT`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`grammar_1_5`, type=`select`, task=`Simplicity HIT`)
 visible : ['blank']
 visible_values : ['blank']
input: Input(name=`meaning_1_3`, type=`select`, task=`Simplicity HIT`)
 visible : ['1']
 visible_values : ['1']
input: Input(name=`grammar_1_3`, type=`select`, task=`Simplicity HIT`)
 visible : ['3']
 visible_values : ['3']
input: Input(name=`meaning_1_4`, type=`select`, task=`Simplicity HIT`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`grammar_1_4`, type=`select`, task=`Simplicity HIT`)
 visible : ['blank']
 visible_values : ['blank']
input: Input(name=`meaning_1_0`, type=`select`, task=`Simplicity HIT`)
 visible : ['2']
 visible_values : ['2']
input: Input(name=`grammar_1_0`, type=`select`, task=`Simplicity HIT`)
 visible : ['5']
 visible_values : ['5']
input: Input(name=`meaning_1_2`, type=`select`, task=`Simplicity HIT`)
 visible : ['3']
 visible_values : ['3']
input: Input(name=`grammar_1_2`, type=`select`, task=`Simplicity HIT`)
 visible : ['blank']
 visible_values : ['blank']
input: Input(name=`meaning_1_1`, type=`select`, task=`Simplicity HIT`)
 visible : ['3']
 visible_values : ['3']
input: Input(name=`grammar_1_1`, type=`select`, task=`Simplicity HIT`)
 visible : ['3']
 visible_values : ['3']
 ------- evaluating input: Input(name=`meaning_0_4`, type=`select`, task=`Simplicity HIT`) ------- 
----> answers: `[4.0, 4.0, 4.0]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`grammar_0_4`, type=`select`, task=`Simplicity HIT`) ------- 
----> answers: `[3.0, 2.0, 2.0]` - type: `<class 'list'>`
----> baseline_answer: `1` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`meaning_0_3`, type=`select`, task=`Simplicity HIT`) ------- 
----> answers: `[3.0, 3.0, 3.0]` - type: `<class 'list'>`
----> baseline_answer: `3` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`grammar_0_3`, type=`select`, task=`Simplicity HIT`) ------- 
----> answers: `[5.0, 5.0, 3.0]` - type: `<class 'list'>`
----> baseline_answer: `3` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`meaning_0_5`, type=`select`, task=`Simplicity HIT`) ------- 
----> answers: `[1.0, 2.0, 2.0]` - type: `<class 'list'>`
----> baseline_answer: `3` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`grammar_0_5`, type=`select`, task=`Simplicity HIT`) ------- 
----> answers: `[5.0, 5.0, 5.0]` - type: `<class 'list'>`
----> baseline_answer: `blank` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`meaning_0_2`, type=`select`, task=`Simplicity HIT`) ------- 
----> answers: `[5, 5, 4]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`grammar_0_2`, type=`select`, task=`Simplicity HIT`) ------- 
----> answers: `[5, 5, 5]` - type: `<class 'list'>`
----> baseline_answer: `1` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`meaning_0_1`, type=`select`, task=`Simplicity HIT`) ------- 
----> answers: `[3, 4, 3]` - type: `<class 'list'>`
----> baseline_answer: `4` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`grammar_0_1`, type=`select`, task=`Simplicity HIT`) ------- 
----> answers: `[3, 2, 2]` - type: `<class 'list'>`
----> baseline_answer: `1` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`meaning_0_0`, type=`select`, task=`Simplicity HIT`) ------- 
----> answers: `[3, 5, 4]` - type: `<class 'list'>`
----> baseline_answer: `blank` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`grammar_0_0`, type=`select`, task=`Simplicity HIT`) ------- 
----> answers: `[2, 2, 1]` - type: `<class 'list'>`
----> baseline_answer: `5` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`meaning_1_5`, type=`select`, task=`Simplicity HIT`) ------- 
----> answers: `[2.0, 2.0, 3.0]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`grammar_1_5`, type=`select`, task=`Simplicity HIT`) ------- 
----> answers: `[4.0, 5.0, 5.0]` - type: `<class 'list'>`
----> baseline_answer: `blank` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`meaning_1_3`, type=`select`, task=`Simplicity HIT`) ------- 
----> answers: `[5.0, 5.0, 5.0]` - type: `<class 'list'>`
----> baseline_answer: `1` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`grammar_1_3`, type=`select`, task=`Simplicity HIT`) ------- 
----> answers: `[5.0, 5.0, 5.0]` - type: `<class 'list'>`
----> baseline_answer: `3` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`meaning_1_4`, type=`select`, task=`Simplicity HIT`) ------- 
----> answers: `[1.0, 3.0, 2.0]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`grammar_1_4`, type=`select`, task=`Simplicity HIT`) ------- 
----> answers: `[1.0, 2.0, 1.0]` - type: `<class 'list'>`
----> baseline_answer: `blank` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`meaning_1_0`, type=`select`, task=`Simplicity HIT`) ------- 
----> answers: `[2, 2, 2]` - type: `<class 'list'>`
----> baseline_answer: `2` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`grammar_1_0`, type=`select`, task=`Simplicity HIT`) ------- 
----> answers: `[1, 2, 2]` - type: `<class 'list'>`
----> baseline_answer: `5` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`meaning_1_2`, type=`select`, task=`Simplicity HIT`) ------- 
----> answers: `[4, 2, 4]` - type: `<class 'list'>`
----> baseline_answer: `3` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`grammar_1_2`, type=`select`, task=`Simplicity HIT`) ------- 
----> answers: `[3, 3, 3]` - type: `<class 'list'>`
----> baseline_answer: `blank` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`meaning_1_1`, type=`select`, task=`Simplicity HIT`) ------- 
----> answers: `[1, 1, 2]` - type: `<class 'list'>`
----> baseline_answer: `3` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`grammar_1_1`, type=`select`, task=`Simplicity HIT`) ------- 
----> answers: `[1, 1, 2]` - type: `<class 'list'>`
----> baseline_answer: `3` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 --> Per-instance overall score: 0.125
 --> Per-instance per-field breakdown: {'select': [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
 = = = = = = = = = = = = starting new task: `Step 3 Creating Answers Given Questions 23` = = = = = = = = = = = = 
First instance id: 7502
instance_id: 7559 <-> row_number: 57
Could not find input field with name `correctoptions-16`
Could not find input field with name `correctoptions-17`
Could not find input field with name `correctoptions-18`
Could not find input field with name `correctoptions-19`
Could not find input field with name `correctoptions-20`
Could not find input field with name `correctoptions-21`
Could not find input field with name `correctoptions-22`
Could not find input field with name `incorrectoptions-16`
Could not find input field with name `incorrectoptions-17`
Could not find input field with name `incorrectoptions-18`
Could not find input field with name `incorrectoptions-19`
Could not find input field with name `incorrectoptions-20`
Could not find input field with name `incorrectoptions-21`
Could not find input field with name `incorrectoptions-22`
 --> inputs: ['correctoptions-0', 'incorrectoptions-0', 'correctoptions-1', 'incorrectoptions-1', 'correctoptions-2', 'incorrectoptions-2', 'correctoptions-3', 'incorrectoptions-3', 'correctoptions-4', 'incorrectoptions-4', 'correctoptions-5', 'incorrectoptions-5', 'correctoptions-6', 'incorrectoptions-6', 'correctoptions-7', 'incorrectoptions-7', 'correctoptions-8', 'incorrectoptions-8', 'correctoptions-9', 'incorrectoptions-9', 'correctoptions-10', 'incorrectoptions-10', 'correctoptions-11', 'incorrectoptions-11', 'correctoptions-12', 'incorrectoptions-12', 'correctoptions-13', 'incorrectoptions-13', 'correctoptions-14', 'incorrectoptions-14', 'correctoptions-15', 'incorrectoptions-15', 'hiddenName']
 --> Looking up gold labels from row index 57 of `input.csv` (unique inputs). 
 --> input labels: {'correctoptions-0': ['{}', 'Binalshibh and Atta'], 'incorrectoptions-0': ['{}', 'Qaida when'], 'correctoptions-1': ['the real situation of the Poor', "Compare Binalshibh's"], 'incorrectoptions-1': ['private', 'ordered'], 'correctoptions-2': ['public or private', 'Reagan National Airport'], 'incorrectoptions-2': ['poor', 'went to Germany'], 'correctoptions-3': ['frequently recall about poor', 'Government'], 'incorrectoptions-3': ['frequently recall about private', 'considered'], 'correctoptions-4': ['public or private', 'Binalshibh use'], 'incorrectoptions-4': ['poor family', 'leave Yemen'], 'correctoptions-5': ['poor', 'take place'], 'incorrectoptions-5': ['private', 'which times'], 'correctoptions-6': ['The deplorable situation of a poor family', 'influenced'], 'incorrectoptions-6': ['The kind of employment', 'officials'], 'correctoptions-7': ['a poor family, struggling with poverty and want', 'proclaimed that'], 'incorrectoptions-7': ['secure to them a fair price', 'students'], 'correctoptions-8': ['opening a door for abuse', 'became a close'], 'incorrectoptions-8': ['allowed to be idle', 'mistakes besides'], 'correctoptions-9': ['the habits of the Poor', 'concern'], 'incorrectoptions-9': ['good price', 'Predator'], 'correctoptions-10': ['the kinds of work', 'Barnett'], 'incorrectoptions-10': ['fair price', 'vowing'], 'correctoptions-11': ['poor', 'highest honor'], 'incorrectoptions-11': ['public', 'vowing'], 'correctoptions-12': ['poor', 'armed Predator'], 'incorrectoptions-12': ['abuse', 'first stay'], 'correctoptions-13': ['frequently recall poor family', 'occupations'], 'incorrectoptions-13': ['frequently recall private', 'activities that'], 'correctoptions-14': ['the habits of the Poor', 'countries'], 'incorrectoptions-14': ['good habits', 'Ramzi Binalshibh'], 'correctoptions-15': ['poor', "Binalshibh's should"], 'incorrectoptions-15': ['abuse', 'Hamilton'], 'hiddenName': ['{}', '{}']}
 - - - - - -  starting a new element: `Input(name=`correctoptions-0`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)` - - - - - -  
input: Input(name=`correctoptions-0`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
about to try executing one action, on the following input: correctoptions-0
Executing one action: self.actions.modify_text('correctoptions-0', 'The poor//Those struggling with poverty and want//The destitute')
self.actions.modify_text('incorrectoptions-0', 'The wealthy//Those who can provide for themselves//Children')
Add text `The poor//Those struggling with poverty and want//The destitute` to this text input: <input type="text" name="correctoptions-0">
Add text `The wealthy//Those who can provide for themselves//Children` to this text input: <input type="text" name="incorrectoptions-0">
 - - - - - -  starting a new element: `Input(name=`incorrectoptions-0`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)` - - - - - -  
input: Input(name=`incorrectoptions-0`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
about to try executing one action, on the following input: incorrectoptions-0
Executing one action: self.actions.modify_text('incorrectoptions-0', 'The rich//Upper classes//Those without employment')
Add text `The rich//Upper classes//Those without employment` to this text input: <input type="text" name="incorrectoptions-0" value="The wealthy//Those who can provide for themselves//Children">
 - - - - - -  starting a new element: `Input(name=`correctoptions-1`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)` - - - - - -  
input: Input(name=`correctoptions-1`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
about to try executing one action, on the following input: correctoptions-1
Executing one action: self.actions.modify_text('correctoptions-1', 'warmly//with empathy and support')
self.actions.modify_text('incorrectoptions-1', 'indifferently//without investing any emotion or effort')
Add text `warmly//with empathy and support` to this text input: <input type="text" name="correctoptions-1">
Add text `indifferently//without investing any emotion or effort` to this text input: <input type="text" name="incorrectoptions-1">
 - - - - - -  starting a new element: `Input(name=`incorrectoptions-1`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)` - - - - - -  
input: Input(name=`incorrectoptions-1`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
about to try executing one action, on the following input: incorrectoptions-1
Executing one action: self.actions.modify_text('incorrectoptions-1', 'with any emotion or effort')
Add text `with any emotion or effort` to this text input: <input type="text" name="incorrectoptions-1" value="indifferently//without investing any emotion or effort">
 - - - - - -  starting a new element: `Input(name=`correctoptions-2`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)` - - - - - -  
input: Input(name=`correctoptions-2`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
about to try executing one action, on the following input: correctoptions-2
Executing one action: self.actions.modify_text('correctoptions-2', 'the Poor//those struggling')
self.actions.modify_text('incorrectoptions-2', 'the wealthy//those well-employed')
Add text `the Poor//those struggling` to this text input: <input type="text" name="correctoptions-2">
Add text `the wealthy//those well-employed` to this text input: <input type="text" name="incorrectoptions-2">
 - - - - - -  starting a new element: `Input(name=`incorrectoptions-2`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)` - - - - - -  
input: Input(name=`incorrectoptions-2`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
about to try executing one action, on the following input: incorrectoptions-2
Executing one action: self.actions.modify_text('incorrectoptions-2', 'the rich//those well-employed')
Add text `the rich//those well-employed` to this text input: <input type="text" name="incorrectoptions-2" value="the wealthy//those well-employed">
 - - - - - -  starting a new element: `Input(name=`correctoptions-3`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)` - - - - - -  
input: Input(name=`correctoptions-3`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
about to try executing one action, on the following input: correctoptions-3
Executing one action: self.actions.modify_text('correctoptions-3', 'the scenes of misery and wretchedness of the poor') 
self.actions.modify_text('incorrectoptions-3', 'his travels//his personal life//the joys of prosperity')
Add text `the scenes of misery and wretchedness of the poor` to this text input: <input type="text" name="correctoptions-3">
Add text `his travels//his personal life//the joys of prosperity` to this text input: <input type="text" name="incorrectoptions-3">
 - - - - - -  starting a new element: `Input(name=`incorrectoptions-3`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)` - - - - - -  
input: Input(name=`incorrectoptions-3`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
about to try executing one action, on the following input: incorrectoptions-3
Executing one action: self.actions.modify_text('incorrectoptions-3', 'the joyful cries of prosperity')
Add text `the joyful cries of prosperity` to this text input: <input type="text" name="incorrectoptions-3" value="his travels//his personal life//the joys of prosperity">
 - - - - - -  starting a new element: `Input(name=`correctoptions-4`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)` - - - - - -  
input: Input(name=`correctoptions-4`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
about to try executing one action, on the following input: correctoptions-4
Executing one action: self.actions.modify_text('correctoptions-4', 'Establishments giving employment to the Poor')
self.actions.modify_text('incorrectoptions-4', 'Establishments serving the wealthy//High-class leisure facilities//Educational institutes')
Add text `Establishments giving employment to the Poor` to this text input: <input type="text" name="correctoptions-4">
Add text `Establishments serving the wealthy//High-class leisure facilities//Educational institutes` to this text input: <input type="text" name="incorrectoptions-4">
 - - - - - -  starting a new element: `Input(name=`incorrectoptions-4`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)` - - - - - -  
input: Input(name=`incorrectoptions-4`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
about to try executing one action, on the following input: incorrectoptions-4
Executing one action: self.actions.modify_text('incorrectoptions-4', 'Educational institutions//Wealthy individuals')
Add text `Educational institutions//Wealthy individuals` to this text input: <input type="text" name="incorrectoptions-4" value="Establishments serving the wealthy//High-class leisure facilities//Educational institutes">
 - - - - - -  starting a new element: `Input(name=`correctoptions-5`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)` - - - - - -  
input: Input(name=`correctoptions-5`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
about to try executing one action, on the following input: correctoptions-5
Executing one action: self.actions.modify_text('correctoptions-5', 'The poor // Those struggling with poverty and want')
self.actions.modify_text('incorrectoptions-5', 'The rich // Those well-employed')
Add text `The poor // Those struggling with poverty and want` to this text input: <input type="text" name="correctoptions-5">
Add text `The rich // Those well-employed` to this text input: <input type="text" name="incorrectoptions-5">
 - - - - - -  starting a new element: `Input(name=`incorrectoptions-5`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)` - - - - - -  
input: Input(name=`incorrectoptions-5`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
about to try executing one action, on the following input: incorrectoptions-5
Executing one action: self.actions.modify_text('incorrectoptions-5', 'The rich//Those well-employed')
Add text `The rich//Those well-employed` to this text input: <input type="text" name="incorrectoptions-5" value="The rich // Those well-employed">
 - - - - - -  starting a new element: `Input(name=`correctoptions-6`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)` - - - - - -  
input: Input(name=`correctoptions-6`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
about to try executing one action, on the following input: correctoptions-6
Executing one action: self.actions.modify_text('correctoptions-6', 'the scenes of misery and wretchedness')
Add text `the scenes of misery and wretchedness` to this text input: <input type="text" name="correctoptions-6">
 - - - - - -  starting a new element: `Input(name=`incorrectoptions-6`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)` - - - - - -  
input: Input(name=`incorrectoptions-6`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
about to try executing one action, on the following input: incorrectoptions-6
Executing one action: self.actions.modify_text('incorrectoptions-6', 'the rich//those well-employed')
Add text `the rich//those well-employed` to this text input: <input type="text" name="incorrectoptions-6">
 - - - - - -  starting a new element: `Input(name=`correctoptions-7`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)` - - - - - -  
input: Input(name=`correctoptions-7`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
about to try executing one action, on the following input: correctoptions-7
Executing one action: self.actions.modify_text('correctoptions-7', 'So they can enter warmly into measures calculated for their relief//To understand and empathize with their misfortunes and sufferings')
Add text `So they can enter warmly into measures calculated for their relief//To understand and empathize with their misfortunes and sufferings` to this text input: <input type="text" name="correctoptions-7">
 - - - - - -  starting a new element: `Input(name=`incorrectoptions-7`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)` - - - - - -  
input: Input(name=`incorrectoptions-7`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
about to try executing one action, on the following input: incorrectoptions-7
Executing one action: self.actions.modify_text('incorrectoptions-7', 'the rich//those well-employed')
Add text `the rich//those well-employed` to this text input: <input type="text" name="incorrectoptions-7">
 - - - - - -  starting a new element: `Input(name=`correctoptions-8`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)` - - - - - -  
input: Input(name=`correctoptions-8`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
about to try executing one action, on the following input: correctoptions-8
Executing one action: self.actions.modify_text('correctoptions-8', 'The poor // Those struggling with poverty and want') 
self.actions.modify_text('incorrectoptions-8', 'Educational institutions // The rich/those well-employ')
Add text `The poor // Those struggling with poverty and want` to this text input: <input type="text" name="correctoptions-8">
Add text `Educational institutions // The rich/those well-employ` to this text input: <input type="text" name="incorrectoptions-8">
 - - - - - -  starting a new element: `Input(name=`incorrectoptions-8`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)` - - - - - -  
input: Input(name=`incorrectoptions-8`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
about to try executing one action, on the following input: incorrectoptions-8
Executing one action: self.actions.modify_text('incorrectoptions-8', 'Establishments offering fair wages//The wealthy')
Add text `Establishments offering fair wages//The wealthy` to this text input: <input type="text" name="incorrectoptions-8" value="Educational institutions // The rich/those well-employ">
 - - - - - -  starting a new element: `Input(name=`correctoptions-9`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)` - - - - - -  
input: Input(name=`correctoptions-9`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
about to try executing one action, on the following input: correctoptions-9
Executing one action: self.actions.modify_text('correctoptions-9', 'the reader//those who are well-off')
Add text `the reader//those who are well-off` to this text input: <input type="text" name="correctoptions-9">
 - - - - - -  starting a new element: `Input(name=`incorrectoptions-9`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)` - - - - - -  
input: Input(name=`incorrectoptions-9`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
about to try executing one action, on the following input: incorrectoptions-9
Executing one action: self.actions.modify_text('incorrectoptions-9', 'the rich//those well-employed')
Add text `the rich//those well-employed` to this text input: <input type="text" name="incorrectoptions-9">
 - - - - - -  starting a new element: `Input(name=`correctoptions-10`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)` - - - - - -  
input: Input(name=`correctoptions-10`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
about to try executing one action, on the following input: correctoptions-10
Executing one action: self.actions.modify_text('correctoptions-10', 'The poor//Those struggling with poverty and want')
self.actions.modify_text('incorrectoptions-10', 'The rich//Those well-employed')
Add text `The poor//Those struggling with poverty and want` to this text input: <input type="text" name="correctoptions-10">
Add text `The rich//Those well-employed` to this text input: <input type="text" name="incorrectoptions-10">
 - - - - - -  starting a new element: `Input(name=`incorrectoptions-10`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)` - - - - - -  
input: Input(name=`incorrectoptions-10`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
about to try executing one action, on the following input: incorrectoptions-10
Executing one action: self.actions.modify_text('incorrectoptions-10', 'The well-off//Those expecting higher compensation')
Add text `The well-off//Those expecting higher compensation` to this text input: <input type="text" name="incorrectoptions-10" value="The rich//Those well-employed">
 - - - - - -  starting a new element: `Input(name=`correctoptions-11`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)` - - - - - -  
input: Input(name=`correctoptions-11`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
about to try executing one action, on the following input: correctoptions-11
Executing one action: self.actions.modify_text('correctoptions-11', 'the Poor//those struggling to find steady work')
self.actions.modify_text('incorrectoptions-11', 'the rich//those well-employed')
Add text `the Poor//those struggling to find steady work` to this text input: <input type="text" name="correctoptions-11">
Add text `the rich//those well-employed` to this text input: <input type="text" name="incorrectoptions-11">
 - - - - - -  starting a new element: `Input(name=`incorrectoptions-11`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)` - - - - - -  
input: Input(name=`incorrectoptions-11`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
about to try executing one action, on the following input: incorrectoptions-11
Executing one action: self.actions.modify_text('incorrectoptions-11', 'the rich//those well-employed')
Add text `the rich//those well-employed` to this text input: <input type="text" name="incorrectoptions-11" value="the rich//those well-employed">
 - - - - - -  starting a new element: `Input(name=`correctoptions-12`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)` - - - - - -  
input: Input(name=`correctoptions-12`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
about to try executing one action, on the following input: correctoptions-12
Executing one action: self.actions.modify_text('correctoptions-12', 'The poor//Those struggling') 
self.actions.modify_text('incorrectoptions-12', 'Establishments offering employment')
Add text `The poor//Those struggling` to this text input: <input type="text" name="correctoptions-12">
Add text `Establishments offering employment` to this text input: <input type="text" name="incorrectoptions-12">
 - - - - - -  starting a new element: `Input(name=`incorrectoptions-12`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)` - - - - - -  
input: Input(name=`incorrectoptions-12`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
about to try executing one action, on the following input: incorrectoptions-12
Executing one action: self.actions.modify_text('incorrectoptions-12', 'The rich//Those employed in stable, well-paying jobs')
Add text `The rich//Those employed in stable, well-paying jobs` to this text input: <input type="text" name="incorrectoptions-12" value="Establishments offering employment">
 - - - - - -  starting a new element: `Input(name=`correctoptions-13`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)` - - - - - -  
input: Input(name=`correctoptions-13`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
about to try executing one action, on the following input: correctoptions-13
Executing one action: self.actions.modify_text('correctoptions-13', 'the scenes of poverty and want//the situations of hunger, disease, and disappointment')
self.actions.modify_text('incorrectoptions-13', 'scenes of prosperity and success//situations of ample food and comfort')
Add text `the scenes of poverty and want//the situations of hunger, disease, and disappointment` to this text input: <input type="text" name="correctoptions-13">
Add text `scenes of prosperity and success//situations of ample food and comfort` to this text input: <input type="text" name="incorrectoptions-13">
 - - - - - -  starting a new element: `Input(name=`incorrectoptions-13`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)` - - - - - -  
input: Input(name=`incorrectoptions-13`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
about to try executing one action, on the following input: incorrectoptions-13
Executing one action: self.actions.modify_text('incorrectoptions-13', 'ample food and comfort//the scenes of prosperity and abundance')
Add text `ample food and comfort//the scenes of prosperity and abundance` to this text input: <input type="text" name="incorrectoptions-13" value="scenes of prosperity and success//situations of ample food and comfort">
 - - - - - -  starting a new element: `Input(name=`correctoptions-14`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)` - - - - - -  
input: Input(name=`correctoptions-14`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
about to try executing one action, on the following input: correctoptions-14
Executing one action: self.actions.modify_text('correctoptions-14', 'the reader//those who are well-off') 
self.actions.modify_text('incorrectoptions-14', 'the rich//those employed in stable well-paying jobs')
Add text `the reader//those who are well-off` to this text input: <input type="text" name="correctoptions-14">
Add text `the rich//those employed in stable well-paying jobs` to this text input: <input type="text" name="incorrectoptions-14">
 - - - - - -  starting a new element: `Input(name=`incorrectoptions-14`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)` - - - - - -  
input: Input(name=`incorrectoptions-14`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
about to try executing one action, on the following input: incorrectoptions-14
Executing one action: self.actions.modify_text('incorrectoptions-14', 'Establishments offering temporary positions//People seeking temporary relief')
Add text `Establishments offering temporary positions//People seeking temporary relief` to this text input: <input type="text" name="incorrectoptions-14" value="the rich//those employed in stable well-paying jobs">
 - - - - - -  starting a new element: `Input(name=`correctoptions-15`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)` - - - - - -  
input: Input(name=`correctoptions-15`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
about to try executing one action, on the following input: correctoptions-15
Executing one action: self.actions.modify_text('correctoptions-15', 'The poor//Those struggling') 
self.actions.modify_text('incorrectoptions-15', 'Establishments offering employment//The well-off//Those employed')
Add text `The poor//Those struggling` to this text input: <input type="text" name="correctoptions-15">
Add text `Establishments offering employment//The well-off//Those employed` to this text input: <input type="text" name="incorrectoptions-15">
 - - - - - -  starting a new element: `Input(name=`incorrectoptions-15`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)` - - - - - -  
input: Input(name=`incorrectoptions-15`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
about to try executing one action, on the following input: incorrectoptions-15
Executing one action: self.actions.modify_text('incorrectoptions-15', 'the rich//those well-employed')
Add text `the rich//those well-employed` to this text input: <input type="text" name="incorrectoptions-15" value="Establishments offering employment//The well-off//Those employed">
 - - - - - -  starting a new element: `Input(name=`hiddenName`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)` - - - - - -  
Skipping element `hiddenName` since it is not visible.
input: Input(name=`correctoptions-0`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
 visible : ['The poor//Those struggling with poverty and want//The destitute']
 visible_values : ['The poor//Those struggling with poverty and want//The destitute']
input: Input(name=`incorrectoptions-0`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
 visible : ['The rich//Upper classes//Those without employment']
 visible_values : ['The rich//Upper classes//Those without employment']
input: Input(name=`correctoptions-1`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
 visible : ['warmly//with empathy and support']
 visible_values : ['warmly//with empathy and support']
input: Input(name=`incorrectoptions-1`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
 visible : ['with any emotion or effort']
 visible_values : ['with any emotion or effort']
input: Input(name=`correctoptions-2`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
 visible : ['the Poor//those struggling']
 visible_values : ['the Poor//those struggling']
input: Input(name=`incorrectoptions-2`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
 visible : ['the rich//those well-employed']
 visible_values : ['the rich//those well-employed']
input: Input(name=`correctoptions-3`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
 visible : ['the scenes of misery and wretchedness of the poor']
 visible_values : ['the scenes of misery and wretchedness of the poor']
input: Input(name=`incorrectoptions-3`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
 visible : ['the joyful cries of prosperity']
 visible_values : ['the joyful cries of prosperity']
input: Input(name=`correctoptions-4`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
 visible : ['Establishments giving employment to the Poor']
 visible_values : ['Establishments giving employment to the Poor']
input: Input(name=`incorrectoptions-4`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
 visible : ['Educational institutions//Wealthy individuals']
 visible_values : ['Educational institutions//Wealthy individuals']
input: Input(name=`correctoptions-5`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
 visible : ['The poor // Those struggling with poverty and want']
 visible_values : ['The poor // Those struggling with poverty and want']
input: Input(name=`incorrectoptions-5`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
 visible : ['The rich//Those well-employed']
 visible_values : ['The rich//Those well-employed']
input: Input(name=`correctoptions-6`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
 visible : ['the scenes of misery and wretchedness']
 visible_values : ['the scenes of misery and wretchedness']
input: Input(name=`incorrectoptions-6`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
 visible : ['the rich//those well-employed']
 visible_values : ['the rich//those well-employed']
input: Input(name=`correctoptions-7`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
 visible : ['So they can enter warmly into measures calculated for their relief//To understand and empathize with their misfortunes and sufferings']
 visible_values : ['So they can enter warmly into measures calculated for their relief//To understand and empathize with their misfortunes and sufferings']
input: Input(name=`incorrectoptions-7`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
 visible : ['the rich//those well-employed']
 visible_values : ['the rich//those well-employed']
input: Input(name=`correctoptions-8`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
 visible : ['The poor // Those struggling with poverty and want']
 visible_values : ['The poor // Those struggling with poverty and want']
input: Input(name=`incorrectoptions-8`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
 visible : ['Establishments offering fair wages//The wealthy']
 visible_values : ['Establishments offering fair wages//The wealthy']
input: Input(name=`correctoptions-9`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
 visible : ['the reader//those who are well-off']
 visible_values : ['the reader//those who are well-off']
input: Input(name=`incorrectoptions-9`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
 visible : ['the rich//those well-employed']
 visible_values : ['the rich//those well-employed']
input: Input(name=`correctoptions-10`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
 visible : ['The poor//Those struggling with poverty and want']
 visible_values : ['The poor//Those struggling with poverty and want']
input: Input(name=`incorrectoptions-10`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
 visible : ['The well-off//Those expecting higher compensation']
 visible_values : ['The well-off//Those expecting higher compensation']
input: Input(name=`correctoptions-11`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
 visible : ['the Poor//those struggling to find steady work']
 visible_values : ['the Poor//those struggling to find steady work']
input: Input(name=`incorrectoptions-11`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
 visible : ['the rich//those well-employed']
 visible_values : ['the rich//those well-employed']
input: Input(name=`correctoptions-12`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
 visible : ['The poor//Those struggling']
 visible_values : ['The poor//Those struggling']
input: Input(name=`incorrectoptions-12`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
 visible : ['The rich//Those employed in stable, well-paying jobs']
 visible_values : ['The rich//Those employed in stable, well-paying jobs']
input: Input(name=`correctoptions-13`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
 visible : ['the scenes of poverty and want//the situations of hunger, disease, and disappointment']
 visible_values : ['the scenes of poverty and want//the situations of hunger, disease, and disappointment']
input: Input(name=`incorrectoptions-13`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
 visible : ['ample food and comfort//the scenes of prosperity and abundance']
 visible_values : ['ample food and comfort//the scenes of prosperity and abundance']
input: Input(name=`correctoptions-14`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
 visible : ['the reader//those who are well-off']
 visible_values : ['the reader//those who are well-off']
input: Input(name=`incorrectoptions-14`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
 visible : ['Establishments offering temporary positions//People seeking temporary relief']
 visible_values : ['Establishments offering temporary positions//People seeking temporary relief']
input: Input(name=`correctoptions-15`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
 visible : ['The poor//Those struggling']
 visible_values : ['The poor//Those struggling']
input: Input(name=`incorrectoptions-15`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
 visible : ['the rich//those well-employed']
 visible_values : ['the rich//those well-employed']
input: Input(name=`hiddenName`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`)
 visible : [None]
 visible_values : [None]
 ------- evaluating input: Input(name=`correctoptions-0`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`) ------- 
answers after mapping: `['', 'Binalshibh and Atta']`
----> answers: `['', 'Binalshibh and Atta']` - type: `<class 'list'>`
----> baseline_answer: `The poor//Those struggling with poverty and want//The destitute` - type: `<class 'str'>`
 --> scores:  0.15384615384615383
----> per-field score: 0.15384615384615383
 ------- evaluating input: Input(name=`incorrectoptions-0`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`) ------- 
answers after mapping: `['', 'Qaida when']`
----> answers: `['', 'Qaida when']` - type: `<class 'list'>`
----> baseline_answer: `The rich//Upper classes//Those without employment` - type: `<class 'str'>`
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`correctoptions-1`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`) ------- 
answers after mapping: `['the real situation of the Poor', "Compare Binalshibh's"]`
----> answers: `["Compare Binalshibh's", 'the real situation of the Poor']` - type: `<class 'list'>`
----> baseline_answer: `warmly//with empathy and support` - type: `<class 'str'>`
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`incorrectoptions-1`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`) ------- 
answers after mapping: `['private', 'ordered']`
----> answers: `['private', 'ordered']` - type: `<class 'list'>`
----> baseline_answer: `with any emotion or effort` - type: `<class 'str'>`
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`correctoptions-2`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`) ------- 
answers after mapping: `['public or private', 'Reagan National Airport']`
----> answers: `['Reagan National Airport', 'public or private']` - type: `<class 'list'>`
----> baseline_answer: `the Poor//those struggling` - type: `<class 'str'>`
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`incorrectoptions-2`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`) ------- 
answers after mapping: `['poor', 'went to Germany']`
----> answers: `['poor', 'went to Germany']` - type: `<class 'list'>`
----> baseline_answer: `the rich//those well-employed` - type: `<class 'str'>`
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`correctoptions-3`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`) ------- 
answers after mapping: `['frequently recall about poor', 'Government']`
----> answers: `['Government', 'frequently recall about poor']` - type: `<class 'list'>`
----> baseline_answer: `the scenes of misery and wretchedness of the poor` - type: `<class 'str'>`
 --> scores:  0.15384615384615383
----> per-field score: 0.15384615384615383
 ------- evaluating input: Input(name=`incorrectoptions-3`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`) ------- 
answers after mapping: `['frequently recall about private', 'considered']`
----> answers: `['frequently recall about private', 'considered']` - type: `<class 'list'>`
----> baseline_answer: `the joyful cries of prosperity` - type: `<class 'str'>`
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`correctoptions-4`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`) ------- 
answers after mapping: `['public or private', 'Binalshibh use']`
----> answers: `['public or private', 'Binalshibh use']` - type: `<class 'list'>`
----> baseline_answer: `Establishments giving employment to the Poor` - type: `<class 'str'>`
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`incorrectoptions-4`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`) ------- 
answers after mapping: `['poor family', 'leave Yemen']`
----> answers: `['poor family', 'leave Yemen']` - type: `<class 'list'>`
----> baseline_answer: `Educational institutions//Wealthy individuals` - type: `<class 'str'>`
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`correctoptions-5`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`) ------- 
answers after mapping: `['poor', 'take place']`
----> answers: `['poor', 'take place']` - type: `<class 'list'>`
----> baseline_answer: `The poor // Those struggling with poverty and want` - type: `<class 'str'>`
 --> scores:  0.2222222222222222
----> per-field score: 0.2222222222222222
 ------- evaluating input: Input(name=`incorrectoptions-5`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`) ------- 
answers after mapping: `['private', 'which times']`
----> answers: `['private', 'which times']` - type: `<class 'list'>`
----> baseline_answer: `The rich//Those well-employed` - type: `<class 'str'>`
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`correctoptions-6`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`) ------- 
answers after mapping: `['The deplorable situation of a poor family', 'influenced']`
----> answers: `['influenced', 'The deplorable situation of a poor family']` - type: `<class 'list'>`
----> baseline_answer: `the scenes of misery and wretchedness` - type: `<class 'str'>`
 --> scores:  0.30769230769230765
----> per-field score: 0.30769230769230765
 ------- evaluating input: Input(name=`incorrectoptions-6`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`) ------- 
answers after mapping: `['The kind of employment', 'officials']`
----> answers: `['officials', 'The kind of employment']` - type: `<class 'list'>`
----> baseline_answer: `the rich//those well-employed` - type: `<class 'str'>`
 --> scores:  0.4444444444444445
----> per-field score: 0.4444444444444445
 ------- evaluating input: Input(name=`correctoptions-7`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`) ------- 
answers after mapping: `['a poor family, struggling with poverty and want', 'proclaimed that']`
----> answers: `['a poor family, struggling with poverty and want', 'proclaimed that']` - type: `<class 'list'>`
----> baseline_answer: `So they can enter warmly into measures calculated for their relief//To understand and empathize with their misfortunes and sufferings` - type: `<class 'str'>`
 --> scores:  0.14285714285714288
----> per-field score: 0.14285714285714288
 ------- evaluating input: Input(name=`incorrectoptions-7`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`) ------- 
answers after mapping: `['secure to them a fair price', 'students']`
----> answers: `['secure to them a fair price', 'students']` - type: `<class 'list'>`
----> baseline_answer: `the rich//those well-employed` - type: `<class 'str'>`
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`correctoptions-8`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`) ------- 
answers after mapping: `['opening a door for abuse', 'became a close']`
----> answers: `['opening a door for abuse', 'became a close']` - type: `<class 'list'>`
----> baseline_answer: `The poor // Those struggling with poverty and want` - type: `<class 'str'>`
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`incorrectoptions-8`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`) ------- 
answers after mapping: `['allowed to be idle', 'mistakes besides']`
----> answers: `['mistakes besides', 'allowed to be idle']` - type: `<class 'list'>`
----> baseline_answer: `Establishments offering fair wages//The wealthy` - type: `<class 'str'>`
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`correctoptions-9`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`) ------- 
answers after mapping: `['the habits of the Poor', 'concern']`
----> answers: `['the habits of the Poor', 'concern']` - type: `<class 'list'>`
----> baseline_answer: `the reader//those who are well-off` - type: `<class 'str'>`
 --> scores:  0.16666666666666666
----> per-field score: 0.16666666666666666
 ------- evaluating input: Input(name=`incorrectoptions-9`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`) ------- 
answers after mapping: `['good price', 'Predator']`
----> answers: `['Predator', 'good price']` - type: `<class 'list'>`
----> baseline_answer: `the rich//those well-employed` - type: `<class 'str'>`
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`correctoptions-10`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`) ------- 
answers after mapping: `['the kinds of work', 'Barnett']`
----> answers: `['the kinds of work', 'Barnett']` - type: `<class 'list'>`
----> baseline_answer: `The poor//Those struggling with poverty and want` - type: `<class 'str'>`
 --> scores:  0.16666666666666666
----> per-field score: 0.16666666666666666
 ------- evaluating input: Input(name=`incorrectoptions-10`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`) ------- 
answers after mapping: `['fair price', 'vowing']`
----> answers: `['vowing', 'fair price']` - type: `<class 'list'>`
----> baseline_answer: `The well-off//Those expecting higher compensation` - type: `<class 'str'>`
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`correctoptions-11`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`) ------- 
answers after mapping: `['poor', 'highest honor']`
----> answers: `['poor', 'highest honor']` - type: `<class 'list'>`
----> baseline_answer: `the Poor//those struggling to find steady work` - type: `<class 'str'>`
 --> scores:  0.2222222222222222
----> per-field score: 0.2222222222222222
 ------- evaluating input: Input(name=`incorrectoptions-11`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`) ------- 
answers after mapping: `['public', 'vowing']`
----> answers: `['vowing', 'public']` - type: `<class 'list'>`
----> baseline_answer: `the rich//those well-employed` - type: `<class 'str'>`
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`correctoptions-12`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`) ------- 
answers after mapping: `['poor', 'armed Predator']`
----> answers: `['poor', 'armed Predator']` - type: `<class 'list'>`
----> baseline_answer: `The poor//Those struggling` - type: `<class 'str'>`
 --> scores:  0.4
----> per-field score: 0.4
 ------- evaluating input: Input(name=`incorrectoptions-12`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`) ------- 
answers after mapping: `['abuse', 'first stay']`
----> answers: `['first stay', 'abuse']` - type: `<class 'list'>`
----> baseline_answer: `The rich//Those employed in stable, well-paying jobs` - type: `<class 'str'>`
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`correctoptions-13`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`) ------- 
answers after mapping: `['frequently recall poor family', 'occupations']`
----> answers: `['occupations', 'frequently recall poor family']` - type: `<class 'list'>`
----> baseline_answer: `the scenes of poverty and want//the situations of hunger, disease, and disappointment` - type: `<class 'str'>`
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`incorrectoptions-13`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`) ------- 
answers after mapping: `['frequently recall private', 'activities that']`
----> answers: `['activities that', 'frequently recall private']` - type: `<class 'list'>`
----> baseline_answer: `ample food and comfort//the scenes of prosperity and abundance` - type: `<class 'str'>`
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`correctoptions-14`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`) ------- 
answers after mapping: `['the habits of the Poor', 'countries']`
----> answers: `['the habits of the Poor', 'countries']` - type: `<class 'list'>`
----> baseline_answer: `the reader//those who are well-off` - type: `<class 'str'>`
 --> scores:  0.16666666666666666
----> per-field score: 0.16666666666666666
 ------- evaluating input: Input(name=`incorrectoptions-14`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`) ------- 
answers after mapping: `['good habits', 'Ramzi Binalshibh']`
----> answers: `['good habits', 'Ramzi Binalshibh']` - type: `<class 'list'>`
----> baseline_answer: `Establishments offering temporary positions//People seeking temporary relief` - type: `<class 'str'>`
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`correctoptions-15`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`) ------- 
answers after mapping: `['poor', "Binalshibh's should"]`
----> answers: `["Binalshibh's should", 'poor']` - type: `<class 'list'>`
----> baseline_answer: `The poor//Those struggling` - type: `<class 'str'>`
 --> scores:  0.4
----> per-field score: 0.4
 ------- evaluating input: Input(name=`incorrectoptions-15`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`) ------- 
answers after mapping: `['abuse', 'Hamilton']`
----> answers: `['Hamilton', 'abuse']` - type: `<class 'list'>`
----> baseline_answer: `the rich//those well-employed` - type: `<class 'str'>`
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`hiddenName`, type=`text`, task=`Step 3 Creating Answers Given Questions 23`) ------- 
Skipping element `hiddenName` since it is not visible.
 --> Per-instance overall score: 0.09209783272283271
 --> Per-instance per-field breakdown: {'text': [0.15384615384615383, 0.0, 0.0, 0.0, 0.0, 0.0, 0.15384615384615383, 0.0, 0.0, 0.0, 0.2222222222222222, 0.0, 0.30769230769230765, 0.4444444444444445, 0.14285714285714288, 0.0, 0.0, 0.0, 0.16666666666666666, 0.0, 0.16666666666666666, 0.0, 0.2222222222222222, 0.0, 0.4, 0.0, 0.0, 0.0, 0.16666666666666666, 0.0, 0.4, 0.0]}
 = = = = = = = = = = = = starting new task: `Word Formality Annotation` = = = = = = = = = = = = 
First instance id: 12671
instance_id: 12718 <-> row_number: 47
 --> inputs: ['email0', 'email1', 'email2', 'email3', 'email4', 'email5', 'email6', 'email7', 'email8', 'email9', 'email10', 'email11', 'email12', 'email13', 'email14', 'email15', 'email16', 'email17', 'email18', 'email19']
 --> Looking up gold labels from row index 47 of `input.csv` (unique inputs). 
 --> input labels: {'email0': ['1_Slightly_Formal', '1_Slightly_Formal', '0_Neither', '2_Moderately_Formal', '2_Moderately_Formal'], 'email1': ['0_Neither', '0_Neither', '0_Neither', '-2_Moderately_Informal', '-2_Moderately_Informal'], 'email2': ['-2_Moderately_Informal', '-3_Very_Informal', '-3_Very_Informal', '-3_Very_Informal', '-2_Moderately_Informal'], 'email3': ['2_Moderately_Formal', '1_Slightly_Formal', '1_Slightly_Formal', '2_Moderately_Formal', '2_Moderately_Formal'], 'email4': ['0_Neither', '0_Neither', '2_Moderately_Formal', '2_Moderately_Formal', '2_Moderately_Formal'], 'email5': ['1_Slightly_Formal', '1_Slightly_Formal', '2_Moderately_Formal', '3_Very_Formal', '2_Moderately_Formal'], 'email6': ['2_Moderately_Formal', '0_Neither', '2_Moderately_Formal', '3_Very_Formal', '3_Very_Formal'], 'email7': ['0_Neither', '0_Neither', '0_Neither', '1_Slightly_Formal', '2_Moderately_Formal'], 'email8': ['0_Neither', '0_Neither', '0_Neither', '2_Moderately_Formal', '1_Slightly_Formal'], 'email9': ['2_Moderately_Formal', '1_Slightly_Formal', '1_Slightly_Formal', '3_Very_Formal', '2_Moderately_Formal'], 'email10': ['0_Neither', '0_Neither', '0_Neither', '-2_Moderately_Informal', '1_Slightly_Formal'], 'email11': ['0_Neither', '0_Neither', '0_Neither', '3_Very_Formal', '3_Very_Formal'], 'email12': ['0_Neither', '1_Slightly_Formal', '1_Slightly_Formal', '3_Very_Formal', '2_Moderately_Formal'], 'email13': ['0_Neither', '0_Neither', '-1_Slightly_Informal', '-2_Moderately_Informal', '2_Moderately_Formal'], 'email14': ['0_Neither', '0_Neither', '0_Neither', '2_Moderately_Formal', '2_Moderately_Formal'], 'email15': ['1_Slightly_Formal', '1_Slightly_Formal', '0_Neither', '3_Very_Formal', '3_Very_Formal'], 'email16': ['0_Neither', '0_Neither', '-1_Slightly_Informal', '2_Moderately_Formal', '0_Neither'], 'email17': ['0_Neither', '0_Neither', '-1_Slightly_Informal', '3_Very_Formal', '1_Slightly_Formal'], 'email18': ['0_Neither', '0_Neither', '0_Neither', '0_Not_Usable', '0_Neither'], 'email19': ['0_Neither', '0_Neither', '1_Slightly_Formal', '3_Very_Formal', '2_Moderately_Formal']}
 - - - - - -  starting a new element: `Input(name=`email0`, type=`select`, task=`Word Formality Annotation`)` - - - - - -  
input: Input(name=`email0`, type=`select`, task=`Word Formality Annotation`)
about to try executing one action, on the following input: email0
Executing one action: self.actions.modify_select('email0', '2_Moderately_Formal')
We are going to select this select `email0` with value `2_Moderately_Formal`
 - - - - - -  starting a new element: `Input(name=`email1`, type=`select`, task=`Word Formality Annotation`)` - - - - - -  
input: Input(name=`email1`, type=`select`, task=`Word Formality Annotation`)
about to try executing one action, on the following input: email1
Executing one action: self.actions.modify_select('email1', '2_Moderately_Formal')
We are going to select this select `email1` with value `2_Moderately_Formal`
 - - - - - -  starting a new element: `Input(name=`email2`, type=`select`, task=`Word Formality Annotation`)` - - - - - -  
input: Input(name=`email2`, type=`select`, task=`Word Formality Annotation`)
about to try executing one action, on the following input: email2
Executing one action: self.actions.modify_select('email2', '2_Moderately_Formal')
We are going to select this select `email2` with value `2_Moderately_Formal`
 - - - - - -  starting a new element: `Input(name=`email3`, type=`select`, task=`Word Formality Annotation`)` - - - - - -  
input: Input(name=`email3`, type=`select`, task=`Word Formality Annotation`)
about to try executing one action, on the following input: email3
Executing one action: self.actions.modify_select('email3', '2_Moderately_Formal')
We are going to select this select `email3` with value `2_Moderately_Formal`
 - - - - - -  starting a new element: `Input(name=`email4`, type=`select`, task=`Word Formality Annotation`)` - - - - - -  
input: Input(name=`email4`, type=`select`, task=`Word Formality Annotation`)
about to try executing one action, on the following input: email4
Executing one action: self.actions.modify_select('email4', '2_Moderately_Formal')
We are going to select this select `email4` with value `2_Moderately_Formal`
 - - - - - -  starting a new element: `Input(name=`email5`, type=`select`, task=`Word Formality Annotation`)` - - - - - -  
input: Input(name=`email5`, type=`select`, task=`Word Formality Annotation`)
about to try executing one action, on the following input: email5
Executing one action: self.actions.modify_select('email5', '2_Moderately_Formal')
We are going to select this select `email5` with value `2_Moderately_Formal`
 - - - - - -  starting a new element: `Input(name=`email6`, type=`select`, task=`Word Formality Annotation`)` - - - - - -  
input: Input(name=`email6`, type=`select`, task=`Word Formality Annotation`)
about to try executing one action, on the following input: email6
Executing one action: self.actions.modify_select('email6', '2_Moderately_Formal')
We are going to select this select `email6` with value `2_Moderately_Formal`
 - - - - - -  starting a new element: `Input(name=`email7`, type=`select`, task=`Word Formality Annotation`)` - - - - - -  
input: Input(name=`email7`, type=`select`, task=`Word Formality Annotation`)
about to try executing one action, on the following input: email7
Executing one action: self.actions.modify_select('email7', '3_Very_Formal')
We are going to select this select `email7` with value `3_Very_Formal`
 - - - - - -  starting a new element: `Input(name=`email8`, type=`select`, task=`Word Formality Annotation`)` - - - - - -  
input: Input(name=`email8`, type=`select`, task=`Word Formality Annotation`)
about to try executing one action, on the following input: email8
Executing one action: self.actions.modify_select('email8', '2_Moderately_Formal')
We are going to select this select `email8` with value `2_Moderately_Formal`
 - - - - - -  starting a new element: `Input(name=`email9`, type=`select`, task=`Word Formality Annotation`)` - - - - - -  
input: Input(name=`email9`, type=`select`, task=`Word Formality Annotation`)
about to try executing one action, on the following input: email9
Executing one action: self.actions.modify_select('email9', '3_Very_Formal')
We are going to select this select `email9` with value `3_Very_Formal`
 - - - - - -  starting a new element: `Input(name=`email10`, type=`select`, task=`Word Formality Annotation`)` - - - - - -  
input: Input(name=`email10`, type=`select`, task=`Word Formality Annotation`)
about to try executing one action, on the following input: email10
Executing one action: self.actions.modify_select('email10', '3_Very_Formal')
We are going to select this select `email10` with value `3_Very_Formal`
 - - - - - -  starting a new element: `Input(name=`email11`, type=`select`, task=`Word Formality Annotation`)` - - - - - -  
input: Input(name=`email11`, type=`select`, task=`Word Formality Annotation`)
about to try executing one action, on the following input: email11
Executing one action: self.actions.modify_select('email11', '1_Slightly_Formal')
We are going to select this select `email11` with value `1_Slightly_Formal`
 - - - - - -  starting a new element: `Input(name=`email12`, type=`select`, task=`Word Formality Annotation`)` - - - - - -  
input: Input(name=`email12`, type=`select`, task=`Word Formality Annotation`)
about to try executing one action, on the following input: email12
Executing one action: self.actions.modify_select('email12', '3_Very_Formal')
We are going to select this select `email12` with value `3_Very_Formal`
 - - - - - -  starting a new element: `Input(name=`email13`, type=`select`, task=`Word Formality Annotation`)` - - - - - -  
input: Input(name=`email13`, type=`select`, task=`Word Formality Annotation`)
about to try executing one action, on the following input: email13
Executing one action: self.actions.modify_select('email13', '1_Slightly_Formal')
We are going to select this select `email13` with value `1_Slightly_Formal`
 - - - - - -  starting a new element: `Input(name=`email14`, type=`select`, task=`Word Formality Annotation`)` - - - - - -  
input: Input(name=`email14`, type=`select`, task=`Word Formality Annotation`)
about to try executing one action, on the following input: email14
Executing one action: self.actions.modify_select('email14', '3_Very_Formal')
We are going to select this select `email14` with value `3_Very_Formal`
 - - - - - -  starting a new element: `Input(name=`email15`, type=`select`, task=`Word Formality Annotation`)` - - - - - -  
input: Input(name=`email15`, type=`select`, task=`Word Formality Annotation`)
about to try executing one action, on the following input: email15
Executing one action: self.actions.modify_select('email15', '3_Very_Formal')
We are going to select this select `email15` with value `3_Very_Formal`
 - - - - - -  starting a new element: `Input(name=`email16`, type=`select`, task=`Word Formality Annotation`)` - - - - - -  
input: Input(name=`email16`, type=`select`, task=`Word Formality Annotation`)
about to try executing one action, on the following input: email16
Executing one action: self.actions.modify_select('email16', '3_Very_Formal')
We are going to select this select `email16` with value `3_Very_Formal`
 - - - - - -  starting a new element: `Input(name=`email17`, type=`select`, task=`Word Formality Annotation`)` - - - - - -  
input: Input(name=`email17`, type=`select`, task=`Word Formality Annotation`)
about to try executing one action, on the following input: email17
Executing one action: self.actions.modify_select('email17', '3_Very_Formal')
We are going to select this select `email17` with value `3_Very_Formal`
 - - - - - -  starting a new element: `Input(name=`email18`, type=`select`, task=`Word Formality Annotation`)` - - - - - -  
input: Input(name=`email18`, type=`select`, task=`Word Formality Annotation`)
about to try executing one action, on the following input: email18
Executing one action: self.actions.modify_select('email18', '6 Moderately Formal')
Failed to execute an action self.actions.modify_select('email18', '6 Moderately Formal'), error: Input value `6 Moderately Formal` is not among the available option values `['NA', '-3_Very_Informal', '-2_Moderately_Informal', '-1_Slightly_Informal', '0_Neither', '1_Slightly_Formal', '2_Moderately_Formal', '3_Very_Formal', '0_Not_Usable']`
 - - - - - -  starting a new element: `Input(name=`email19`, type=`select`, task=`Word Formality Annotation`)` - - - - - -  
input: Input(name=`email19`, type=`select`, task=`Word Formality Annotation`)
about to try executing one action, on the following input: email19
Executing one action: self.actions.modify_select('email19', '2_Moderately_Formal')
We are going to select this select `email19` with value `2_Moderately_Formal`
input: Input(name=`email0`, type=`select`, task=`Word Formality Annotation`)
 visible : ['2_Moderately_Formal']
 visible_values : ['2_Moderately_Formal']
input: Input(name=`email1`, type=`select`, task=`Word Formality Annotation`)
 visible : ['2_Moderately_Formal']
 visible_values : ['2_Moderately_Formal']
input: Input(name=`email2`, type=`select`, task=`Word Formality Annotation`)
 visible : ['2_Moderately_Formal']
 visible_values : ['2_Moderately_Formal']
input: Input(name=`email3`, type=`select`, task=`Word Formality Annotation`)
 visible : ['2_Moderately_Formal']
 visible_values : ['2_Moderately_Formal']
input: Input(name=`email4`, type=`select`, task=`Word Formality Annotation`)
 visible : ['2_Moderately_Formal']
 visible_values : ['2_Moderately_Formal']
input: Input(name=`email5`, type=`select`, task=`Word Formality Annotation`)
 visible : ['2_Moderately_Formal']
 visible_values : ['2_Moderately_Formal']
input: Input(name=`email6`, type=`select`, task=`Word Formality Annotation`)
 visible : ['2_Moderately_Formal']
 visible_values : ['2_Moderately_Formal']
input: Input(name=`email7`, type=`select`, task=`Word Formality Annotation`)
 visible : ['3_Very_Formal']
 visible_values : ['3_Very_Formal']
input: Input(name=`email8`, type=`select`, task=`Word Formality Annotation`)
 visible : ['2_Moderately_Formal']
 visible_values : ['2_Moderately_Formal']
input: Input(name=`email9`, type=`select`, task=`Word Formality Annotation`)
 visible : ['3_Very_Formal']
 visible_values : ['3_Very_Formal']
input: Input(name=`email10`, type=`select`, task=`Word Formality Annotation`)
 visible : ['3_Very_Formal']
 visible_values : ['3_Very_Formal']
input: Input(name=`email11`, type=`select`, task=`Word Formality Annotation`)
 visible : ['1_Slightly_Formal']
 visible_values : ['1_Slightly_Formal']
input: Input(name=`email12`, type=`select`, task=`Word Formality Annotation`)
 visible : ['3_Very_Formal']
 visible_values : ['3_Very_Formal']
input: Input(name=`email13`, type=`select`, task=`Word Formality Annotation`)
 visible : ['1_Slightly_Formal']
 visible_values : ['1_Slightly_Formal']
input: Input(name=`email14`, type=`select`, task=`Word Formality Annotation`)
 visible : ['3_Very_Formal']
 visible_values : ['3_Very_Formal']
input: Input(name=`email15`, type=`select`, task=`Word Formality Annotation`)
 visible : ['3_Very_Formal']
 visible_values : ['3_Very_Formal']
input: Input(name=`email16`, type=`select`, task=`Word Formality Annotation`)
 visible : ['3_Very_Formal']
 visible_values : ['3_Very_Formal']
input: Input(name=`email17`, type=`select`, task=`Word Formality Annotation`)
 visible : ['3_Very_Formal']
 visible_values : ['3_Very_Formal']
input: Input(name=`email18`, type=`select`, task=`Word Formality Annotation`)
 visible : ['NA']
 visible_values : ['NA']
input: Input(name=`email19`, type=`select`, task=`Word Formality Annotation`)
 visible : ['2_Moderately_Formal']
 visible_values : ['2_Moderately_Formal']
 ------- evaluating input: Input(name=`email0`, type=`select`, task=`Word Formality Annotation`) ------- 
----> answers: `['1_Slightly_Formal', '1_Slightly_Formal', '0_Neither', '2_Moderately_Formal', '2_Moderately_Formal']` - type: `<class 'list'>`
----> baseline_answer: `2_Moderately_Formal` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`email1`, type=`select`, task=`Word Formality Annotation`) ------- 
----> answers: `['0_Neither', '0_Neither', '0_Neither', '-2_Moderately_Informal', '-2_Moderately_Informal']` - type: `<class 'list'>`
----> baseline_answer: `2_Moderately_Formal` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`email2`, type=`select`, task=`Word Formality Annotation`) ------- 
----> answers: `['-2_Moderately_Informal', '-3_Very_Informal', '-3_Very_Informal', '-3_Very_Informal', '-2_Moderately_Informal']` - type: `<class 'list'>`
----> baseline_answer: `2_Moderately_Formal` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`email3`, type=`select`, task=`Word Formality Annotation`) ------- 
----> answers: `['2_Moderately_Formal', '1_Slightly_Formal', '1_Slightly_Formal', '2_Moderately_Formal', '2_Moderately_Formal']` - type: `<class 'list'>`
----> baseline_answer: `2_Moderately_Formal` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`email4`, type=`select`, task=`Word Formality Annotation`) ------- 
----> answers: `['0_Neither', '0_Neither', '2_Moderately_Formal', '2_Moderately_Formal', '2_Moderately_Formal']` - type: `<class 'list'>`
----> baseline_answer: `2_Moderately_Formal` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`email5`, type=`select`, task=`Word Formality Annotation`) ------- 
----> answers: `['1_Slightly_Formal', '1_Slightly_Formal', '2_Moderately_Formal', '3_Very_Formal', '2_Moderately_Formal']` - type: `<class 'list'>`
----> baseline_answer: `2_Moderately_Formal` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`email6`, type=`select`, task=`Word Formality Annotation`) ------- 
----> answers: `['2_Moderately_Formal', '0_Neither', '2_Moderately_Formal', '3_Very_Formal', '3_Very_Formal']` - type: `<class 'list'>`
----> baseline_answer: `2_Moderately_Formal` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  1.0
----> per-field score: 1.0
 ------- evaluating input: Input(name=`email7`, type=`select`, task=`Word Formality Annotation`) ------- 
----> answers: `['0_Neither', '0_Neither', '0_Neither', '1_Slightly_Formal', '2_Moderately_Formal']` - type: `<class 'list'>`
----> baseline_answer: `3_Very_Formal` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`email8`, type=`select`, task=`Word Formality Annotation`) ------- 
----> answers: `['0_Neither', '0_Neither', '0_Neither', '2_Moderately_Formal', '1_Slightly_Formal']` - type: `<class 'list'>`
----> baseline_answer: `2_Moderately_Formal` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`email9`, type=`select`, task=`Word Formality Annotation`) ------- 
----> answers: `['2_Moderately_Formal', '1_Slightly_Formal', '1_Slightly_Formal', '3_Very_Formal', '2_Moderately_Formal']` - type: `<class 'list'>`
----> baseline_answer: `3_Very_Formal` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`email10`, type=`select`, task=`Word Formality Annotation`) ------- 
----> answers: `['0_Neither', '0_Neither', '0_Neither', '-2_Moderately_Informal', '1_Slightly_Formal']` - type: `<class 'list'>`
----> baseline_answer: `3_Very_Formal` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`email11`, type=`select`, task=`Word Formality Annotation`) ------- 
----> answers: `['0_Neither', '0_Neither', '0_Neither', '3_Very_Formal', '3_Very_Formal']` - type: `<class 'list'>`
----> baseline_answer: `1_Slightly_Formal` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`email12`, type=`select`, task=`Word Formality Annotation`) ------- 
----> answers: `['0_Neither', '1_Slightly_Formal', '1_Slightly_Formal', '3_Very_Formal', '2_Moderately_Formal']` - type: `<class 'list'>`
----> baseline_answer: `3_Very_Formal` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`email13`, type=`select`, task=`Word Formality Annotation`) ------- 
----> answers: `['0_Neither', '0_Neither', '-1_Slightly_Informal', '-2_Moderately_Informal', '2_Moderately_Formal']` - type: `<class 'list'>`
----> baseline_answer: `1_Slightly_Formal` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`email14`, type=`select`, task=`Word Formality Annotation`) ------- 
----> answers: `['0_Neither', '0_Neither', '0_Neither', '2_Moderately_Formal', '2_Moderately_Formal']` - type: `<class 'list'>`
----> baseline_answer: `3_Very_Formal` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`email15`, type=`select`, task=`Word Formality Annotation`) ------- 
----> answers: `['1_Slightly_Formal', '1_Slightly_Formal', '0_Neither', '3_Very_Formal', '3_Very_Formal']` - type: `<class 'list'>`
----> baseline_answer: `3_Very_Formal` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`email16`, type=`select`, task=`Word Formality Annotation`) ------- 
----> answers: `['0_Neither', '0_Neither', '-1_Slightly_Informal', '2_Moderately_Formal', '0_Neither']` - type: `<class 'list'>`
----> baseline_answer: `3_Very_Formal` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`email17`, type=`select`, task=`Word Formality Annotation`) ------- 
----> answers: `['0_Neither', '0_Neither', '-1_Slightly_Informal', '3_Very_Formal', '1_Slightly_Formal']` - type: `<class 'list'>`
----> baseline_answer: `3_Very_Formal` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`email18`, type=`select`, task=`Word Formality Annotation`) ------- 
----> answers: `['0_Neither', '0_Neither', '0_Neither', '0_Not_Usable', '0_Neither']` - type: `<class 'list'>`
----> baseline_answer: `NA` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 ------- evaluating input: Input(name=`email19`, type=`select`, task=`Word Formality Annotation`) ------- 
----> answers: `['0_Neither', '0_Neither', '1_Slightly_Formal', '3_Very_Formal', '2_Moderately_Formal']` - type: `<class 'list'>`
----> baseline_answer: `2_Moderately_Formal` - type: `<class 'str'>`
--> Computing the majority vote
 --> scores:  0.0
----> per-field score: 0.0
 --> Per-instance overall score: 0.15
 --> Per-instance per-field breakdown: {'select': [0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
Task: Word Formality Annotation --> Score: 0.15
Premature destructor being called potentially
